
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import objetos.ErrorCom;
import objetos.Etiqueta;
import objetos.ParametroEtiqueta;
import objetos.Instrucciones.DeclAsign;
import objetos.Instrucciones.InsIf;
import objetos.Instruccion;
import objetos.Instrucciones.Ciclo;
import objetos.Instrucciones.InsInsert;
import objetos.Instrucciones.AlertInfo;
import objetos.Captcha;
import objetos.Proceso;
import objetos.Instrucciones.Redireccionar;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserInsert extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return symTI.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserInsert() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserInsert(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserInsert(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\004\000\002\002\002\000\002\022" +
    "\002\000\002\002\007\000\002\023\002\000\002\003\005" +
    "\000\002\024\002\000\002\003\010\000\002\025\002\000" +
    "\002\003\010\000\002\026\002\000\002\003\010\000\002" +
    "\027\002\000\002\003\010\000\002\030\002\000\002\003" +
    "\007\000\002\031\002\000\002\003\010\000\002\032\002" +
    "\000\002\003\010\000\002\033\002\000\002\003\010\000" +
    "\002\034\002\000\002\003\010\000\002\003\007\000\002" +
    "\003\007\000\002\003\007\000\002\003\007\000\002\003" +
    "\007\000\002\003\007\000\002\003\007\000\002\003\006" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\007\004\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\005\000\002\035\002\000\002\021" +
    "\007\000\002\036\002\000\002\021\007\000\002\037\002" +
    "\000\002\021\007\000\002\040\002\000\002\021\007\000" +
    "\002\041\002\000\002\011\010\000\002\011\004\000\002" +
    "\011\002\000\002\042\002\000\002\012\010\000\002\012" +
    "\004\000\002\012\002\000\002\043\002\000\002\013\010" +
    "\000\002\044\002\000\002\013\010\000\002\013\004\000" +
    "\002\013\002\000\002\045\002\000\002\015\010\000\002" +
    "\046\002\000\002\015\010\000\002\047\002\000\002\015" +
    "\010\000\002\050\002\000\002\015\010\000\002\051\002" +
    "\000\002\015\010\000\002\015\002\000\002\052\002\000" +
    "\002\016\010\000\002\053\002\000\002\016\010\000\002" +
    "\054\002\000\002\016\010\000\002\016\004\000\002\016" +
    "\002\000\002\055\002\000\002\017\010\000\002\017\004" +
    "\000\002\017\002\000\002\056\002\000\002\020\010\000" +
    "\002\020\004\000\002\020\002\000\002\005\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\006\002\000\005\004\001\002\000\004\013" +
    "\007\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\004\004\uffff\001\002\000\004\004\011\001" +
    "\002\000\062\005\032\007\026\012\016\055\022\056\043" +
    "\057\036\060\024\061\014\062\042\063\020\064\033\067" +
    "\025\070\041\071\031\072\027\073\015\074\012\075\023" +
    "\076\030\077\021\100\035\101\037\102\034\103\013\001" +
    "\002\000\062\005\uffd4\007\uffd4\012\uffd4\055\uffd4\056\uffd4" +
    "\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063\uffd4\064\uffd4\067" +
    "\uffd4\070\uffd4\071\uffd4\072\uffd4\073\uffd4\074\uffd4\075\uffd4" +
    "\076\uffd4\077\uffd4\100\uffd4\101\uffd4\102\uffd4\103\uffd4\001" +
    "\002\000\062\005\uffcd\007\uffcd\012\uffcd\055\uffcd\056\uffcd" +
    "\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\067" +
    "\uffcd\070\uffcd\071\uffcd\072\uffcd\073\uffcd\074\uffcd\075\uffcd" +
    "\076\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\001" +
    "\002\000\062\005\uffe0\007\uffe0\012\uffe0\055\uffe0\056\uffe0" +
    "\057\uffe0\060\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\067" +
    "\uffe0\070\uffe0\071\uffe0\072\uffe0\073\uffe0\074\uffe0\075\uffe0" +
    "\076\uffe0\077\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\001" +
    "\002\000\062\005\uffd5\007\uffd5\012\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063\uffd5\064\uffd5\067" +
    "\uffd5\070\uffd5\071\uffd5\072\uffd5\073\uffd5\074\uffd5\075\uffd5" +
    "\076\uffd5\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\001" +
    "\002\000\062\005\uffda\007\uffda\012\uffda\055\uffda\056\uffda" +
    "\057\uffda\060\uffda\061\uffda\062\uffda\063\uffda\064\uffda\067" +
    "\uffda\070\uffda\071\uffda\072\uffda\073\uffda\074\uffda\075\uffda" +
    "\076\uffda\077\uffda\100\uffda\101\uffda\102\uffda\103\uffda\001" +
    "\002\000\004\002\ufffe\001\002\000\062\005\uffcc\007\uffcc" +
    "\012\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\064\uffcc\067\uffcc\070\uffcc\071\uffcc\072\uffcc" +
    "\073\uffcc\074\uffcc\075\uffcc\076\uffcc\077\uffcc\100\uffcc\101" +
    "\uffcc\102\uffcc\103\uffcc\001\002\000\062\005\uffd1\007\uffd1" +
    "\012\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062" +
    "\uffd1\063\uffd1\064\uffd1\067\uffd1\070\uffd1\071\uffd1\072\uffd1" +
    "\073\uffd1\074\uffd1\075\uffd1\076\uffd1\077\uffd1\100\uffd1\101" +
    "\uffd1\102\uffd1\103\uffd1\001\002\000\062\005\uffdf\007\uffdf" +
    "\012\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\062" +
    "\uffdf\063\uffdf\064\uffdf\067\uffdf\070\uffdf\071\uffdf\072\uffdf" +
    "\073\uffdf\074\uffdf\075\uffdf\076\uffdf\077\uffdf\100\uffdf\101" +
    "\uffdf\102\uffdf\103\uffdf\001\002\000\062\005\uffd3\007\uffd3" +
    "\012\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062" +
    "\uffd3\063\uffd3\064\uffd3\067\uffd3\070\uffd3\071\uffd3\072\uffd3" +
    "\073\uffd3\074\uffd3\075\uffd3\076\uffd3\077\uffd3\100\uffd3\101" +
    "\uffd3\102\uffd3\103\uffd3\001\002\000\062\005\uffe1\007\uffe1" +
    "\012\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\064\uffe1\067\uffe1\070\uffe1\071\uffe1\072\uffe1" +
    "\073\uffe1\074\uffe1\075\uffe1\076\uffe1\077\uffe1\100\uffe1\101" +
    "\uffe1\102\uffe1\103\uffe1\001\002\000\062\005\uffd9\007\uffd9" +
    "\012\uffd9\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\064\uffd9\067\uffd9\070\uffd9\071\uffd9\072\uffd9" +
    "\073\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9\100\uffd9\101" +
    "\uffd9\102\uffd9\103\uffd9\001\002\000\062\005\uffdc\007\uffdc" +
    "\012\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\067\uffdc\070\uffdc\071\uffdc\072\uffdc" +
    "\073\uffdc\074\uffdc\075\uffdc\076\uffdc\077\uffdc\100\uffdc\101" +
    "\uffdc\102\uffdc\103\uffdc\001\002\000\062\005\uffd6\007\uffd6" +
    "\012\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\064\uffd6\067\uffd6\070\uffd6\071\uffd6\072\uffd6" +
    "\073\uffd6\074\uffd6\075\uffd6\076\uffd6\077\uffd6\100\uffd6\101" +
    "\uffd6\102\uffd6\103\uffd6\001\002\000\062\005\uffd2\007\uffd2" +
    "\012\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\067\uffd2\070\uffd2\071\uffd2\072\uffd2" +
    "\073\uffd2\074\uffd2\075\uffd2\076\uffd2\077\uffd2\100\uffd2\101" +
    "\uffd2\102\uffd2\103\uffd2\001\002\000\062\005\uffd7\007\uffd7" +
    "\012\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\064\uffd7\067\uffd7\070\uffd7\071\uffd7\072\uffd7" +
    "\073\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7\100\uffd7\101" +
    "\uffd7\102\uffd7\103\uffd7\001\002\000\026\007\053\020\054" +
    "\021\051\022\056\026\057\027\052\030\047\031\055\032" +
    "\050\063\046\001\002\000\062\005\uffcb\007\uffcb\012\uffcb" +
    "\055\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073\uffcb" +
    "\074\uffcb\075\uffcb\076\uffcb\077\uffcb\100\uffcb\101\uffcb\102" +
    "\uffcb\103\uffcb\001\002\000\062\005\uffce\007\uffce\012\uffce" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063" +
    "\uffce\064\uffce\067\uffce\070\uffce\071\uffce\072\uffce\073\uffce" +
    "\074\uffce\075\uffce\076\uffce\077\uffce\100\uffce\101\uffce\102" +
    "\uffce\103\uffce\001\002\000\062\005\uffd0\007\uffd0\012\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\064\uffd0\067\uffd0\070\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\074\uffd0\075\uffd0\076\uffd0\077\uffd0\100\uffd0\101\uffd0\102" +
    "\uffd0\103\uffd0\001\002\000\062\005\uffdd\007\uffdd\012\uffdd" +
    "\055\uffdd\056\uffdd\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063" +
    "\uffdd\064\uffdd\067\uffdd\070\uffdd\071\uffdd\072\uffdd\073\uffdd" +
    "\074\uffdd\075\uffdd\076\uffdd\077\uffdd\100\uffdd\101\uffdd\102" +
    "\uffdd\103\uffdd\001\002\000\062\005\uffcf\007\uffcf\012\uffcf" +
    "\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063" +
    "\uffcf\064\uffcf\067\uffcf\070\uffcf\071\uffcf\072\uffcf\073\uffcf" +
    "\074\uffcf\075\uffcf\076\uffcf\077\uffcf\100\uffcf\101\uffcf\102" +
    "\uffcf\103\uffcf\001\002\000\062\005\ufffd\007\ufffd\012\ufffd" +
    "\055\ufffd\056\ufffd\057\ufffd\060\ufffd\061\ufffd\062\ufffd\063" +
    "\ufffd\064\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd" +
    "\074\ufffd\075\ufffd\076\ufffd\077\ufffd\100\ufffd\101\ufffd\102" +
    "\ufffd\103\ufffd\001\002\000\062\005\uffd8\007\uffd8\012\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8\063" +
    "\uffd8\064\uffd8\067\uffd8\070\uffd8\071\uffd8\072\uffd8\073\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\077\uffd8\100\uffd8\101\uffd8\102" +
    "\uffd8\103\uffd8\001\002\000\062\005\uffdb\007\uffdb\012\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\063" +
    "\uffdb\064\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\073\uffdb" +
    "\074\uffdb\075\uffdb\076\uffdb\077\uffdb\100\uffdb\101\uffdb\102" +
    "\uffdb\103\uffdb\001\002\000\062\005\uffde\007\uffde\012\uffde" +
    "\055\uffde\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\063" +
    "\uffde\064\uffde\067\uffde\070\uffde\071\uffde\072\uffde\073\uffde" +
    "\074\uffde\075\uffde\076\uffde\077\uffde\100\uffde\101\uffde\102" +
    "\uffde\103\uffde\001\002\000\062\005\032\007\026\012\016" +
    "\055\022\056\043\057\036\060\024\061\014\062\042\063" +
    "\020\064\033\067\025\070\041\071\031\072\027\073\015" +
    "\074\012\075\023\076\030\077\021\100\035\101\037\102" +
    "\034\103\013\001\002\000\004\002\ufffc\001\002\000\004" +
    "\004\321\001\002\000\006\004\ufff1\010\ufff1\001\002\000" +
    "\006\004\uffed\010\uffed\001\002\000\006\004\ufff9\010\ufff9" +
    "\001\002\000\004\004\ufff3\001\002\000\022\013\215\020" +
    "\211\021\213\022\217\026\220\030\212\031\216\032\214" +
    "\001\002\000\006\004\ufffb\010\ufffb\001\002\000\006\004" +
    "\uffef\010\uffef\001\002\000\006\004\ufff7\010\ufff7\001\002" +
    "\000\006\004\ufff5\010\ufff5\001\002\000\006\004\uff92\010" +
    "\061\001\002\000\014\043\065\050\070\051\067\052\071" +
    "\053\066\001\002\000\004\004\063\001\002\000\062\005" +
    "\032\007\026\012\016\055\022\056\043\057\036\060\024" +
    "\061\014\062\042\063\020\064\033\067\025\070\041\071" +
    "\031\072\027\073\015\074\012\075\023\076\030\077\021" +
    "\100\035\101\037\102\034\103\013\001\002\000\004\002" +
    "\ufff4\001\002\000\004\012\072\001\002\000\004\012\072" +
    "\001\002\000\004\012\072\001\002\000\004\012\072\001" +
    "\002\000\004\012\072\001\002\000\004\062\077\001\002" +
    "\000\004\011\uff98\001\002\000\004\011\075\001\002\000" +
    "\006\004\uff92\010\061\001\002\000\004\004\uff97\001\002" +
    "\000\004\011\uff81\001\002\000\004\011\uff9c\001\002\000" +
    "\004\011\102\001\002\000\006\004\uff92\010\061\001\002" +
    "\000\004\004\uff9b\001\002\000\004\011\uff9a\001\002\000" +
    "\004\011\106\001\002\000\006\004\uff92\010\061\001\002" +
    "\000\004\004\uff99\001\002\000\004\011\uff96\001\002\000" +
    "\004\011\112\001\002\000\006\004\uff92\010\061\001\002" +
    "\000\004\004\uff95\001\002\000\004\011\uff94\001\002\000" +
    "\004\011\116\001\002\000\006\004\uff92\010\061\001\002" +
    "\000\004\004\uff93\001\002\000\006\004\uff9d\010\122\001" +
    "\002\000\004\004\157\001\002\000\016\037\125\040\131" +
    "\041\132\043\126\045\130\046\127\001\002\000\006\004" +
    "\uff9d\010\122\001\002\000\004\004\uff9e\001\002\000\004" +
    "\012\072\001\002\000\004\012\072\001\002\000\004\012" +
    "\072\001\002\000\004\012\072\001\002\000\004\012\072" +
    "\001\002\000\004\012\072\001\002\000\004\011\uffae\001" +
    "\002\000\004\011\135\001\002\000\006\004\uffad\010\uffad" +
    "\001\002\000\004\011\uffb0\001\002\000\004\011\140\001" +
    "\002\000\006\004\uffaf\010\uffaf\001\002\000\004\011\uffa2" +
    "\001\002\000\004\011\143\001\002\000\006\004\uff9d\010" +
    "\122\001\002\000\004\004\uffa1\001\002\000\004\011\uffa0" +
    "\001\002\000\004\011\147\001\002\000\006\004\uff9d\010" +
    "\122\001\002\000\004\004\uff9f\001\002\000\004\011\uffac" +
    "\001\002\000\004\011\153\001\002\000\006\004\uffab\010" +
    "\uffab\001\002\000\004\011\uffb2\001\002\000\004\011\156" +
    "\001\002\000\006\004\uffb1\010\uffb1\001\002\000\062\005" +
    "\032\007\026\012\016\055\022\056\043\057\036\060\024" +
    "\061\014\062\042\063\020\064\033\067\025\070\041\071" +
    "\031\072\027\073\015\074\012\075\023\076\030\077\021" +
    "\100\035\101\037\102\034\103\013\001\002\000\004\002" +
    "\ufff6\001\002\000\006\004\uff86\010\162\001\002\000\014" +
    "\036\170\037\125\040\131\041\132\043\126\001\002\000" +
    "\004\004\166\001\002\000\006\004\uff86\010\162\001\002" +
    "\000\004\004\uff87\001\002\000\062\005\032\007\026\012" +
    "\016\055\022\056\043\057\036\060\024\061\014\062\042" +
    "\063\020\064\033\067\025\070\041\071\031\072\027\073" +
    "\015\074\012\075\023\076\030\077\021\100\035\101\037" +
    "\102\034\103\013\001\002\000\004\002\uffee\001\002\000" +
    "\004\012\072\001\002\000\004\011\uff89\001\002\000\004" +
    "\011\173\001\002\000\006\004\uff86\010\162\001\002\000" +
    "\004\004\uff88\001\002\000\006\004\uffa7\010\177\001\002" +
    "\000\004\004\207\001\002\000\014\036\202\037\125\040" +
    "\131\041\132\043\126\001\002\000\006\004\uffa7\010\177" +
    "\001\002\000\004\004\uffa8\001\002\000\004\012\072\001" +
    "\002\000\004\011\uffaa\001\002\000\004\011\205\001\002" +
    "\000\006\004\uffa7\010\177\001\002\000\004\004\uffa9\001" +
    "\002\000\062\005\032\007\026\012\016\055\022\056\043" +
    "\057\036\060\024\061\014\062\042\063\020\064\033\067" +
    "\025\070\041\071\031\072\027\073\015\074\012\075\023" +
    "\076\030\077\021\100\035\101\037\102\034\103\013\001" +
    "\002\000\004\002\ufffa\001\002\000\004\004\236\001\002" +
    "\000\004\004\234\001\002\000\004\004\232\001\002\000" +
    "\004\004\230\001\002\000\004\004\227\001\002\000\004" +
    "\004\225\001\002\000\004\004\223\001\002\000\004\004" +
    "\221\001\002\000\062\005\032\007\026\012\016\055\022" +
    "\056\043\057\036\060\024\061\014\062\042\063\020\064" +
    "\033\067\025\070\041\071\031\072\027\073\015\074\012" +
    "\075\023\076\030\077\021\100\035\101\037\102\034\103" +
    "\013\001\002\000\004\002\uffe6\001\002\000\062\005\032" +
    "\007\026\012\016\055\022\056\043\057\036\060\024\061" +
    "\014\062\042\063\020\064\033\067\025\070\041\071\031" +
    "\072\027\073\015\074\012\075\023\076\030\077\021\100" +
    "\035\101\037\102\034\103\013\001\002\000\004\002\uffe3" +
    "\001\002\000\062\005\032\007\026\012\016\055\022\056" +
    "\043\057\036\060\024\061\014\062\042\063\020\064\033" +
    "\067\025\070\041\071\031\072\027\073\015\074\012\075" +
    "\023\076\030\077\021\100\035\101\037\102\034\103\013" +
    "\001\002\000\004\002\uffe8\001\002\000\004\002\uffe2\001" +
    "\002\000\062\005\032\007\026\012\016\055\022\056\043" +
    "\057\036\060\024\061\014\062\042\063\020\064\033\067" +
    "\025\070\041\071\031\072\027\073\015\074\012\075\023" +
    "\076\030\077\021\100\035\101\037\102\034\103\013\001" +
    "\002\000\004\002\uffe9\001\002\000\062\005\032\007\026" +
    "\012\016\055\022\056\043\057\036\060\024\061\014\062" +
    "\042\063\020\064\033\067\025\070\041\071\031\072\027" +
    "\073\015\074\012\075\023\076\030\077\021\100\035\101" +
    "\037\102\034\103\013\001\002\000\004\002\uffe4\001\002" +
    "\000\062\005\032\007\026\012\016\055\022\056\043\057" +
    "\036\060\024\061\014\062\042\063\020\064\033\067\025" +
    "\070\041\071\031\072\027\073\015\074\012\075\023\076" +
    "\030\077\021\100\035\101\037\102\034\103\013\001\002" +
    "\000\004\002\uffe7\001\002\000\062\005\032\007\026\012" +
    "\016\055\022\056\043\057\036\060\024\061\014\062\042" +
    "\063\020\064\033\067\025\070\041\071\031\072\027\073" +
    "\015\074\012\075\023\076\030\077\021\100\035\101\037" +
    "\102\034\103\013\001\002\000\004\002\uffe5\001\002\000" +
    "\004\004\241\001\002\000\062\005\032\007\026\012\016" +
    "\055\022\056\043\057\036\060\024\061\014\062\042\063" +
    "\020\064\033\067\025\070\041\071\031\072\027\073\015" +
    "\074\012\075\023\076\030\077\021\100\035\101\037\102" +
    "\034\103\013\001\002\000\004\002\ufff2\001\002\000\006" +
    "\004\uffa3\010\245\001\002\000\004\004\255\001\002\000" +
    "\014\037\125\040\131\041\132\042\250\043\126\001\002" +
    "\000\006\004\uffa3\010\245\001\002\000\004\004\uffa4\001" +
    "\002\000\004\012\072\001\002\000\004\011\uffa6\001\002" +
    "\000\004\011\253\001\002\000\006\004\uffa3\010\245\001" +
    "\002\000\004\004\uffa5\001\002\000\062\005\032\007\026" +
    "\012\016\055\022\056\043\057\036\060\024\061\014\062" +
    "\042\063\020\064\033\067\025\070\041\071\031\072\027" +
    "\073\015\074\012\075\023\076\030\077\021\100\035\101" +
    "\037\102\034\103\013\001\002\000\004\002\ufff8\001\002" +
    "\000\006\004\uff82\010\260\001\002\000\014\036\266\037" +
    "\125\040\131\041\132\043\126\001\002\000\004\004\264" +
    "\001\002\000\006\004\uff82\010\260\001\002\000\004\004" +
    "\uff83\001\002\000\062\005\032\007\026\012\016\055\022" +
    "\056\043\057\036\060\024\061\014\062\042\063\020\064" +
    "\033\067\025\070\041\071\031\072\027\073\015\074\012" +
    "\075\023\076\030\077\021\100\035\101\037\102\034\103" +
    "\013\001\002\000\004\002\uffec\001\002\000\004\012\072" +
    "\001\002\000\004\011\uff85\001\002\000\004\011\271\001" +
    "\002\000\006\004\uff82\010\260\001\002\000\004\004\uff84" +
    "\001\002\000\006\004\uff8a\010\274\001\002\000\020\035" +
    "\303\036\302\037\125\040\131\041\132\043\126\054\304" +
    "\001\002\000\004\004\300\001\002\000\006\004\uff8a\010" +
    "\274\001\002\000\004\004\uff8b\001\002\000\062\005\032" +
    "\007\026\012\016\055\022\056\043\057\036\060\024\061" +
    "\014\062\042\063\020\064\033\067\025\070\041\071\031" +
    "\072\027\073\015\074\012\075\023\076\030\077\021\100" +
    "\035\101\037\102\034\103\013\001\002\000\004\002\ufff0" +
    "\001\002\000\004\012\072\001\002\000\004\012\072\001" +
    "\002\000\004\012\072\001\002\000\004\011\uff91\001\002" +
    "\000\004\011\307\001\002\000\006\004\uff8a\010\274\001" +
    "\002\000\004\004\uff90\001\002\000\004\011\uff8d\001\002" +
    "\000\004\011\313\001\002\000\006\004\uff8a\010\274\001" +
    "\002\000\004\004\uff8c\001\002\000\004\011\uff8f\001\002" +
    "\000\004\011\317\001\002\000\006\004\uff8a\010\274\001" +
    "\002\000\004\004\uff8e\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\062\005\uffeb\007\uffeb" +
    "\012\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\064\uffeb\067\uffeb\070\uffeb\071\uffeb\072\uffeb" +
    "\073\uffeb\074\uffeb\075\uffeb\076\uffeb\077\uffeb\100\uffeb\101" +
    "\uffeb\102\uffeb\103\uffeb\001\002\000\062\005\342\007\336" +
    "\012\326\055\331\056\352\057\346\060\333\061\324\062" +
    "\351\063\327\064\344\067\334\070\350\071\341\072\335" +
    "\073\325\074\323\075\332\076\337\077\330\100\345\101" +
    "\347\102\343\103\322\001\002\000\004\063\363\001\002" +
    "\000\062\005\342\007\336\012\326\055\331\056\352\057" +
    "\346\060\333\061\324\062\351\063\327\064\344\067\334" +
    "\070\350\071\341\072\335\073\325\074\323\075\332\076" +
    "\337\077\330\100\345\101\347\102\343\103\322\001\002" +
    "\000\060\007\026\012\016\055\022\056\043\057\036\060" +
    "\024\061\014\062\042\063\020\064\033\067\025\070\041" +
    "\071\031\072\027\073\015\074\012\075\023\076\030\077" +
    "\021\100\035\101\037\102\034\103\013\001\002\000\062" +
    "\005\342\007\336\012\326\055\331\056\352\057\346\060" +
    "\333\061\324\062\351\063\327\064\344\067\334\070\350" +
    "\071\341\072\335\073\325\074\323\075\332\076\337\077" +
    "\330\100\345\101\347\102\343\103\322\001\002\000\062" +
    "\005\342\007\336\012\326\055\331\056\352\057\346\060" +
    "\333\061\324\062\351\063\327\064\344\067\334\070\350" +
    "\071\341\072\335\073\325\074\323\075\332\076\337\077" +
    "\330\100\345\101\347\102\343\103\322\001\002\000\062" +
    "\005\342\007\336\012\326\055\331\056\352\057\346\060" +
    "\333\061\324\062\351\063\327\064\344\067\334\070\350" +
    "\071\341\072\335\073\325\074\323\075\332\076\337\077" +
    "\330\100\345\101\347\102\343\103\322\001\002\000\062" +
    "\005\342\007\336\012\326\055\331\056\352\057\346\060" +
    "\333\061\324\062\351\063\327\064\344\067\334\070\350" +
    "\071\341\072\335\073\325\074\323\075\332\076\337\077" +
    "\330\100\345\101\347\102\343\103\322\001\002\000\062" +
    "\005\342\007\336\012\326\055\331\056\352\057\346\060" +
    "\333\061\324\062\351\063\327\064\344\067\334\070\350" +
    "\071\341\072\335\073\325\074\323\075\332\076\337\077" +
    "\330\100\345\101\347\102\343\103\322\001\002\000\062" +
    "\005\342\007\336\012\326\055\331\056\352\057\346\060" +
    "\333\061\324\062\351\063\327\064\344\067\334\070\350" +
    "\071\341\072\335\073\325\074\323\075\332\076\337\077" +
    "\330\100\345\101\347\102\343\103\322\001\002\000\062" +
    "\005\uffc7\007\uffc7\012\uffc7\055\uffc7\056\uffc7\057\uffc7\060" +
    "\uffc7\061\uffc7\062\uffc7\063\uffc7\064\uffc7\067\uffc7\070\uffc7" +
    "\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077" +
    "\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7\001\002\000\062" +
    "\005\uffc4\007\uffc4\012\uffc4\055\uffc4\056\uffc4\057\uffc4\060" +
    "\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4\067\uffc4\070\uffc4" +
    "\071\uffc4\072\uffc4\073\uffc4\074\uffc4\075\uffc4\076\uffc4\077" +
    "\uffc4\100\uffc4\101\uffc4\102\uffc4\103\uffc4\001\002\000\062" +
    "\005\uffc1\007\uffc1\012\uffc1\055\uffc1\056\uffc1\057\uffc1\060" +
    "\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\067\uffc1\070\uffc1" +
    "\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077" +
    "\uffc1\100\uffc1\101\uffc1\102\uffc1\103\uffc1\001\002\000\062" +
    "\005\uffb8\007\uffb8\012\uffb8\055\uffb8\056\uffb8\057\uffb8\060" +
    "\uffb8\061\uffb8\062\uffb8\063\uffb8\064\uffb8\067\uffb8\070\uffb8" +
    "\071\uffb8\072\uffb8\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077" +
    "\uffb8\100\uffb8\101\uffb8\102\uffb8\103\uffb8\001\002\000\062" +
    "\005\uffc6\007\uffc6\012\uffc6\055\uffc6\056\uffc6\057\uffc6\060" +
    "\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\076\uffc6\077" +
    "\uffc6\100\uffc6\101\uffc6\102\uffc6\103\uffc6\001\002\000\062" +
    "\005\uffb9\007\uffb9\012\uffb9\055\uffb9\056\uffb9\057\uffb9\060" +
    "\uffb9\061\uffb9\062\uffb9\063\uffb9\064\uffb9\067\uffb9\070\uffb9" +
    "\071\uffb9\072\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077" +
    "\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\001\002\000\062" +
    "\005\uffb4\007\uffb4\012\uffb4\055\uffb4\056\uffb4\057\uffb4\060" +
    "\uffb4\061\uffb4\062\uffb4\063\uffb4\064\uffb4\067\uffb4\070\uffb4" +
    "\071\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\076\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\001\002\000\062" +
    "\005\uffb7\007\uffb7\012\uffb7\055\uffb7\056\uffb7\057\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\067\uffb7\070\uffb7" +
    "\071\uffb7\072\uffb7\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077" +
    "\uffb7\100\uffb7\101\uffb7\102\uffb7\103\uffb7\001\002\000\004" +
    "\004\364\001\002\000\062\005\uffb3\007\uffb3\012\uffb3\055" +
    "\uffb3\056\uffb3\057\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\064\uffb3\067\uffb3\070\uffb3\071\uffb3\072\uffb3\073\uffb3\074" +
    "\uffb3\075\uffb3\076\uffb3\077\uffb3\100\uffb3\101\uffb3\102\uffb3" +
    "\103\uffb3\001\002\000\062\005\uffc0\007\uffc0\012\uffc0\055" +
    "\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\067\uffc0\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074" +
    "\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\101\uffc0\102\uffc0" +
    "\103\uffc0\001\002\000\062\005\032\007\026\012\016\055" +
    "\022\056\043\057\036\060\024\061\014\062\042\063\020" +
    "\064\033\067\025\070\041\071\031\072\027\073\015\074" +
    "\012\075\023\076\030\077\021\100\035\101\037\102\034" +
    "\103\013\001\002\000\004\002\uffea\001\002\000\062\005" +
    "\uffbb\007\uffbb\012\uffbb\055\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\067\uffbb\070\uffbb\071" +
    "\uffbb\072\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\102\uffbb\103\uffbb\001\002\000\062\005" +
    "\uffc5\007\uffc5\012\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\062\uffc5\063\uffc5\064\uffc5\067\uffc5\070\uffc5\071" +
    "\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5\077\uffc5" +
    "\100\uffc5\101\uffc5\102\uffc5\103\uffc5\001\002\000\062\005" +
    "\uffbf\007\uffbf\012\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf" +
    "\061\uffbf\062\uffbf\063\uffbf\064\uffbf\067\uffbf\070\uffbf\071" +
    "\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\076\uffbf\077\uffbf" +
    "\100\uffbf\101\uffbf\102\uffbf\103\uffbf\001\002\000\062\005" +
    "\uffc2\007\uffc2\012\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2" +
    "\061\uffc2\062\uffc2\063\uffc2\064\uffc2\067\uffc2\070\uffc2\071" +
    "\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2" +
    "\100\uffc2\101\uffc2\102\uffc2\103\uffc2\001\002\000\062\005" +
    "\uffca\007\uffca\012\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\061\uffca\062\uffca\063\uffca\064\uffca\067\uffca\070\uffca\071" +
    "\uffca\072\uffca\073\uffca\074\uffca\075\uffca\076\uffca\077\uffca" +
    "\100\uffca\101\uffca\102\uffca\103\uffca\001\002\000\062\005" +
    "\uffbc\007\uffbc\012\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc" +
    "\061\uffbc\062\uffbc\063\uffbc\064\uffbc\067\uffbc\070\uffbc\071" +
    "\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc\076\uffbc\077\uffbc" +
    "\100\uffbc\101\uffbc\102\uffbc\103\uffbc\001\002\000\062\005" +
    "\uffc8\007\uffc8\012\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\063\uffc8\064\uffc8\067\uffc8\070\uffc8\071" +
    "\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077\uffc8" +
    "\100\uffc8\101\uffc8\102\uffc8\103\uffc8\001\002\000\062\005" +
    "\uffba\007\uffba\012\uffba\055\uffba\056\uffba\057\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\064\uffba\067\uffba\070\uffba\071" +
    "\uffba\072\uffba\073\uffba\074\uffba\075\uffba\076\uffba\077\uffba" +
    "\100\uffba\101\uffba\102\uffba\103\uffba\001\002\000\062\005" +
    "\uffb5\007\uffb5\012\uffb5\055\uffb5\056\uffb5\057\uffb5\060\uffb5" +
    "\061\uffb5\062\uffb5\063\uffb5\064\uffb5\067\uffb5\070\uffb5\071" +
    "\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\076\uffb5\077\uffb5" +
    "\100\uffb5\101\uffb5\102\uffb5\103\uffb5\001\002\000\062\005" +
    "\uffc3\007\uffc3\012\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3" +
    "\061\uffc3\062\uffc3\063\uffc3\064\uffc3\067\uffc3\070\uffc3\071" +
    "\uffc3\072\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3" +
    "\100\uffc3\101\uffc3\102\uffc3\103\uffc3\001\002\000\062\005" +
    "\uffbe\007\uffbe\012\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe" +
    "\061\uffbe\062\uffbe\063\uffbe\064\uffbe\067\uffbe\070\uffbe\071" +
    "\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe" +
    "\100\uffbe\101\uffbe\102\uffbe\103\uffbe\001\002\000\062\005" +
    "\uffc9\007\uffc9\012\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9" +
    "\061\uffc9\062\uffc9\063\uffc9\064\uffc9\067\uffc9\070\uffc9\071" +
    "\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9\076\uffc9\077\uffc9" +
    "\100\uffc9\101\uffc9\102\uffc9\103\uffc9\001\002\000\062\005" +
    "\uffbd\007\uffbd\012\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\061\uffbd\062\uffbd\063\uffbd\064\uffbd\067\uffbd\070\uffbd\071" +
    "\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd" +
    "\100\uffbd\101\uffbd\102\uffbd\103\uffbd\001\002\000\062\005" +
    "\uffb6\007\uffb6\012\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\064\uffb6\067\uffb6\070\uffb6\071" +
    "\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6" +
    "\100\uffb6\101\uffb6\102\uffb6\103\uffb6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0103\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\007\001\001" +
    "\000\002\001\001\000\006\003\016\004\037\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\044\004\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\031\272\001\001\000\004\033" +
    "\256\001\001\000\004\025\242\001\001\000\004\030\237" +
    "\001\001\000\002\001\001\000\004\024\174\001\001\000" +
    "\004\032\160\001\001\000\004\026\117\001\001\000\004" +
    "\027\057\001\001\000\004\015\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\063\004\037\001\001" +
    "\000\002\001\001\000\004\005\113\001\001\000\004\005" +
    "\107\001\001\000\004\005\103\001\001\000\004\005\077" +
    "\001\001\000\004\005\072\001\001\000\002\001\001\000" +
    "\004\047\073\001\001\000\002\001\001\000\004\015\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\045" +
    "\100\001\001\000\002\001\001\000\004\015\102\001\001" +
    "\000\002\001\001\000\004\046\104\001\001\000\002\001" +
    "\001\000\004\015\106\001\001\000\002\001\001\000\004" +
    "\050\110\001\001\000\002\001\001\000\004\015\112\001" +
    "\001\000\002\001\001\000\004\051\114\001\001\000\002" +
    "\001\001\000\004\015\116\001\001\000\002\001\001\000" +
    "\006\013\120\021\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\123\021\122\001\001\000\002\001" +
    "\001\000\004\005\153\001\001\000\004\005\150\001\001" +
    "\000\004\005\144\001\001\000\004\005\140\001\001\000" +
    "\004\005\135\001\001\000\004\005\132\001\001\000\004" +
    "\037\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\036\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\141\001\001\000\002\001\001\000\006\013" +
    "\143\021\122\001\001\000\002\001\001\000\004\044\145" +
    "\001\001\000\002\001\001\000\006\013\147\021\122\001" +
    "\001\000\002\001\001\000\004\040\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\157\004\037" +
    "\001\001\000\002\001\001\000\006\017\162\021\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\164" +
    "\021\163\001\001\000\002\001\001\000\006\003\166\004" +
    "\037\001\001\000\002\001\001\000\004\005\170\001\001" +
    "\000\004\055\171\001\001\000\002\001\001\000\006\017" +
    "\173\021\163\001\001\000\002\001\001\000\006\011\175" +
    "\021\177\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\200\021\177\001\001\000\002\001\001\000\004" +
    "\005\202\001\001\000\004\041\203\001\001\000\002\001" +
    "\001\000\006\011\205\021\177\001\001\000\002\001\001" +
    "\000\006\003\207\004\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\003\221\004\037\001\001" +
    "\000\002\001\001\000\006\003\223\004\037\001\001\000" +
    "\002\001\001\000\006\003\225\004\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\230\004\037\001" +
    "\001\000\002\001\001\000\006\003\232\004\037\001\001" +
    "\000\002\001\001\000\006\003\234\004\037\001\001\000" +
    "\002\001\001\000\006\003\236\004\037\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\241\004\037\001" +
    "\001\000\002\001\001\000\006\012\243\021\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\246\021" +
    "\245\001\001\000\002\001\001\000\004\005\250\001\001" +
    "\000\004\042\251\001\001\000\002\001\001\000\006\012" +
    "\253\021\245\001\001\000\002\001\001\000\006\003\255" +
    "\004\037\001\001\000\002\001\001\000\006\020\260\021" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\262\021\261\001\001\000\002\001\001\000\006\003" +
    "\264\004\037\001\001\000\002\001\001\000\004\005\266" +
    "\001\001\000\004\056\267\001\001\000\002\001\001\000" +
    "\006\020\271\021\261\001\001\000\002\001\001\000\006" +
    "\016\274\021\275\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\276\021\275\001\001\000\002\001\001" +
    "\000\006\003\300\004\037\001\001\000\002\001\001\000" +
    "\004\005\314\001\001\000\004\005\310\001\001\000\004" +
    "\005\304\001\001\000\004\052\305\001\001\000\002\001" +
    "\001\000\006\016\307\021\275\001\001\000\002\001\001" +
    "\000\004\054\311\001\001\000\002\001\001\000\006\016" +
    "\313\021\275\001\001\000\002\001\001\000\004\053\315" +
    "\001\001\000\002\001\001\000\006\016\317\021\275\001" +
    "\001\000\002\001\001\000\004\007\337\001\001\000\004" +
    "\007\u0104\001\001\000\004\007\u0103\001\001\000\004\007" +
    "\u0102\001\001\000\004\007\u0101\001\001\000\004\007\u0100" +
    "\001\001\000\004\007\377\001\001\000\004\007\376\001" +
    "\001\000\004\007\375\001\001\000\004\007\374\001\001" +
    "\000\004\007\373\001\001\000\004\007\372\001\001\000" +
    "\004\007\371\001\001\000\004\007\370\001\001\000\004" +
    "\007\367\001\001\000\004\034\365\001\001\000\004\007" +
    "\364\001\001\000\002\001\001\000\004\007\361\001\001" +
    "\000\004\004\360\001\001\000\004\007\357\001\001\000" +
    "\004\007\356\001\001\000\004\007\355\001\001\000\004" +
    "\007\354\001\001\000\004\007\353\001\001\000\004\007" +
    "\352\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\003\366\004" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserInsert$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserInsert$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserInsert$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private List<ErrorCom> erroresCom;
    private List<Captcha> captchas;
    private List<Etiqueta> etiquetas;
    private List<ParametroEtiqueta> parametrosEtActl;
    //private List<Etiqueta> etiquetasBody;
    //private List<ParametroEtiqueta> parametrosBody;
    //private Etiqueta bodyAct;
    private Etiqueta etiquetaAct;
    private Etiqueta etiquetaPadre;
    private Etiqueta etiquetaScript;
    private DeclAsign delcAsignAct;
    private Instruccion instruccionAct;
    private Instruccion insIf;
    private Instruccion insPadre;
    private List<String> valoresCondicion;
    private AlertInfo alertInfoAct;
    private InsInsert insInsertAct;  
    private List<String> expresionNum;  
    private Captcha captchaAct;
    

	public ParserInsert(LexerInsert lex) {
		super(lex);
        this.erroresCom = lex.getErroresCom();
        this.etiquetas = new ArrayList<>();        
        this.etiquetaAct = new Etiqueta();
        this.etiquetaPadre = null;
        this.insPadre = null;
        this.valoresCondicion = new ArrayList<>();
        this.captchas = new ArrayList<>();
	}

    /**
     * Método al que se llama automáticamente ante algún error sintactico.
     **/ 
    public void syntax_error(Symbol s){ 
        erroresCom.add(new ErrorCom("Sintactico","No se esperaba Componente",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value),""));
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        erroresCom.add(new ErrorCom("Sintactico","Error sintactico Irrecuperable",String.valueOf(s.left),String.valueOf(s.right),String.valueOf(s.value),""));
    } 

    private void insertarCaptcha(){
        this.captchaAct = new Captcha();
        this.etiquetas = new ArrayList<>();
        this.captchaAct.setEtiquetas(this.etiquetas);
        this.captchas.add(this.captchaAct);
    }

    private void insertarEtiqueta(String tipo){
        this.etiquetaAct = new Etiqueta();
        this.etiquetaAct.setTipo(tipo);        
        if(this.etiquetaPadre == null){
            this.etiquetas.add(this.etiquetaAct);
        }else{
            //List<Etiqueta> etiquetasTemp = this.etiquetaPadre.getEtiquetas();
            this.etiquetaAct.setEtiquetaPadre(this.etiquetaPadre);
            etiquetaPadre.insertarEtiqueta(this.etiquetaAct);            
        }   
    }

    private void insertarPalsVar(String tipo, String contenido){
        this.etiquetaAct = new Etiqueta();
        this.etiquetaAct.setTipo(tipo);        
        this.etiquetaAct.setContenido(contenido);
        if(this.etiquetaPadre == null){
            this.etiquetas.add(this.etiquetaAct);
        }else{
            //List<Etiqueta> etiquetasTemp = this.etiquetaPadre.getEtiquetas();
            this.etiquetaAct.setEtiquetaPadre(this.etiquetaPadre);
            etiquetaPadre.insertarEtiqueta(this.etiquetaAct);            
        }
    }

    private void insertarScript(){
        this.etiquetaScript = this.etiquetaAct;           
    }    

    private void insertarPadre(){
        this.etiquetaPadre = this.etiquetaAct;
    }

    private void cerrarPadre(){
        Etiqueta etiquetaTemp = this.etiquetaPadre.getEtiquetaPadre();
        this.etiquetaPadre = etiquetaTemp;
    }

    private void insertarParametro(String tipo,String val){
        ParametroEtiqueta parIns = new ParametroEtiqueta(tipo,val);
        this.etiquetaAct.insertarParametro(parIns);
    }   


    public List<Etiqueta> getEtiquetasTotal(){
        return this.etiquetas;        
    } 

    protected int error_sync_size() {
		return 2;
	}

    public List<ErrorCom> getErroresCom(){
        return erroresCom;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserInsert$actions {
  private final ParserInsert parser;

  /** Constructor */
  CUP$ParserInsert$actions(ParserInsert parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserInsert$do_action_part00000000(
    int                        CUP$ParserInsert$act_num,
    java_cup.runtime.lr_parser CUP$ParserInsert$parser,
    java.util.Stack            CUP$ParserInsert$stack,
    int                        CUP$ParserInsert$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserInsert$result;

      /* select the action based on the action number */
      switch (CUP$ParserInsert$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		RESULT = start_val;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserInsert$parser.done_parsing();
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
insertarEtiqueta("GCIC");
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$0",16, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= MEN GCIC NT$0 MAY sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarPalsVar("CONTENIDO",String.valueOf(contenido));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$1",17, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sig ::= pals NT$1 sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$2 ::= 
            {
              Object RESULT =null;
insertarEtiqueta("SPAM");
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$2",18, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sig ::= MEN SPAM NT$2 par3 MAY sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$3 ::= 
            {
              Object RESULT =null;
insertarEtiqueta("INPUT");
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$3",19, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sig ::= MEN INPUT NT$3 par4 MAY sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$4 ::= 
            {
              Object RESULT =null;
insertarEtiqueta("TEXTAREA");
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$4",20, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sig ::= MEN TEXTAREA NT$4 par5 MAY sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$5 ::= 
            {
              Object RESULT =null;
insertarEtiqueta("IMG");
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$5",21, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sig ::= MEN IMG NT$5 par8 MAY sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$6 ::= 
            {
              Object RESULT =null;
insertarEtiqueta("BR");
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$6",22, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sig ::= MEN BR NT$6 MAY sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$7 ::= 
            {
              Object RESULT =null;
insertarEtiqueta("BUTTON");
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$7",23, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sig ::= MEN BUTTON NT$7 par9 MAY sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$8 ::= 
            {
              Object RESULT =null;
insertarEtiqueta("H1");
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$8",24, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sig ::= MEN H1 NT$8 par10 MAY sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NT$9 ::= 
            {
              Object RESULT =null;
insertarEtiqueta("PAR");
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$9",25, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // sig ::= MEN PAR NT$9 par11 MAY sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$10 ::= 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarPalsVar("VARIABLE",String.valueOf(contenido));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$10",26, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sig ::= MEN IDET MAY pals2 NT$10 sig 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Object contenido = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sig ::= MEN BARRA PAR MAY sig 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sig ::= MEN BARRA H1 MAY sig 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sig ::= MEN BARRA BUTTON MAY sig 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sig ::= MEN BARRA IMG MAY sig 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sig ::= MEN BARRA SPAM MAY sig 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sig ::= MEN BARRA INPUT MAY sig 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sig ::= MEN BARRA TEXTAREA MAY sig 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sig ::= MEN BARRA GCIC MAY 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("sig",1, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pals ::= PALABRA 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = p;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // pals ::= PALABRAS 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = p;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // pals ::= SUMA 
            {
              Object RESULT =null;
		RESULT = "+";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // pals ::= RESTA 
            {
              Object RESULT =null;
		RESULT = "-";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // pals ::= MULT 
            {
              Object RESULT =null;
		RESULT = "*";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // pals ::= BARRA 
            {
              Object RESULT =null;
		RESULT = "/";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // pals ::= VALP 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = p;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // pals ::= IGUAL 
            {
              Object RESULT =null;
		RESULT = "=";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pals ::= MENIG 
            {
              Object RESULT =null;
		RESULT = "<=";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pals ::= MAYIG 
            {
              Object RESULT =null;
		RESULT = ">=";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pals ::= DOBIGUAL 
            {
              Object RESULT =null;
		RESULT = "==";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pals ::= DIFER 
            {
              Object RESULT =null;
		RESULT = "!=";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pals ::= OR 
            {
              Object RESULT =null;
		RESULT = "||";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // pals ::= AND 
            {
              Object RESULT =null;
		RESULT = "&&";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // pals ::= PARI 
            {
              Object RESULT =null;
		RESULT = "(";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // pals ::= PARD 
            {
              Object RESULT =null;
		RESULT = ")";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // pals ::= PUNTCOMA 
            {
              Object RESULT =null;
		RESULT = ";";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pals ::= CORCHI 
            {
              Object RESULT =null;
		RESULT = "{";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pals ::= CORCHD 
            {
              Object RESULT =null;
		RESULT = "}";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pals ::= COMA 
            {
              Object RESULT =null;
		RESULT = ",";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // pals ::= DOSPUNT 
            {
              Object RESULT =null;
		RESULT = ":";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // pals ::= IDET 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = p;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // pals ::= DECIM 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = p;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals",2, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pals2 ::= PALABRA pals2 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = p+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // pals2 ::= PALABRAS pals2 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = p+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // pals2 ::= SUMA pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "+"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // pals2 ::= RESTA pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "-"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // pals2 ::= MULT pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "*"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pals2 ::= BARRA pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "/"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pals2 ::= VALP pals2 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = p+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pals2 ::= IGUAL pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "="+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pals2 ::= MENIG pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "<="+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pals2 ::= MAYIG pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = ">="+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // pals2 ::= DOBIGUAL pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "=="+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // pals2 ::= DIFER pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "!="+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // pals2 ::= OR pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "||"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // pals2 ::= AND pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "&&"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // pals2 ::= PARI pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "("+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // pals2 ::= PARD pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = ")"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // pals2 ::= PUNTCOMA pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = ";"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // pals2 ::= CORCHI pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "{"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // pals2 ::= CORCHD pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = "}"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // pals2 ::= COMA pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = ","+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // pals2 ::= DOSPUNT pals2 
            {
              Object RESULT =null;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = ":"+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // pals2 ::= IDET pals2 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = p+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // pals2 ::= DECIM pals 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int p2left = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int p2right = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object p2 = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = p+p2;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // pals2 ::= MEN IDET MAY 
            {
              Object RESULT =null;
		RESULT = "";
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("pals2",5, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$11 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("FSIZE",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$11",27, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parGlob ::= CORCHCUADI FSIZE valp NT$11 CORCHCUADD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parGlob",15, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$12 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("FFAMILY",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$12",28, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parGlob ::= CORCHCUADI FFAMILY valp NT$12 CORCHCUADD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parGlob",15, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$13 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("TEXTALIGN",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$13",29, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parGlob ::= CORCHCUADI TEXTALIGN valp NT$13 CORCHCUADD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parGlob",15, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$14 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("IDETIQUETA",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$14",30, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // parGlob ::= CORCHCUADI IDETIQUETA valp NT$14 CORCHCUADD 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("parGlob",15, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-4)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$15 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("COLOR",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$15",31, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // par3 ::= CORCHCUADI COLOR valp NT$15 CORCHCUADD par3 
            {
              Object RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par3",7, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // par3 ::= parGlob par3 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par3",7, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // par3 ::= 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par3",7, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$16 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("TYPE",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$16",32, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // par4 ::= CORCHCUADI TYPE valp NT$16 CORCHCUADD par4 
            {
              Object RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par4",8, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // par4 ::= parGlob par4 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par4",8, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // par4 ::= 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par4",8, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // NT$17 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("COLS",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$17",33, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // par5 ::= CORCHCUADI COLS valp NT$17 CORCHCUADD par5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$17
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par5",9, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$18 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("ROWS",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$18",34, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // par5 ::= CORCHCUADI ROWS valp NT$18 CORCHCUADD par5 
            {
              Object RESULT =null;
              // propagate RESULT from NT$18
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par5",9, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // par5 ::= parGlob par5 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par5",9, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // par5 ::= 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par5",9, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // NT$19 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("SRC",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$19",35, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // par8 ::= CORCHCUADI SRC valp NT$19 CORCHCUADD par8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$19
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par8",11, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$20 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("WIDTH",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$20",36, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // par8 ::= CORCHCUADI WIDTH valp NT$20 CORCHCUADD par8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$20
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par8",11, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // NT$21 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("HEIGHT",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$21",37, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // par8 ::= CORCHCUADI HEIGHT valp NT$21 CORCHCUADD par8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$21
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par8",11, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // NT$22 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("ALT",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$22",38, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // par8 ::= CORCHCUADI ALT valp NT$22 CORCHCUADD par8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$22
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par8",11, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // NT$23 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("IDETIQUETA",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$23",39, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // par8 ::= CORCHCUADI IDETIQUETA valp NT$23 CORCHCUADD par8 
            {
              Object RESULT =null;
              // propagate RESULT from NT$23
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par8",11, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // par8 ::= 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par8",11, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$24 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("ONCLICK",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$24",40, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // par9 ::= CORCHCUADI ONCLICK valp NT$24 CORCHCUADD par9 
            {
              Object RESULT =null;
              // propagate RESULT from NT$24
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par9",12, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$25 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("COLOR",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$25",41, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // par9 ::= CORCHCUADI COLOR valp NT$25 CORCHCUADD par9 
            {
              Object RESULT =null;
              // propagate RESULT from NT$25
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par9",12, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$26 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("BACK",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$26",42, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // par9 ::= CORCHCUADI BACK valp NT$26 CORCHCUADD par9 
            {
              Object RESULT =null;
              // propagate RESULT from NT$26
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par9",12, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // par9 ::= parGlob par9 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par9",12, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // par9 ::= 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par9",12, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // NT$27 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("COLOR",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$27",43, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // par10 ::= CORCHCUADI COLOR valp NT$27 CORCHCUADD par10 
            {
              Object RESULT =null;
              // propagate RESULT from NT$27
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par10",13, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // par10 ::= parGlob par10 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par10",13, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // par10 ::= 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par10",13, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$28 ::= 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
insertarParametro("COLOR",String.valueOf(val));
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("NT$28",44, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // par11 ::= CORCHCUADI COLOR valp NT$28 CORCHCUADD par11 
            {
              Object RESULT =null;
              // propagate RESULT from NT$28
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-3)).value;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par11",14, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-5)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // par11 ::= parGlob par11 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par11",14, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // par11 ::= 
            {
              Object RESULT =null;

              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("par11",14, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // valp ::= IGUAL VALP 
            {
              Object RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$ParserInsert$stack.peek()).value;
		RESULT = contenido;
              CUP$ParserInsert$result = parser.getSymbolFactory().newSymbol("valp",3, ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.elementAt(CUP$ParserInsert$top-1)), ((java_cup.runtime.Symbol)CUP$ParserInsert$stack.peek()), RESULT);
            }
          return CUP$ParserInsert$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserInsert$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserInsert$do_action(
    int                        CUP$ParserInsert$act_num,
    java_cup.runtime.lr_parser CUP$ParserInsert$parser,
    java.util.Stack            CUP$ParserInsert$stack,
    int                        CUP$ParserInsert$top)
    throws java.lang.Exception
    {
              return CUP$ParserInsert$do_action_part00000000(
                               CUP$ParserInsert$act_num,
                               CUP$ParserInsert$parser,
                               CUP$ParserInsert$stack,
                               CUP$ParserInsert$top);
    }
}

}
