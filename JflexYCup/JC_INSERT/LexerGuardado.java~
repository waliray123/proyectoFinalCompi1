// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexerInsert.jflex

package analizadores;
import java_cup.runtime.*; 
import analizadores.symT.*;
import java.util.List;
import java.util.ArrayList;
import objetos.ErrorCom;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerGuardado implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\1\3\2\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\10\24\1\26\1\27\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\45\1\54\1\55\1\56\1\57\1\60\1\45\1\61"+
    "\1\62\1\45\1\63\1\0\1\64\1\0\1\65\1\0"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\45\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\45\1\105\1\106\1\107\1\110\1\60\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\1\117\7\0\1\3\71\0"+
    "\1\120\100\121\60\0\2\122\115\0\1\123\u02a8\0\2\3"+
    "\u0100\0\1\124\u01d5\0\u0100\125";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\4\1\14"+
    "\1\15\1\16\1\17\1\20\4\4\1\21\1\22\14\4"+
    "\1\23\1\1\1\24\1\2\1\25\2\0\1\26\1\0"+
    "\1\27\2\30\1\4\1\0\1\31\1\32\1\33\2\4"+
    "\1\0\10\4\1\34\7\4\1\35\1\36\1\0\1\30"+
    "\1\37\1\4\1\0\7\4\1\40\2\4\2\0\1\4"+
    "\1\0\1\4\1\41\11\4\1\42\3\4\1\0\1\30"+
    "\1\4\1\0\1\4\1\43\2\4\1\0\1\4\1\44"+
    "\4\4\1\0\6\4\6\0\1\4\1\0\1\4\1\0"+
    "\3\4\1\45\2\4\1\46\1\47\1\4\1\50\1\4"+
    "\1\51\1\4\1\0\1\30\2\0\2\4\2\52\1\4"+
    "\1\0\1\4\1\53\2\4\1\0\6\4\1\0\1\53"+
    "\4\0\1\4\1\0\1\4\1\0\1\4\1\54\1\55"+
    "\4\4\1\56\4\0\1\57\1\4\2\60\1\61\1\4"+
    "\2\62\1\4\1\0\1\4\1\0\1\4\1\63\2\4"+
    "\3\0\1\63\1\4\1\0\1\4\1\0\3\4\1\64"+
    "\2\4\2\0\1\2\1\4\1\65\1\4\1\0\1\4"+
    "\1\0\2\4\2\66\1\65\1\0\1\4\1\0\1\4"+
    "\1\0\3\4\1\67\1\4\1\0\1\70\2\71\1\4"+
    "\1\0\1\72\1\4\1\72\1\4\1\0\1\4\1\0"+
    "\4\4\1\0\1\4\1\0\2\4\1\0\1\4\1\0"+
    "\2\4\1\73\1\4\2\0\1\4\1\0\1\74\1\4"+
    "\1\0\1\4\1\0\1\75\1\4\1\76\1\0\2\77"+
    "\1\4\1\0\1\4\1\0\1\100\1\0\1\36\1\0"+
    "\1\4\1\0\1\4\2\0\1\4\1\0\1\4\2\0"+
    "\1\4\1\0\1\101\1\0\1\4\4\0\1\4\1\0"+
    "\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\126\0\254\0\u0102\0\u0158\0\u01ae\0\u0204\0\u025a"+
    "\0\126\0\126\0\126\0\126\0\126\0\u01ae\0\126\0\u02b0"+
    "\0\126\0\126\0\u0306\0\u035c\0\u03b2\0\u0408\0\u045e\0\u04b4"+
    "\0\u050a\0\126\0\126\0\u0560\0\u05b6\0\u060c\0\u0662\0\u06b8"+
    "\0\u070e\0\u0764\0\u07ba\0\u0810\0\u0866\0\u08bc\0\u0912\0\126"+
    "\0\u0968\0\126\0\u09be\0\126\0\u0a14\0\u0a6a\0\126\0\u025a"+
    "\0\u025a\0\u0ac0\0\u0b16\0\u0b6c\0\u0bc2\0\126\0\126\0\126"+
    "\0\u0c18\0\u0c6e\0\u0cc4\0\u0d1a\0\u0d70\0\u0dc6\0\u0e1c\0\u0e72"+
    "\0\u0ec8\0\u0f1e\0\u0f74\0\u0b6c\0\u0fca\0\u1020\0\u1076\0\u10cc"+
    "\0\u1122\0\u1178\0\u11ce\0\126\0\126\0\u1224\0\u127a\0\u0b16"+
    "\0\u12d0\0\u1326\0\u137c\0\u13d2\0\u1428\0\u147e\0\u14d4\0\u152a"+
    "\0\u1580\0\u01ae\0\u15d6\0\u162c\0\u1682\0\u16d8\0\u172e\0\u1784"+
    "\0\u17da\0\u0408\0\u1830\0\u1886\0\u18dc\0\u1932\0\u1988\0\u19de"+
    "\0\u1a34\0\u1a8a\0\u1ae0\0\u0408\0\u1b36\0\u1b8c\0\u1be2\0\u1c38"+
    "\0\u1c8e\0\u1ce4\0\u1d3a\0\u1d90\0\u01ae\0\u1de6\0\u1e3c\0\u1e92"+
    "\0\u1ee8\0\u01ae\0\u1f3e\0\u1f94\0\u1fea\0\u2040\0\u2096\0\u20ec"+
    "\0\u2142\0\u2198\0\u21ee\0\u2244\0\u229a\0\u22f0\0\u2346\0\u239c"+
    "\0\u23f2\0\u2448\0\u249e\0\u24f4\0\u254a\0\u25a0\0\u25f6\0\u264c"+
    "\0\u26a2\0\u26f8\0\u0408\0\u274e\0\u27a4\0\u0408\0\u0408\0\u27fa"+
    "\0\u0408\0\u2850\0\u0408\0\u28a6\0\u28fc\0\u2952\0\u29a8\0\u29fe"+
    "\0\u2a54\0\u2aaa\0\u01ae\0\126\0\u2b00\0\u2b56\0\u2bac\0\u01ae"+
    "\0\u2c02\0\u2c58\0\u2cae\0\u2d04\0\u2d5a\0\u2db0\0\u2e06\0\u2e5c"+
    "\0\u2eb2\0\u2f08\0\126\0\u2f5e\0\u2fb4\0\u300a\0\u3060\0\u30b6"+
    "\0\u310c\0\u3162\0\u31b8\0\u320e\0\u0408\0\u0408\0\u3264\0\u32ba"+
    "\0\u3310\0\u3366\0\u0408\0\u33bc\0\u3412\0\u3468\0\u34be\0\u01ae"+
    "\0\u3514\0\u01ae\0\126\0\u01ae\0\u356a\0\u01ae\0\126\0\u35c0"+
    "\0\u3616\0\u366c\0\u36c2\0\u3718\0\u01ae\0\u376e\0\u37c4\0\u381a"+
    "\0\u3870\0\u38c6\0\126\0\u391c\0\u3972\0\u39c8\0\u3a1e\0\u3a74"+
    "\0\u3aca\0\u3b20\0\u0408\0\u3b76\0\u3bcc\0\u3c22\0\u3c78\0\u1d3a"+
    "\0\u3cce\0\u01ae\0\u3d24\0\u3d7a\0\u3dd0\0\u3e26\0\u3e7c\0\u3ed2"+
    "\0\u01ae\0\126\0\126\0\u3f28\0\u3f7e\0\u3fd4\0\u402a\0\u4080"+
    "\0\u40d6\0\u412c\0\u4182\0\u0408\0\u41d8\0\u422e\0\u01ae\0\u01ae"+
    "\0\126\0\u4284\0\u42da\0\u01ae\0\u4330\0\126\0\u4386\0\u43dc"+
    "\0\u4432\0\u4488\0\u44de\0\u4534\0\u458a\0\u45e0\0\u4636\0\u468c"+
    "\0\u46e2\0\u4738\0\u478e\0\u47e4\0\u483a\0\u4890\0\u48e6\0\u493c"+
    "\0\u01ae\0\u4992\0\u49e8\0\u4a3e\0\u4a94\0\u4aea\0\u01ae\0\u4b40"+
    "\0\u4b96\0\u4bec\0\u4c42\0\u0b6c\0\u4c98\0\u01ae\0\u4cee\0\u01ae"+
    "\0\126\0\u4d44\0\u4d9a\0\u4df0\0\u4e46\0\u01ae\0\u4e9c\0\u49e8"+
    "\0\u4ef2\0\u4f48\0\u4f9e\0\u4ff4\0\u504a\0\u50a0\0\u50f6\0\u514c"+
    "\0\u51a2\0\u51f8\0\u524e\0\u52a4\0\u52fa\0\126\0\u5350\0\u53a6"+
    "\0\u53fc\0\u5452\0\u54a8\0\u54fe\0\u5554\0\u55aa\0\126";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\2\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\2\1\17\2\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\2\2\26\1\27\2\26\1\30\16\26\1\31\2\26"+
    "\1\32\1\33\1\6\1\34\1\35\1\36\2\26\1\37"+
    "\1\26\1\40\1\41\3\26\1\42\1\43\1\26\1\44"+
    "\1\45\1\46\1\26\1\47\3\26\1\50\1\51\1\52"+
    "\1\2\1\26\4\2\127\0\2\3\1\0\2\3\126\0"+
    "\1\53\22\0\1\54\76\0\1\55\2\0\1\55\2\0"+
    "\2\55\2\0\2\55\3\0\1\55\2\0\3\55\5\0"+
    "\7\55\1\56\17\55\2\0\10\55\1\56\17\55\4\0"+
    "\1\55\15\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\27\6\2\0\30\6\4\0\1\6\16\0\1\57\113\0"+
    "\2\60\3\0\6\60\1\61\111\60\2\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\63\1\0\2\20"+
    "\1\62\4\0\1\62\3\26\1\64\23\26\2\0\1\6"+
    "\3\26\1\64\23\26\3\0\1\62\1\26\12\0\1\65"+
    "\22\0\1\66\125\0\1\67\125\0\1\70\75\0\2\62"+
    "\1\0\2\62\3\0\1\6\7\0\1\6\1\62\1\0"+
    "\2\26\1\62\4\0\1\62\3\26\1\64\23\26\2\0"+
    "\1\6\3\26\1\64\23\26\3\0\1\62\1\26\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\23\26"+
    "\2\0\1\71\3\26\1\64\23\26\3\0\1\62\1\26"+
    "\5\0\2\62\1\0\2\62\3\0\1\6\7\0\1\6"+
    "\1\62\1\0\2\26\1\62\4\0\1\62\3\26\1\64"+
    "\4\26\1\72\16\26\2\0\1\6\3\26\1\64\4\26"+
    "\1\72\16\26\3\0\1\62\1\26\1\73\4\0\2\62"+
    "\1\0\2\62\3\0\1\6\7\0\1\6\1\62\1\0"+
    "\2\26\1\62\4\0\1\62\1\74\2\26\1\64\23\26"+
    "\2\0\1\6\1\74\2\26\1\64\23\26\3\0\1\62"+
    "\1\26\5\0\2\62\1\0\2\62\3\0\1\6\7\0"+
    "\1\6\1\62\1\0\2\26\1\62\4\0\1\62\3\26"+
    "\1\64\23\26\2\0\1\6\3\26\1\64\6\26\1\75"+
    "\14\26\3\0\1\62\1\26\5\0\2\62\1\0\2\62"+
    "\3\0\1\6\7\0\1\6\1\62\1\0\2\26\1\62"+
    "\4\0\1\62\3\26\1\64\23\26\2\0\1\6\1\76"+
    "\2\26\1\64\23\26\3\0\1\62\1\26\5\0\2\62"+
    "\1\0\2\62\3\0\1\6\7\0\1\6\1\62\1\0"+
    "\2\26\1\62\4\0\1\62\3\26\1\64\23\26\2\0"+
    "\1\71\3\26\1\64\6\26\1\77\2\26\1\100\11\26"+
    "\3\0\1\62\1\26\5\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\3\26\1\64\4\26\1\72\16\26\2\0\1\6"+
    "\3\26\1\64\4\26\1\72\4\26\1\101\11\26\3\0"+
    "\1\62\1\26\1\73\4\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\3\26\1\64\23\26\2\0\1\6\3\26\1\64"+
    "\1\102\12\26\1\103\7\26\3\0\1\62\1\26\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\23\26"+
    "\2\0\1\6\3\26\1\104\23\26\3\0\1\62\1\26"+
    "\5\0\2\62\1\0\2\62\3\0\1\6\7\0\1\6"+
    "\1\62\1\0\2\26\1\62\4\0\1\62\3\26\1\64"+
    "\23\26\2\0\1\6\1\105\2\26\1\64\23\26\3\0"+
    "\1\62\1\26\5\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\3\26\1\64\10\26"+
    "\1\106\12\26\3\0\1\62\1\26\5\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\62\1\0\2\26"+
    "\1\62\4\0\1\62\3\26\1\64\23\26\2\0\1\6"+
    "\3\26\1\64\11\26\1\107\11\26\3\0\1\62\1\26"+
    "\5\0\2\62\1\0\2\62\3\0\1\6\7\0\1\6"+
    "\1\62\1\0\2\26\1\62\4\0\1\62\3\26\1\64"+
    "\23\26\2\0\1\6\3\26\1\64\13\26\1\110\7\26"+
    "\3\0\1\62\1\26\5\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\3\26\1\64\23\26\2\0\1\6\3\26\1\64"+
    "\1\111\20\26\1\112\1\26\3\0\1\62\1\26\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\23\26"+
    "\2\0\1\6\3\26\1\64\4\26\1\113\16\26\3\0"+
    "\1\62\1\26\122\0\1\114\7\0\2\53\3\0\120\53"+
    "\3\0\1\55\2\0\1\55\1\0\1\115\2\55\2\0"+
    "\2\55\3\0\1\55\2\0\3\55\5\0\7\55\1\56"+
    "\17\55\2\0\10\55\1\56\17\55\4\0\1\55\6\0"+
    "\1\55\2\0\1\55\1\0\1\115\2\55\2\0\2\55"+
    "\3\0\1\55\2\0\3\55\5\0\7\55\1\56\12\55"+
    "\1\116\4\55\2\0\10\55\1\56\11\55\1\116\5\55"+
    "\4\0\1\55\5\0\2\62\1\0\2\62\14\0\1\62"+
    "\1\0\3\62\4\0\4\62\1\117\23\62\3\0\3\62"+
    "\1\117\23\62\3\0\2\62\5\0\2\62\1\0\2\62"+
    "\14\0\1\62\1\0\2\120\1\62\4\0\4\62\1\117"+
    "\23\62\3\0\3\62\1\117\23\62\3\0\2\62\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\1\121"+
    "\22\26\2\0\1\6\3\26\1\64\1\121\22\26\3\0"+
    "\1\62\1\26\25\0\1\122\115\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\1\6\1\123\1\6\1\124\2\6"+
    "\1\125\1\126\1\127\2\6\1\130\2\6\1\131\1\132"+
    "\1\6\1\133\1\134\4\6\2\0\2\6\1\123\1\6"+
    "\1\124\2\6\1\125\1\126\1\127\1\6\1\130\2\6"+
    "\1\131\1\132\1\6\1\133\1\134\5\6\4\0\1\6"+
    "\1\135\1\136\3\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\11\26\1\137\11\26\2\0\1\6\3\26"+
    "\1\64\10\26\1\137\12\26\3\0\1\62\1\26\55\0"+
    "\1\140\30\0\1\140\24\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\3\26\1\64\14\26\1\141\6\26\2\0\1\6"+
    "\3\26\1\64\13\26\1\141\7\26\3\0\1\62\1\26"+
    "\5\0\2\62\1\0\2\62\3\0\1\6\7\0\1\6"+
    "\1\62\1\0\2\26\1\62\4\0\1\62\3\26\1\64"+
    "\23\26\2\0\1\6\3\26\1\64\15\26\1\142\5\26"+
    "\3\0\1\62\1\26\5\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\3\26\1\64\23\26\2\0\1\6\2\26\1\143"+
    "\1\64\23\26\3\0\1\62\1\26\5\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\62\1\0\2\26"+
    "\1\62\4\0\1\62\3\26\1\64\23\26\2\0\1\6"+
    "\1\144\2\26\1\64\23\26\3\0\1\62\1\26\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\23\26"+
    "\2\0\1\6\3\26\1\64\6\26\1\145\14\26\3\0"+
    "\1\62\1\26\5\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\3\26\1\64\10\26"+
    "\1\146\12\26\3\0\1\62\1\26\5\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\62\1\0\2\26"+
    "\1\62\4\0\1\62\3\26\1\64\23\26\2\0\1\6"+
    "\3\26\1\64\4\26\1\147\16\26\3\0\1\62\1\26"+
    "\5\0\2\62\1\0\2\62\3\0\1\6\7\0\1\6"+
    "\1\62\1\0\2\26\1\62\4\0\1\62\3\26\1\64"+
    "\23\26\2\0\1\6\3\26\1\64\1\150\22\26\3\0"+
    "\1\62\1\26\5\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\3\26\1\64\7\26"+
    "\1\151\13\26\3\0\1\62\1\26\5\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\62\1\0\2\26"+
    "\1\62\4\0\1\62\3\26\1\64\23\26\2\0\1\6"+
    "\2\26\1\152\1\64\23\26\3\0\1\62\1\26\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\23\26"+
    "\2\0\1\6\3\26\1\64\17\26\1\153\3\26\3\0"+
    "\1\62\1\26\5\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\2\26\1\154\1\64"+
    "\23\26\3\0\1\62\1\26\5\0\2\62\1\0\2\62"+
    "\3\0\1\6\7\0\1\6\1\62\1\0\2\26\1\62"+
    "\4\0\1\62\3\26\1\64\23\26\2\0\1\6\3\26"+
    "\1\64\20\26\1\155\2\26\3\0\1\62\1\26\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\23\26"+
    "\2\0\1\6\3\26\1\64\12\26\1\156\10\26\3\0"+
    "\1\62\1\26\5\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\3\26\1\157\23\26"+
    "\3\0\1\62\1\26\6\0\1\55\2\0\1\55\1\0"+
    "\1\115\2\55\2\0\2\55\3\0\1\55\2\0\3\55"+
    "\5\0\7\55\1\56\12\55\1\160\4\55\2\0\10\55"+
    "\1\56\11\55\1\160\5\55\4\0\1\55\5\0\2\62"+
    "\1\0\2\62\14\0\1\62\1\0\3\62\4\0\4\62"+
    "\1\117\1\161\22\62\3\0\3\62\1\117\1\161\22\62"+
    "\3\0\2\62\5\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\2\26\1\162\1\64\23\26\2\0\1\6\2\26\1\162"+
    "\1\64\23\26\3\0\1\62\1\26\25\0\1\163\115\0"+
    "\1\6\7\0\1\6\2\0\2\6\6\0\16\6\1\164"+
    "\1\6\1\165\2\6\1\166\3\6\2\0\16\6\1\164"+
    "\1\6\1\165\2\6\1\166\4\6\4\0\1\6\15\0"+
    "\1\6\7\0\1\6\2\0\2\6\6\0\10\6\1\167"+
    "\16\6\2\0\11\6\1\167\16\6\4\0\1\6\1\170"+
    "\14\0\1\6\7\0\1\6\2\0\2\6\6\0\2\6"+
    "\1\171\24\6\2\0\3\6\1\171\24\6\4\0\1\6"+
    "\15\0\1\6\7\0\1\6\2\0\1\6\1\172\6\0"+
    "\4\6\1\173\22\6\2\0\5\6\1\173\22\6\4\0"+
    "\1\6\15\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\14\6\1\174\1\175\11\6\2\0\14\6\1\174\1\175"+
    "\12\6\4\0\1\6\15\0\1\6\7\0\1\6\2\0"+
    "\2\6\6\0\10\6\1\176\16\6\2\0\11\6\1\176"+
    "\16\6\4\0\1\6\1\177\14\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\17\6\1\200\7\6\2\0\17\6"+
    "\1\200\10\6\4\0\1\6\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\2\6\1\201\1\6\1\202\12\6"+
    "\1\203\7\6\2\0\3\6\1\201\1\6\1\202\11\6"+
    "\1\203\10\6\4\0\1\6\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\4\6\1\204\3\6\1\205\16\6"+
    "\2\0\5\6\1\204\3\6\1\205\16\6\4\0\1\6"+
    "\1\206\53\0\1\207\1\210\27\0\1\207\1\210\61\0"+
    "\1\211\1\0\1\212\12\0\1\213\14\0\1\211\1\0"+
    "\1\212\11\0\1\213\22\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\3\26\1\64\20\26\1\214\2\26\2\0\1\6"+
    "\3\26\1\64\23\26\3\0\1\62\1\26\64\0\1\215"+
    "\46\0\2\62\1\0\2\62\3\0\1\6\7\0\1\6"+
    "\1\62\1\0\2\26\1\62\4\0\1\62\3\26\1\64"+
    "\4\26\1\216\16\26\2\0\1\6\3\26\1\64\4\26"+
    "\1\216\16\26\3\0\1\62\1\26\1\217\4\0\2\62"+
    "\1\0\2\62\3\0\1\6\7\0\1\6\1\62\1\0"+
    "\2\26\1\62\4\0\1\62\3\26\1\64\23\26\2\0"+
    "\1\6\3\26\1\64\5\26\1\220\15\26\3\0\1\62"+
    "\1\26\5\0\2\62\1\0\2\62\3\0\1\6\7\0"+
    "\1\6\1\62\1\0\2\26\1\62\4\0\1\62\3\26"+
    "\1\64\23\26\2\0\1\6\3\26\1\64\14\26\1\221"+
    "\6\26\3\0\1\62\1\26\5\0\2\62\1\0\2\62"+
    "\3\0\1\6\7\0\1\6\1\62\1\0\2\26\1\62"+
    "\4\0\1\62\3\26\1\64\23\26\2\0\1\6\3\26"+
    "\1\64\11\26\1\222\2\26\1\223\6\26\3\0\1\62"+
    "\1\26\5\0\2\62\1\0\2\62\3\0\1\6\7\0"+
    "\1\6\1\62\1\0\2\26\1\62\4\0\1\62\3\26"+
    "\1\64\23\26\2\0\1\6\3\26\1\64\15\26\1\224"+
    "\5\26\3\0\1\62\1\26\5\0\2\62\1\0\2\62"+
    "\3\0\1\6\7\0\1\6\1\62\1\0\2\26\1\62"+
    "\4\0\1\62\3\26\1\64\23\26\2\0\1\6\3\26"+
    "\1\64\2\26\1\225\20\26\3\0\1\62\1\26\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\23\26"+
    "\2\0\1\6\3\26\1\64\1\26\1\226\21\26\3\0"+
    "\1\62\1\26\5\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\3\26\1\64\1\227"+
    "\22\26\3\0\1\62\1\26\5\0\2\62\1\0\2\62"+
    "\3\0\1\6\7\0\1\6\1\62\1\0\2\26\1\62"+
    "\4\0\1\62\3\26\1\64\23\26\2\0\1\6\3\26"+
    "\1\64\6\26\1\230\14\26\3\0\1\62\1\26\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\23\26"+
    "\2\0\1\6\3\26\1\64\14\26\1\231\6\26\3\0"+
    "\1\62\1\26\5\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\3\26\1\64\15\26"+
    "\1\232\5\26\3\0\1\62\1\26\5\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\62\1\0\2\26"+
    "\1\62\4\0\1\62\3\26\1\64\23\26\2\0\1\6"+
    "\3\26\1\64\1\233\22\26\3\0\1\62\1\26\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\1\121"+
    "\22\26\2\0\1\6\3\26\1\64\1\121\14\26\1\234"+
    "\5\26\3\0\1\62\1\26\6\0\1\55\2\0\1\55"+
    "\1\0\1\115\2\55\2\0\2\55\3\0\1\55\2\0"+
    "\3\55\5\0\7\55\1\56\7\55\1\235\7\55\2\0"+
    "\10\55\1\56\6\55\1\235\10\55\4\0\1\55\5\0"+
    "\2\62\1\0\2\62\14\0\1\62\1\0\3\62\4\0"+
    "\3\62\1\236\1\117\23\62\3\0\2\62\1\236\1\117"+
    "\23\62\3\0\2\62\5\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\3\26\1\64\23\26\2\0\1\6\3\26\1\64"+
    "\23\26\3\0\1\62\1\26\1\237\3\0\21\163\1\240"+
    "\103\163\12\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\3\6\1\241\23\6\2\0\4\6\1\241\23\6\4\0"+
    "\1\6\15\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\22\6\1\242\4\6\2\0\22\6\1\242\5\6\4\0"+
    "\1\6\15\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\24\6\1\243\2\6\2\0\30\6\4\0\1\6\64\0"+
    "\1\244\56\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\10\6\1\245\16\6\2\0\11\6\1\245\16\6\4\0"+
    "\1\6\1\246\14\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\1\247\26\6\2\0\1\6\1\247\26\6\4\0"+
    "\1\6\15\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\6\6\1\250\20\6\2\0\7\6\1\250\20\6\4\0"+
    "\1\6\15\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\17\6\1\251\7\6\2\0\17\6\1\251\10\6\4\0"+
    "\1\6\15\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\15\6\1\252\11\6\2\0\15\6\1\252\12\6\4\0"+
    "\1\6\55\0\1\253\30\0\1\253\34\0\1\6\7\0"+
    "\1\6\2\0\2\6\6\0\22\6\1\254\4\6\2\0"+
    "\22\6\1\254\5\6\4\0\1\6\15\0\1\6\7\0"+
    "\1\6\2\0\2\6\6\0\20\6\1\255\6\6\2\0"+
    "\20\6\1\255\7\6\4\0\1\6\15\0\1\6\7\0"+
    "\1\6\2\0\2\6\6\0\13\6\1\256\13\6\2\0"+
    "\13\6\1\256\14\6\4\0\1\6\15\0\1\6\7\0"+
    "\1\6\2\0\2\6\6\0\1\257\26\6\2\0\1\6"+
    "\1\257\26\6\4\0\1\6\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\25\6\1\260\1\6\2\0\25\6"+
    "\1\260\2\6\4\0\1\6\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\22\6\1\261\4\6\2\0\22\6"+
    "\1\261\5\6\4\0\1\6\62\0\1\262\30\0\1\262"+
    "\60\0\1\263\31\0\1\263\104\0\1\264\30\0\1\264"+
    "\75\0\1\265\30\0\1\265\67\0\1\266\30\0\1\266"+
    "\61\0\1\267\31\0\1\267\40\0\2\62\1\0\2\62"+
    "\3\0\1\6\7\0\1\6\1\62\1\0\2\26\1\62"+
    "\4\0\1\62\1\270\2\26\1\64\23\26\2\0\1\6"+
    "\1\270\2\26\1\64\23\26\3\0\1\62\1\26\40\0"+
    "\1\271\31\0\1\271\40\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\1\272\2\26\1\64\23\26\2\0\1\6\1\272"+
    "\2\26\1\64\23\26\3\0\1\62\1\26\40\0\1\273"+
    "\31\0\1\273\40\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\3\26\1\64\2\26"+
    "\1\274\20\26\3\0\1\62\1\26\5\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\62\1\0\2\26"+
    "\1\62\4\0\1\62\3\26\1\64\23\26\2\0\1\6"+
    "\3\26\1\64\14\26\1\275\6\26\3\0\1\62\1\26"+
    "\5\0\2\62\1\0\2\62\3\0\1\6\7\0\1\6"+
    "\1\62\1\0\2\26\1\62\4\0\1\62\3\26\1\64"+
    "\23\26\2\0\1\6\3\26\1\64\13\26\1\276\7\26"+
    "\3\0\1\62\1\26\5\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\277\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\3\26\1\64\23\26\2\0\1\6\3\26\1\64"+
    "\23\26\3\0\1\62\1\26\5\0\2\62\1\0\2\62"+
    "\3\0\1\6\7\0\1\6\1\62\1\0\2\26\1\62"+
    "\4\0\1\62\3\26\1\64\23\26\2\0\1\6\3\26"+
    "\1\64\3\26\1\300\17\26\3\0\1\62\1\26\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\23\26"+
    "\2\0\1\6\3\26\1\64\4\26\1\301\16\26\3\0"+
    "\1\62\1\26\5\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\302\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\3\26\1\64\23\26"+
    "\3\0\1\62\1\26\5\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\3\26\1\64\23\26\2\0\1\6\3\26\1\64"+
    "\3\26\1\303\17\26\3\0\1\62\1\26\6\0\1\55"+
    "\2\0\1\55\1\0\1\115\2\55\2\0\2\55\3\0"+
    "\1\55\2\0\2\55\1\304\5\0\7\55\1\56\11\55"+
    "\1\305\5\55\2\0\10\55\1\56\10\55\1\305\6\55"+
    "\4\0\1\55\1\0\1\306\3\0\2\62\1\0\2\62"+
    "\14\0\1\62\1\0\3\62\4\0\4\62\1\117\23\62"+
    "\3\0\3\62\1\117\23\62\3\0\2\62\1\237\53\0"+
    "\1\62\30\0\1\62\24\0\21\163\1\307\103\163\12\0"+
    "\1\6\7\0\1\6\2\0\2\6\6\0\26\6\1\310"+
    "\2\0\26\6\1\310\1\6\4\0\1\6\15\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\22\6\1\311\4\6"+
    "\2\0\22\6\1\311\5\6\4\0\1\6\15\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\2\6\1\312\24\6"+
    "\2\0\3\6\1\312\24\6\4\0\1\6\42\0\1\313"+
    "\31\0\1\313\46\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\3\6\1\314\23\6\2\0\4\6\1\314\23\6"+
    "\4\0\1\6\15\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\23\6\1\315\3\6\2\0\23\6\1\315\4\6"+
    "\4\0\1\6\15\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\12\6\1\316\14\6\2\0\12\6\1\316\15\6"+
    "\4\0\1\6\2\0\1\317\47\0\1\317\30\0\1\317"+
    "\24\0\1\317\12\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\10\6\1\320\16\6\2\0\11\6\1\320\16\6"+
    "\4\0\1\6\1\321\14\0\1\6\7\0\1\6\2\0"+
    "\2\6\6\0\10\6\1\322\16\6\2\0\11\6\1\322"+
    "\16\6\4\0\1\6\1\323\14\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\4\6\1\324\22\6\2\0\5\6"+
    "\1\324\22\6\4\0\1\6\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\14\6\1\325\12\6\2\0\14\6"+
    "\1\325\13\6\4\0\1\6\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\22\6\1\326\4\6\2\0\22\6"+
    "\1\326\5\6\4\0\1\6\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\13\6\1\327\13\6\2\0\13\6"+
    "\1\327\14\6\4\0\1\6\53\0\1\330\30\0\1\330"+
    "\104\0\1\331\30\0\1\331\61\0\1\323\31\0\1\323"+
    "\23\0\1\323\43\0\1\332\31\0\1\332\103\0\1\333"+
    "\30\0\1\333\25\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\14\26\1\334\6\26\2\0\1\6\3\26"+
    "\1\64\13\26\1\334\7\26\3\0\1\62\1\26\60\0"+
    "\1\335\30\0\1\335\21\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\1\26\1\336\1\26\1\64\23\26\2\0\1\6"+
    "\1\26\1\336\1\26\1\64\23\26\3\0\1\62\1\26"+
    "\41\0\1\337\31\0\1\337\37\0\2\62\1\0\2\62"+
    "\3\0\1\6\7\0\1\6\1\62\1\0\2\26\1\62"+
    "\4\0\1\62\3\26\1\64\23\26\2\0\1\6\3\26"+
    "\1\64\13\26\1\340\7\26\3\0\1\62\1\26\15\0"+
    "\1\6\7\0\1\6\2\0\2\6\6\0\27\6\2\0"+
    "\6\6\1\341\12\6\1\342\6\6\4\0\1\6\5\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\4\0\1\62\3\26\1\64\23\26"+
    "\2\0\1\6\3\26\1\64\15\26\1\343\5\26\3\0"+
    "\1\62\1\26\5\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\2\26\1\344\1\64"+
    "\23\26\3\0\1\62\1\26\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\27\6\2\0\1\6\1\345\26\6"+
    "\4\0\1\6\6\0\1\55\2\0\1\55\1\0\1\115"+
    "\2\55\2\0\2\55\3\0\1\55\1\0\1\346\3\55"+
    "\5\0\7\55\1\56\17\55\2\0\10\55\1\56\17\55"+
    "\4\0\1\55\6\0\1\55\2\0\1\55\1\0\1\115"+
    "\2\55\2\0\2\55\3\0\1\55\2\0\2\55\1\304"+
    "\5\0\7\55\1\56\17\55\2\0\10\55\1\56\17\55"+
    "\4\0\1\55\32\0\1\347\77\0\21\163\1\307\10\163"+
    "\1\350\72\163\12\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\16\6\1\351\10\6\2\0\16\6\1\351\11\6"+
    "\4\0\1\6\15\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\22\6\1\352\4\6\2\0\22\6\1\352\5\6"+
    "\4\0\1\6\15\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\16\6\1\353\10\6\2\0\16\6\1\353\11\6"+
    "\4\0\1\6\56\0\1\354\30\0\1\354\33\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\17\6\1\355\7\6"+
    "\2\0\17\6\1\355\10\6\4\0\1\6\57\0\1\356"+
    "\30\0\1\356\32\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\2\6\1\357\24\6\2\0\3\6\1\357\24\6"+
    "\4\0\1\6\15\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\1\360\26\6\2\0\1\6\1\360\26\6\4\0"+
    "\1\6\15\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\4\6\1\361\22\6\2\0\5\6\1\361\22\6\4\0"+
    "\1\6\44\0\1\362\31\0\1\362\111\0\1\363\30\0"+
    "\1\363\54\0\1\364\31\0\1\364\36\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\62\1\0\2\26"+
    "\1\62\4\0\1\62\3\26\1\64\4\26\1\365\16\26"+
    "\2\0\1\6\3\26\1\64\4\26\1\365\16\26\3\0"+
    "\1\62\1\26\1\366\47\0\1\366\31\0\1\366\23\0"+
    "\1\366\4\0\2\62\1\0\2\62\3\0\1\6\7\0"+
    "\1\6\1\62\1\0\2\26\1\62\4\0\1\62\3\26"+
    "\1\64\7\26\1\367\13\26\2\0\1\6\3\26\1\64"+
    "\6\26\1\367\14\26\3\0\1\62\1\26\53\0\1\370"+
    "\30\0\1\370\26\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\23\26\2\0\1\6\3\26\1\64\11\26"+
    "\1\371\11\26\3\0\1\62\1\26\15\0\1\6\7\0"+
    "\1\6\2\0\2\6\6\0\27\6\2\0\1\6\1\372"+
    "\26\6\4\0\1\6\15\0\1\6\7\0\1\6\2\0"+
    "\2\6\6\0\27\6\2\0\11\6\1\373\16\6\4\0"+
    "\1\6\5\0\2\62\1\0\2\62\3\0\1\6\7\0"+
    "\1\6\1\62\1\0\2\26\1\62\4\0\1\62\3\26"+
    "\1\64\23\26\2\0\1\6\3\26\1\64\5\26\1\374"+
    "\15\26\3\0\1\62\1\26\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\27\6\2\0\13\6\1\375\14\6"+
    "\4\0\1\6\27\0\1\376\125\0\1\346\113\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\15\6\1\377\11\6"+
    "\2\0\15\6\1\377\12\6\4\0\1\6\15\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\15\6\1\u0100\11\6"+
    "\2\0\15\6\1\u0100\12\6\4\0\1\6\55\0\1\u0101"+
    "\30\0\1\u0101\34\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\22\6\1\u0102\4\6\2\0\22\6\1\u0102\5\6"+
    "\4\0\1\6\62\0\1\u0103\30\0\1\u0103\27\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\22\6\1\u0104\4\6"+
    "\2\0\22\6\1\u0104\5\6\4\0\1\6\15\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\20\6\1\u0105\6\6"+
    "\2\0\20\6\1\u0105\7\6\4\0\1\6\62\0\1\u0106"+
    "\30\0\1\u0106\17\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\1\u0107\2\26\1\64\23\26\2\0\1\6\1\u0107\2\26"+
    "\1\64\23\26\3\0\1\62\1\26\40\0\1\u0108\31\0"+
    "\1\u0108\40\0\2\62\1\0\2\62\3\0\1\6\7\0"+
    "\1\6\1\62\1\0\2\26\1\62\4\0\1\62\3\26"+
    "\1\64\1\u0109\22\26\2\0\1\6\3\26\1\64\1\u0109"+
    "\22\26\3\0\1\62\1\26\44\0\1\u010a\31\0\1\u010a"+
    "\34\0\2\62\1\0\2\62\3\0\1\6\7\0\1\6"+
    "\1\62\1\0\2\26\1\62\4\0\1\62\3\26\1\64"+
    "\23\26\2\0\1\6\3\26\1\64\16\26\1\u010b\4\26"+
    "\3\0\1\62\1\26\15\0\1\6\7\0\1\6\2\0"+
    "\2\6\6\0\27\6\2\0\14\6\1\u010c\13\6\4\0"+
    "\1\6\15\0\1\6\7\0\1\6\2\0\2\6\6\0"+
    "\27\6\2\0\27\6\1\u010d\4\0\1\6\15\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\27\6\2\0\11\6"+
    "\1\u010e\16\6\4\0\1\6\25\0\1\u010f\2\0\2\u010f"+
    "\6\0\27\u010f\3\0\27\u010f\22\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\10\6\1\u0110\16\6\2\0\11\6"+
    "\1\u0110\16\6\4\0\1\6\1\u0111\47\0\1\u0111\31\0"+
    "\1\u0111\23\0\1\u0111\14\0\1\6\7\0\1\6\2\0"+
    "\2\6\6\0\4\6\1\u0112\22\6\2\0\5\6\1\u0112"+
    "\22\6\4\0\1\6\5\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\1\26\1\u0113\1\26\1\64\23\26\2\0\1\6"+
    "\1\26\1\u0113\1\26\1\64\23\26\3\0\1\62\1\26"+
    "\41\0\1\u0114\31\0\1\u0114\37\0\2\62\1\0\2\62"+
    "\3\0\1\6\7\0\1\6\1\62\1\0\2\26\1\62"+
    "\4\0\1\62\3\26\1\64\15\26\1\u0115\5\26\2\0"+
    "\1\6\3\26\1\64\14\26\1\u0115\6\26\3\0\1\62"+
    "\1\26\1\0\1\u0116\57\0\1\u0116\30\0\1\u0116\14\0"+
    "\1\u0116\3\0\2\62\1\0\2\62\3\0\1\6\7\0"+
    "\1\6\1\62\1\0\2\26\1\62\4\0\1\62\3\26"+
    "\1\64\23\26\2\0\1\6\3\26\1\64\10\26\1\u0117"+
    "\12\26\3\0\1\62\1\26\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\27\6\2\0\11\6\1\u0118\16\6"+
    "\4\0\1\6\15\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\27\6\2\0\5\6\1\u0119\22\6\4\0\1\6"+
    "\15\0\1\6\7\0\1\6\2\0\2\6\6\0\27\6"+
    "\2\0\7\6\1\u011a\20\6\4\0\1\6\4\0\2\u011b"+
    "\3\0\14\u011b\1\u011c\2\u011b\2\u011c\6\u011b\27\u011c\3\u011b"+
    "\27\u011c\10\u011b\12\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\15\6\1\u011d\11\6\2\0\15\6\1\u011d\12\6"+
    "\4\0\1\6\55\0\1\u011e\30\0\1\u011e\34\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\1\u011f\26\6\2\0"+
    "\1\6\1\u011f\26\6\4\0\1\6\5\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\62\1\0\2\26"+
    "\1\62\4\0\1\62\3\26\1\64\7\26\1\u0120\13\26"+
    "\2\0\1\6\3\26\1\64\6\26\1\u0120\14\26\3\0"+
    "\1\62\1\26\53\0\1\u0121\30\0\1\u0121\26\0\2\62"+
    "\1\0\2\62\3\0\1\6\7\0\1\6\1\62\1\0"+
    "\2\26\1\62\4\0\1\62\2\26\1\u0122\1\64\23\26"+
    "\2\0\1\6\2\26\1\u0122\1\64\23\26\3\0\1\62"+
    "\1\26\42\0\1\u0123\31\0\1\u0123\36\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\62\1\0\2\26"+
    "\1\62\4\0\1\62\3\26\1\64\23\26\2\0\1\6"+
    "\3\26\1\u0124\23\26\3\0\1\62\1\26\15\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\27\6\2\0\13\6"+
    "\1\u0125\14\6\4\0\1\6\15\0\1\6\7\0\1\6"+
    "\2\0\2\6\6\0\27\6\2\0\15\6\1\u0126\12\6"+
    "\4\0\1\6\25\0\2\u0127\1\0\2\u0127\6\0\27\u0127"+
    "\3\0\27\u0127\11\0\2\u011b\3\0\14\u011b\2\u0127\1\u011b"+
    "\2\u0127\6\u011b\27\u0127\3\u011b\27\u0127\10\u011b\12\0\1\6"+
    "\7\0\1\6\2\0\2\6\6\0\6\6\1\u0128\20\6"+
    "\2\0\7\6\1\u0128\20\6\4\0\1\6\46\0\1\u0129"+
    "\31\0\1\u0129\32\0\2\62\1\0\2\62\3\0\1\6"+
    "\7\0\1\6\1\62\1\0\2\26\1\62\4\0\1\62"+
    "\3\26\1\64\1\u012a\22\26\2\0\1\6\3\26\1\64"+
    "\1\u012a\22\26\3\0\1\62\1\26\44\0\1\u012b\31\0"+
    "\1\u012b\34\0\2\62\1\0\2\62\3\0\1\6\7\0"+
    "\1\6\1\62\1\0\2\26\1\62\4\0\1\62\3\26"+
    "\1\64\14\26\1\u012c\6\26\2\0\1\6\3\26\1\64"+
    "\13\26\1\u012c\7\26\3\0\1\62\1\26\60\0\1\u012d"+
    "\30\0\1\u012d\31\0\1\6\7\0\1\6\2\0\2\6"+
    "\6\0\27\6\2\0\26\6\1\u012e\1\6\4\0\1\6"+
    "\4\0\2\u011b\1\55\2\0\1\u012f\1\u011b\1\u0130\2\u012f"+
    "\2\u011b\2\u012f\3\u011b\2\u0127\1\u012f\2\u0127\1\u012f\4\u011b"+
    "\1\u012f\7\u0127\1\u0131\17\u0127\2\u011b\1\u012f\7\u0127\1\u0131"+
    "\17\u0127\4\u011b\1\u012f\3\u011b\2\0\2\62\1\0\2\62"+
    "\3\0\1\6\7\0\1\6\1\62\1\0\2\26\1\62"+
    "\4\0\1\62\3\26\1\64\15\26\1\u0132\5\26\2\0"+
    "\1\6\3\26\1\64\14\26\1\u0132\6\26\3\0\1\62"+
    "\1\26\1\0\1\u0133\57\0\1\u0133\30\0\1\u0133\14\0"+
    "\1\u0133\3\0\2\62\1\0\2\62\3\0\1\6\7\0"+
    "\1\6\1\62\1\0\2\26\1\62\4\0\1\62\3\26"+
    "\1\64\4\26\1\u0134\16\26\2\0\1\6\3\26\1\64"+
    "\4\26\1\u0134\16\26\3\0\1\62\1\26\1\u0135\47\0"+
    "\1\u0135\31\0\1\u0135\23\0\1\u0135\5\0\1\55\2\0"+
    "\1\55\1\0\1\115\2\55\2\0\2\55\3\0\2\u0127"+
    "\1\0\2\u0127\1\55\5\0\7\u0127\1\u0131\17\u0127\2\0"+
    "\1\55\7\u0127\1\u0131\17\u0127\4\0\1\55\4\0\2\u011b"+
    "\1\55\2\0\1\u012f\1\u011b\1\u0130\2\u012f\2\u011b\2\u012f"+
    "\3\u011b\2\u0127\1\u012f\2\u0127\1\u012f\4\u011b\1\u012f\7\u0127"+
    "\1\u0131\12\u0127\1\u0136\4\u0127\2\u011b\1\u012f\7\u0127\1\u0131"+
    "\11\u0127\1\u0136\5\u0127\4\u011b\1\u012f\3\u011b\2\0\2\62"+
    "\1\0\2\62\3\0\1\6\7\0\1\6\1\62\1\0"+
    "\2\26\1\62\4\0\1\62\2\26\1\u0137\1\64\23\26"+
    "\2\0\1\6\2\26\1\u0137\1\64\23\26\3\0\1\62"+
    "\1\26\42\0\1\u0138\31\0\1\u0138\36\0\2\62\1\0"+
    "\2\62\3\0\1\6\7\0\1\6\1\62\1\0\2\26"+
    "\1\62\4\0\1\62\3\26\1\64\13\26\1\u0139\7\26"+
    "\2\0\1\6\3\26\1\64\12\26\1\u0139\10\26\3\0"+
    "\1\62\1\26\57\0\1\u013a\30\0\1\u013a\21\0\2\u011b"+
    "\1\55\2\0\1\u012f\1\u011b\1\u0130\2\u012f\2\u011b\2\u012f"+
    "\3\u011b\2\u0127\1\u012f\2\u0127\1\u012f\4\u011b\1\u012f\7\u0127"+
    "\1\u0131\12\u0127\1\u013b\4\u0127\2\u011b\1\u012f\7\u0127\1\u0131"+
    "\11\u0127\1\u013b\5\u0127\4\u011b\1\u012f\3\u011b\2\0\2\62"+
    "\1\0\2\62\3\0\1\6\7\0\1\6\1\62\1\0"+
    "\2\26\1\62\4\0\1\62\3\26\1\64\14\26\1\u013c"+
    "\6\26\2\0\1\6\3\26\1\64\13\26\1\u013c\7\26"+
    "\3\0\1\62\1\26\60\0\1\u013d\30\0\1\u013d\21\0"+
    "\2\62\1\0\2\62\3\0\1\6\7\0\1\6\1\62"+
    "\1\0\2\26\1\62\1\u013e\3\0\1\62\3\26\1\64"+
    "\23\26\2\0\1\6\3\26\1\64\23\26\3\0\1\62"+
    "\1\26\33\0\1\u013e\76\0\2\u011b\1\55\2\0\1\u012f"+
    "\1\u011b\1\u0130\2\u012f\2\u011b\2\u012f\3\u011b\2\u0127\1\u012f"+
    "\2\u0127\1\u012f\4\u011b\1\u012f\7\u0127\1\u0131\7\u0127\1\u013f"+
    "\7\u0127\2\u011b\1\u012f\7\u0127\1\u0131\6\u0127\1\u013f\10\u0127"+
    "\4\u011b\1\u012f\3\u011b\2\0\2\62\1\0\2\62\3\0"+
    "\1\6\7\0\1\6\1\62\1\0\2\26\1\62\4\0"+
    "\1\62\3\26\1\64\4\26\1\u0140\16\26\2\0\1\6"+
    "\3\26\1\64\4\26\1\u0140\16\26\3\0\1\62\1\26"+
    "\1\u0141\47\0\1\u0141\31\0\1\u0141\23\0\1\u0141\3\0"+
    "\2\u011b\1\55\2\0\1\u012f\1\u011b\1\u0130\2\u012f\2\u011b"+
    "\2\u012f\3\u011b\2\u0127\1\u012f\2\u0127\1\u0142\4\u011b\1\u012f"+
    "\7\u0127\1\u0131\11\u0127\1\u0143\5\u0127\2\u011b\1\u012f\7\u0127"+
    "\1\u0131\10\u0127\1\u0143\6\u0127\4\u011b\1\u012f\1\u011b\1\u0144"+
    "\1\u011b\2\0\2\62\1\0\2\62\3\0\1\6\7\0"+
    "\1\6\1\62\1\0\2\26\1\62\4\0\1\62\3\26"+
    "\1\64\13\26\1\u0145\7\26\2\0\1\6\3\26\1\64"+
    "\12\26\1\u0145\10\26\3\0\1\62\1\26\57\0\1\u0146"+
    "\30\0\1\u0146\23\0\1\55\2\0\1\55\1\0\1\115"+
    "\2\55\2\0\2\55\3\0\2\u0127\1\346\2\u0127\1\55"+
    "\5\0\7\u0127\1\u0131\17\u0127\2\0\1\55\7\u0127\1\u0131"+
    "\17\u0127\4\0\1\55\4\0\2\u011b\1\55\2\0\1\u012f"+
    "\1\u011b\1\u0130\2\u012f\2\u011b\2\u012f\3\u011b\2\u0127\1\u012f"+
    "\2\u0127\1\u0142\4\u011b\1\u012f\7\u0127\1\u0131\17\u0127\2\u011b"+
    "\1\u012f\7\u0127\1\u0131\17\u0127\4\u011b\1\u012f\3\u011b\22\0"+
    "\2\u0127\1\0\2\u0127\1\347\5\0\27\u0127\3\0\27\u0127"+
    "\12\0\2\62\1\0\2\62\3\0\1\6\7\0\1\6"+
    "\1\62\1\0\2\26\1\62\1\u0147\3\0\1\62\3\26"+
    "\1\64\23\26\2\0\1\6\3\26\1\64\23\26\3\0"+
    "\1\62\1\26\33\0\1\u0147\76\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22016];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\5\11\1\1\1\11\1\1\2\11"+
    "\7\1\2\11\14\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\0\1\11\1\0\4\1\1\0\3\11\2\1\1\0"+
    "\20\1\2\11\1\0\3\1\1\0\12\1\2\0\1\1"+
    "\1\0\17\1\1\0\2\1\1\0\4\1\1\0\6\1"+
    "\1\0\6\1\6\0\1\1\1\0\1\1\1\0\15\1"+
    "\1\0\1\1\2\0\3\1\1\11\1\1\1\0\4\1"+
    "\1\0\6\1\1\0\1\11\4\0\1\1\1\0\1\1"+
    "\1\0\10\1\4\0\3\1\1\11\3\1\1\11\1\1"+
    "\1\0\1\1\1\0\4\1\3\0\1\11\1\1\1\0"+
    "\1\1\1\0\6\1\2\0\4\1\1\0\1\1\1\0"+
    "\3\1\2\11\1\0\1\1\1\0\1\1\1\0\5\1"+
    "\1\0\2\1\1\11\1\1\1\0\2\1\1\11\1\1"+
    "\1\0\1\1\1\0\4\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\4\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\11\1\0\1\1\4\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[327];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorCom> erroresCom;

    private void error(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","Simbolo no existe en el lenguaje",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme,""));
    }    

    private void errorPrueba(String lexeme, String tipo) {
        erroresCom.add(new ErrorCom("PRUEBA",tipo,String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme,""));
    }

    public List<ErrorCom> getErroresCom() {
        return erroresCom;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerGuardado(java.io.Reader in) {
      erroresCom = new ArrayList<>();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error(yytext()); new Symbol(symT.error,yyline,yycolumn, yytext());
            }
            // fall through
          case 67: break;
          case 2:
            { 
            }
            // fall through
          case 68: break;
          case 3:
            { return new Symbol(symT.EXCL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 69: break;
          case 4:
            { return new Symbol(symT.IDET,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 70: break;
          case 5:
            { return new Symbol(symT.PARI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 71: break;
          case 6:
            { return new Symbol(symT.PARD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 72: break;
          case 7:
            { return new Symbol(symT.MULT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 73: break;
          case 8:
            { return new Symbol(symT.SUMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 74: break;
          case 9:
            { return new Symbol(symT.COMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 75: break;
          case 10:
            { return new Symbol(symT.RESTA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 76: break;
          case 11:
            { return new Symbol(symT.BARRA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 77: break;
          case 12:
            { return new Symbol(symT.DOSPUNT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 78: break;
          case 13:
            { return new Symbol(symT.PUNTCOMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 79: break;
          case 14:
            { return new Symbol(symT.MEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 80: break;
          case 15:
            { return new Symbol(symT.IGUAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 81: break;
          case 16:
            { return new Symbol(symT.MAY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 17:
            { return new Symbol(symT.CORCHCUADI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 83: break;
          case 18:
            { return new Symbol(symT.CORCHCUADD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 84: break;
          case 19:
            { return new Symbol(symT.CORCHI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 20:
            { return new Symbol(symT.CORCHD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 86: break;
          case 21:
            { return new Symbol(symT.DIFER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 22:
            { return new Symbol(symT.AND,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 23:
            { return new Symbol(symT.CARACTER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 24:
            { return new Symbol(symT.PALABRAS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 25:
            { return new Symbol(symT.MENIG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 26:
            { return new Symbol(symT.DOBIGUAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 27:
            { return new Symbol(symT.MAYIG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 28:
            { return new Symbol(symT.IDETIQUETA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          case 29:
            { return new Symbol(symT.OR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 30:
            { return new Symbol(symT.VALP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          case 31:
            { return new Symbol(symT.DECIM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 97: break;
          case 32:
            { return new Symbol(symT.PAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 33:
            { return new Symbol(symT.ALT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 34:
            { return new Symbol(symT.SRC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 35:
            { return new Symbol(symT.BR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 36:
            { return new Symbol(symT.H1,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 37:
            { return new Symbol(symT.COLS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 38:
            { return new Symbol(symT.HREF,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 39:
            { return new Symbol(symT.NAME,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 40:
            { return new Symbol(symT.ROWS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 41:
            { return new Symbol(symT.TYPE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 42:
            { return new Symbol(symT.DIV,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 43:
            { return new Symbol(symT.IMG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 44:
            { return new Symbol(symT.CLASS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 45:
            { return new Symbol(symT.COLOR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 46:
            { return new Symbol(symT.WIDTH,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 47:
            { return new Symbol(symT.BODY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 48:
            { return new Symbol(symT.GCIC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 49:
            { return new Symbol(symT.HEAD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 50:
            { return new Symbol(symT.LINK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 51:
            { return new Symbol(symT.SPAM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 52:
            { return new Symbol(symT.HEIGHT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 53:
            { return new Symbol(symT.INPUT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 54:
            { return new Symbol(symT.TITLE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 55:
            { return new Symbol(symT.ONCLICK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 56:
            { return new Symbol(symT.BUTTON,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 57:
            { return new Symbol(symT.OPTION,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 58:
            { return new Symbol(symT.SELECT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 59:
            { return new Symbol(symT.FSIZE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 60:
            { return new Symbol(symT.TEXTAREA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 61:
            { return new Symbol(symT.BACK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 62:
            { return new Symbol(symT.TEXTALIGN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 63:
            { return new Symbol(symT.SCRIPTING,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 64:
            { return new Symbol(symT.FFAMILY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          case 65:
            { return new Symbol(symT.VARIABLESCRIP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 66:
            { return new Symbol(symT.FINVARIABLESCRIP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerGuardado [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerGuardado scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerGuardado(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
