// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexerGuardado.jflex

package analizadores;
import java_cup.runtime.*; 
import analizadores.symG.*;
import java.util.List;
import java.util.ArrayList;
import objetos.ErrorCom;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerGCIC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\1\3\2\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\0\1\22\1\23\1\24"+
    "\10\23\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\45\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\45\1\64\1\0\1\65\1\0\1\66\1\0"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\45\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\45\1\106\1\107\1\110\1\111\1\60\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\7\0\1\3\72\0"+
    "\100\121\60\0\2\122\115\0\1\123\u01a8\0\2\3\u0100\0"+
    "\1\124\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\1\23\4\1\21\1\22"+
    "\14\4\1\23\1\1\1\24\2\1\21\0\1\2\1\25"+
    "\4\0\1\26\2\0\1\27\3\4\1\0\1\30\1\31"+
    "\1\32\1\0\1\27\2\4\1\0\14\4\1\33\23\4"+
    "\1\34\7\4\1\35\1\0\1\33\24\0\1\36\1\0"+
    "\1\37\5\40\2\0\1\4\2\41\13\4\1\42\2\4"+
    "\2\0\2\4\1\0\1\4\1\0\1\43\1\4\1\0"+
    "\4\4\1\33\3\4\2\0\14\4\1\0\1\44\11\4"+
    "\1\45\3\4\10\0\1\43\15\0\1\4\1\41\3\4"+
    "\1\46\1\4\1\47\2\4\1\0\1\4\1\50\4\4"+
    "\1\0\6\4\6\0\1\4\1\0\2\51\2\52\1\43"+
    "\2\53\1\4\1\0\3\4\1\54\2\4\1\54\1\0"+
    "\2\4\1\0\7\4\1\0\1\55\1\56\1\4\1\0"+
    "\1\4\1\0\3\4\1\57\2\4\1\60\1\61\1\4"+
    "\1\62\1\4\1\63\1\4\5\0\1\46\7\0\1\55"+
    "\1\56\3\0\4\4\1\46\2\4\2\64\1\4\1\0"+
    "\1\4\1\65\2\4\1\0\6\4\1\0\1\65\4\0"+
    "\1\4\1\0\1\51\3\52\1\53\2\66\2\4\1\0"+
    "\1\4\1\54\2\4\1\0\2\4\1\0\7\4\1\0"+
    "\2\55\1\4\1\56\1\4\1\0\2\67\1\4\1\70"+
    "\1\71\4\4\1\72\21\0\6\4\1\73\1\4\2\74"+
    "\1\75\1\4\2\76\1\4\1\0\1\4\1\0\1\4"+
    "\1\77\2\4\3\0\1\77\1\4\1\0\1\52\1\27"+
    "\1\0\1\66\1\4\2\100\1\4\1\101\1\4\1\101"+
    "\2\4\1\0\4\4\1\0\1\102\1\4\1\0\2\103"+
    "\2\4\1\0\1\67\3\4\1\104\2\4\11\0\1\102"+
    "\2\0\1\2\1\105\1\4\1\0\1\106\3\4\1\0"+
    "\2\4\1\107\1\4\1\0\1\4\1\0\2\4\2\110"+
    "\1\107\1\0\2\111\2\112\1\4\1\100\1\113\1\101"+
    "\1\114\2\4\1\0\2\4\1\115\1\4\1\0\1\102"+
    "\2\116\1\103\1\4\1\0\1\4\1\0\3\4\1\117"+
    "\1\4\1\114\1\106\4\0\1\115\1\0\1\4\1\0"+
    "\1\106\1\4\1\0\2\4\1\0\1\4\1\120\2\121"+
    "\1\4\1\0\1\122\1\4\1\122\1\111\1\4\1\114"+
    "\2\4\1\0\3\4\1\0\1\116\1\4\1\0\1\4"+
    "\1\0\4\4\5\0\1\4\1\0\1\4\1\0\2\4"+
    "\1\0\2\4\1\0\4\4\1\0\2\4\2\123\2\124"+
    "\1\4\1\0\2\4\1\125\1\4\6\0\2\126\1\4"+
    "\1\0\1\4\1\127\2\4\1\0\1\130\2\4\1\131"+
    "\1\0\2\4\1\124\1\4\1\0\1\132\1\4\1\133"+
    "\2\0\1\131\2\0\1\4\1\0\1\4\1\0\1\4"+
    "\2\134\2\4\1\0\1\135\2\4\1\0\1\136\3\0"+
    "\1\36\1\0\1\4\1\0\1\137\2\4\1\0\2\140"+
    "\1\4\1\0\1\4\2\0\1\4\1\0\1\4\2\141"+
    "\2\142\1\143\1\0\1\144\1\4\1\141\1\0\1\4"+
    "\1\0\1\4\1\0\1\4\1\0\2\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[733];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\125\0\125\0\125\0\125\0\125\0\u01a9\0\125\0\u02a8"+
    "\0\125\0\125\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6"+
    "\0\u04fb\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e"+
    "\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1\0\u09f6"+
    "\0\u0a4b\0\125\0\125\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4"+
    "\0\u0c49\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d\0\u0df2\0\u0e47\0\125"+
    "\0\u0e9c\0\125\0\u0ef1\0\u0f46\0\u03fc\0\u0f9b\0\u0ff0\0\u1045"+
    "\0\u109a\0\u10ef\0\u1144\0\u1199\0\u11ee\0\u1243\0\u1298\0\u12ed"+
    "\0\u1342\0\u1397\0\u0f46\0\u13ec\0\u1441\0\u1496\0\125\0\u14eb"+
    "\0\u1540\0\u1595\0\u15ea\0\125\0\u163f\0\u1694\0\u16e9\0\u173e"+
    "\0\u1793\0\u17e8\0\u183d\0\125\0\125\0\125\0\u1892\0\u18e7"+
    "\0\u193c\0\u1991\0\u19e6\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u1b8f"+
    "\0\u1be4\0\u1c39\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2\0\u1e37"+
    "\0\u1e8c\0\u1ee1\0\u1f36\0\u1f8b\0\u1fe0\0\u2035\0\u208a\0\u20df"+
    "\0\u2134\0\u2189\0\u21de\0\u2233\0\u2288\0\u22dd\0\u2332\0\u2387"+
    "\0\u23dc\0\u2431\0\u2486\0\u1de2\0\u24db\0\u2530\0\u2585\0\u25da"+
    "\0\u262f\0\u2684\0\u26d9\0\125\0\u272e\0\u2783\0\u27d8\0\u282d"+
    "\0\u2882\0\u28d7\0\u292c\0\u2981\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5"+
    "\0\u2b2a\0\u2b7f\0\u2bd4\0\u2c29\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d"+
    "\0\u2dd2\0\u2e27\0\125\0\u2e7c\0\125\0\u1694\0\u16e9\0\u173e"+
    "\0\u1793\0\u17e8\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u3025\0\u307a"+
    "\0\u30cf\0\u3124\0\u3179\0\u31ce\0\u3223\0\u3278\0\u32cd\0\u3322"+
    "\0\u3377\0\u33cc\0\u01a9\0\u3421\0\u3476\0\u34cb\0\u3520\0\u3575"+
    "\0\u35ca\0\u361f\0\u3674\0\u36c9\0\u371e\0\u3773\0\u37c8\0\u381d"+
    "\0\u3872\0\u38c7\0\u391c\0\u3971\0\u39c6\0\u3a1b\0\u3a70\0\u3ac5"+
    "\0\u3b1a\0\u3b6f\0\u3bc4\0\u3c19\0\u3c6e\0\u3cc3\0\u3d18\0\u3d6d"+
    "\0\u3dc2\0\u3e17\0\u3e6c\0\u3ec1\0\u3f16\0\u3f6b\0\u074e\0\u3fc0"+
    "\0\u4015\0\u406a\0\u40bf\0\u4114\0\u4169\0\u41be\0\u4213\0\u4268"+
    "\0\u074e\0\u42bd\0\u4312\0\u4367\0\u43bc\0\u4411\0\u4466\0\u44bb"+
    "\0\u4510\0\u4565\0\u45ba\0\u460f\0\u4664\0\u46b9\0\u470e\0\u4763"+
    "\0\u47b8\0\u480d\0\u4862\0\u48b7\0\u490c\0\u4961\0\u49b6\0\u4a0b"+
    "\0\u4a60\0\u4ab5\0\u4b0a\0\u4b5f\0\u4bb4\0\u4c09\0\u4c5e\0\u4cb3"+
    "\0\u4d08\0\u01a9\0\u4d5d\0\u4db2\0\u4e07\0\u4e5c\0\u01a9\0\u4eb1"+
    "\0\u4f06\0\u4f5b\0\u4fb0\0\u5005\0\u505a\0\u50af\0\u5104\0\u5159"+
    "\0\u51ae\0\u5203\0\u5258\0\u52ad\0\u5302\0\u5357\0\u53ac\0\u5401"+
    "\0\u5456\0\u54ab\0\u5500\0\u5555\0\u55aa\0\u55ff\0\u5654\0\u56a9"+
    "\0\u56fe\0\u5753\0\u57a8\0\u57fd\0\u5852\0\u58a7\0\u58fc\0\u5951"+
    "\0\u59a6\0\u59fb\0\u5a50\0\u5aa5\0\u5afa\0\u5b4f\0\u5ba4\0\u5bf9"+
    "\0\u5c4e\0\u5ca3\0\u5cf8\0\u5d4d\0\u5da2\0\u5df7\0\u5e4c\0\u5ea1"+
    "\0\u5ef6\0\u5f4b\0\u5fa0\0\u5ff5\0\u604a\0\u609f\0\u60f4\0\u074e"+
    "\0\u6149\0\u619e\0\u074e\0\u074e\0\u61f3\0\u074e\0\u6248\0\u074e"+
    "\0\u629d\0\u62f2\0\u6347\0\u639c\0\u63f1\0\u6446\0\u649b\0\u64f0"+
    "\0\u6545\0\u659a\0\u65ef\0\u6644\0\u6699\0\u66ee\0\u6743\0\u6798"+
    "\0\u67ed\0\u6842\0\u6897\0\u68ec\0\u6941\0\u6996\0\u69eb\0\u6a40"+
    "\0\u6a95\0\u6aea\0\u01a9\0\125\0\u6b3f\0\u6b94\0\u6be9\0\u01a9"+
    "\0\u6c3e\0\u6c93\0\u6ce8\0\u6d3d\0\u6d92\0\u6de7\0\u6e3c\0\u6e91"+
    "\0\u6ee6\0\u6f3b\0\125\0\u6f90\0\u6fe5\0\u703a\0\u708f\0\u70e4"+
    "\0\u7139\0\u718e\0\u71e3\0\u7238\0\u728d\0\u72e2\0\u7337\0\u738c"+
    "\0\u73e1\0\u7436\0\u748b\0\u74e0\0\u7535\0\u758a\0\u75df\0\u7634"+
    "\0\u7689\0\u76de\0\u7733\0\u7788\0\u77dd\0\u7832\0\u7887\0\u78dc"+
    "\0\u7931\0\u7986\0\u79db\0\u7a30\0\u7a85\0\u7ada\0\u7b2f\0\u7b84"+
    "\0\u7bd9\0\u7c2e\0\u7c83\0\u7cd8\0\u074e\0\u074e\0\u7d2d\0\u7d82"+
    "\0\u7dd7\0\u7e2c\0\u074e\0\u7e81\0\u7ed6\0\u7f2b\0\u7f80\0\u7fd5"+
    "\0\u802a\0\u807f\0\u80d4\0\u8129\0\u817e\0\u81d3\0\u8228\0\u827d"+
    "\0\u82d2\0\u8327\0\u837c\0\u83d1\0\u8426\0\u847b\0\u84d0\0\u8525"+
    "\0\u857a\0\u85cf\0\u01a9\0\u8624\0\u01a9\0\125\0\u01a9\0\u8679"+
    "\0\u01a9\0\125\0\u86ce\0\u8723\0\u8778\0\u87cd\0\u8822\0\u01a9"+
    "\0\u8877\0\u88cc\0\u8921\0\u8976\0\u89cb\0\125\0\u8a20\0\u8a75"+
    "\0\u8aca\0\u8b1f\0\u8b74\0\u8bc9\0\u8c1e\0\u8c73\0\u8cc8\0\u8d1d"+
    "\0\u8d72\0\u8dc7\0\u8e1c\0\u8e71\0\u8ec6\0\u8f1b\0\u8f70\0\u8fc5"+
    "\0\u901a\0\u906f\0\u90c4\0\u9119\0\u916e\0\u91c3\0\u9218\0\u926d"+
    "\0\u92c2\0\u9317\0\u936c\0\u93c1\0\u9416\0\u946b\0\u94c0\0\u074e"+
    "\0\u9515\0\u956a\0\u95bf\0\u9614\0\u9669\0\u96be\0\u9713\0\u9768"+
    "\0\u97bd\0\u9812\0\u9867\0\u98bc\0\u9911\0\u9966\0\125\0\u99bb"+
    "\0\u9a10\0\u9a65\0\u9aba\0\u9b0f\0\u9b64\0\u9bb9\0\u9c0e\0\u9c63"+
    "\0\u9cb8\0\u01a9\0\u9d0d\0\u9d62\0\u9db7\0\u9e0c\0\u9e61\0\u9eb6"+
    "\0\u01a9\0\125\0\125\0\u9f0b\0\u9f60\0\u9fb5\0\ua00a\0\ua05f"+
    "\0\ua0b4\0\ua109\0\125\0\ua15e\0\ua1b3\0\ua208\0\ua25d\0\ua2b2"+
    "\0\ua307\0\ua35c\0\ua3b1\0\ua406\0\ua45b\0\ua4b0\0\ua505\0\ua55a"+
    "\0\ua5af\0\ua604\0\ua659\0\ua6ae\0\ua703\0\ua758\0\ua7ad\0\ua802"+
    "\0\u074e\0\ua857\0\ua8ac\0\ua901\0\ua956\0\ua9ab\0\uaa00\0\uaa55"+
    "\0\uaaaa\0\uaaff\0\uab54\0\uaba9\0\uabfe\0\uac53\0\uaca8\0\uacfd"+
    "\0\uad52\0\uada7\0\uadfc\0\u01a9\0\u01a9\0\125\0\uae51\0\uaea6"+
    "\0\u01a9\0\uaefb\0\125\0\uaf50\0\uafa5\0\uaffa\0\ub04f\0\ub0a4"+
    "\0\ub0f9\0\ub14e\0\ub1a3\0\ub1f8\0\ub24d\0\ub2a2\0\ub2f7\0\ub34c"+
    "\0\ub3a1\0\ub3f6\0\ub44b\0\ub4a0\0\ub4f5\0\ub54a\0\ub59f\0\ub5f4"+
    "\0\ub649\0\ub69e\0\ub6f3\0\ub748\0\ub79d\0\ub7f2\0\ub847\0\ub89c"+
    "\0\ub8f1\0\ub946\0\ub99b\0\ub9f0\0\uba45\0\uba9a\0\ubaef\0\ubb44"+
    "\0\ubb99\0\ubbee\0\ubc43\0\ubc98\0\ub1f8\0\ub24d\0\ubced\0\ubd42"+
    "\0\ubd97\0\ubdec\0\ube41\0\ube96\0\u01a9\0\ubeeb\0\ubf40\0\ubf95"+
    "\0\ubfea\0\uc03f\0\uc094\0\uc0e9\0\uc13e\0\uc193\0\uc1e8\0\uc23d"+
    "\0\uc292\0\125\0\uc2e7\0\uc33c\0\uc391\0\u01a9\0\uc3e6\0\uc43b"+
    "\0\uc490\0\uc4e5\0\uc53a\0\uc58f\0\uc5e4\0\uc639\0\uc68e\0\u074e"+
    "\0\uc6e3\0\u01a9\0\uc738\0\uc78d\0\uc7e2\0\uc837\0\uc88c\0\uc8e1"+
    "\0\uc936\0\uc98b\0\uc9e0\0\uca35\0\u01a9\0\125\0\uca8a\0\ucadf"+
    "\0\ucb34\0\125\0\ucb89\0\ucbde\0\ucc33\0\u01a9\0\ucc88\0\uccdd"+
    "\0\ucd32\0\uc094\0\ucd87\0\ucddc\0\uce31\0\125\0\uce86\0\ucedb"+
    "\0\ucf30\0\ucf85\0\ucfda\0\ud02f\0\ud084\0\ud0d9\0\ud12e\0\ud183"+
    "\0\ud1d8\0\ud22d\0\ud282\0\ud2d7\0\ud32c\0\ud381\0\ud3d6\0\125"+
    "\0\ud42b\0\125\0\ud480\0\ud4d5\0\ud52a\0\ud57f\0\ud5d4\0\ud629"+
    "\0\ud67e\0\ud6d3\0\ud728\0\ud77d\0\ud7d2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[733];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\2\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\1\24\1\25\1\2"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\40\1\41\1\40\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\40\1\51\2\40\1\52"+
    "\1\53\1\6\1\54\1\55\1\56\1\32\1\33\1\57"+
    "\1\35\1\60\1\61\1\40\1\41\1\40\1\62\1\63"+
    "\1\44\1\64\1\65\1\66\1\50\1\67\3\40\1\70"+
    "\1\71\1\72\1\40\1\73\1\74\1\2\126\0\2\3"+
    "\1\0\2\3\25\0\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\1\106\2\0\1\107\1\0"+
    "\1\110\1\111\1\0\1\112\1\113\1\114\2\0\1\115"+
    "\5\0\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\106\1\0\1\107\1\0\1\110\1\111\1\0"+
    "\1\112\1\113\1\114\1\0\1\115\7\0\1\106\1\113"+
    "\7\0\1\116\21\0\1\117\76\0\1\120\2\0\1\120"+
    "\2\0\1\120\1\121\7\0\1\121\1\0\2\122\7\0"+
    "\7\122\1\123\20\122\2\0\1\121\7\122\1\123\17\122"+
    "\3\0\1\122\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\30\6\2\0\30\6\3\0\1\6\15\0\1\124"+
    "\135\0\2\125\7\0\30\125\3\0\27\125\3\0\1\125"+
    "\3\0\2\126\3\0\1\127\3\126\1\130\7\126\1\130"+
    "\1\126\2\131\7\126\30\132\2\126\1\130\27\132\3\126"+
    "\1\132\3\126\6\0\1\133\21\0\1\134\124\0\1\135"+
    "\124\0\1\136\136\0\1\137\32\0\1\137\34\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\13\40"+
    "\1\141\5\40\1\142\6\40\2\0\1\6\12\40\1\141"+
    "\5\40\1\142\6\40\3\0\1\40\1\0\1\143\6\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\16\40\1\144\11\40\2\0\1\6\15\40\1\144\11\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\1\145\6\40\1\146\20\40\2\0"+
    "\1\147\1\145\6\40\1\146\17\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\4\40\1\150\23\40\2\0\1\6\4\40\1\150\22\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\13\40\1\151\1\40\1\152\10\40"+
    "\1\153\1\40\2\0\1\6\12\40\1\151\1\40\1\152"+
    "\7\40\1\153\2\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\1\154\27\40"+
    "\2\0\1\6\1\154\26\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\4\40"+
    "\1\155\23\40\2\0\1\6\4\40\1\155\22\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\23\40\1\156\4\40\2\0\1\6\22\40"+
    "\1\156\4\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\3\40\1\157\1\40"+
    "\1\160\7\40\1\161\12\40\2\0\1\6\3\40\1\157"+
    "\1\40\1\160\6\40\1\161\12\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\27\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\4\40"+
    "\1\162\23\40\2\0\1\6\4\40\1\162\22\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\16\40\1\163\4\40\1\164\4\40\2\0"+
    "\1\6\15\40\1\163\4\40\1\164\4\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\15\40\1\165\12\40\2\0\1\6\14\40\1\165"+
    "\12\40\3\0\1\40\10\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\20\40\1\166\7\40\2\0"+
    "\1\6\17\40\1\166\7\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\4\40"+
    "\1\167\23\40\2\0\1\6\4\40\1\167\22\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\22\40\1\170\5\40\2\0\1\6\21\40"+
    "\1\170\5\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\7\40\1\171\10\40"+
    "\1\172\7\40\2\0\1\6\7\40\1\171\7\40\1\172"+
    "\7\40\3\0\1\40\10\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\13\40\1\173\14\40\2\0"+
    "\1\6\12\40\1\173\14\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\7\40"+
    "\1\174\20\40\2\0\1\6\7\40\1\174\17\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\13\40\1\141\5\40\1\142\6\40\2\0"+
    "\1\6\12\40\1\175\5\40\1\142\6\40\3\0\1\40"+
    "\1\0\1\143\6\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\16\40\1\144\11\40\2\0\1\6"+
    "\1\176\14\40\1\144\11\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\1\145"+
    "\6\40\1\146\20\40\2\0\1\147\1\145\6\40\1\146"+
    "\2\40\1\177\2\40\1\200\11\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\1\154\27\40\2\0\1\6\1\154\14\40\1\201\11\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\23\40\1\156\4\40\2\0\1\6"+
    "\4\40\1\202\12\40\1\203\2\40\1\156\4\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\3\40\1\157\1\40\1\160\7\40\1\161"+
    "\12\40\2\0\1\6\3\40\1\204\1\40\1\160\6\40"+
    "\1\161\12\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\16\40\1\163\4\40"+
    "\1\164\4\40\2\0\1\6\1\205\14\40\1\163\4\40"+
    "\1\164\4\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\15\40\1\165\12\40"+
    "\2\0\1\6\14\40\1\206\12\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\4\40\1\167\23\40\2\0\1\6\4\40\1\167\10\40"+
    "\1\207\11\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\22\40\1\170\5\40"+
    "\2\0\1\6\17\40\1\210\1\40\1\170\5\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\7\40\1\171\10\40\1\172\7\40\2\0"+
    "\1\6\4\40\1\211\2\40\1\171\7\40\1\172\5\40"+
    "\1\212\1\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\7\40\1\174\20\40"+
    "\2\0\1\6\7\40\1\174\1\213\16\40\3\0\1\40"+
    "\122\0\1\214\44\0\1\215\1\0\1\216\7\0\1\217"+
    "\20\0\1\215\1\0\1\216\6\0\1\217\77\0\1\220"+
    "\31\0\1\220\63\0\1\221\5\0\1\143\23\0\1\221"+
    "\5\0\1\143\13\0\1\143\53\0\1\222\31\0\1\222"+
    "\54\0\1\223\6\0\1\224\23\0\1\223\6\0\1\224"+
    "\66\0\1\225\32\0\1\225\100\0\1\226\1\0\1\227"+
    "\10\0\1\230\16\0\1\226\1\0\1\227\7\0\1\230"+
    "\45\0\1\231\32\0\1\231\75\0\1\232\32\0\1\232"+
    "\110\0\1\233\31\0\1\233\54\0\1\216\7\0\1\217"+
    "\22\0\1\216\6\0\1\217\61\0\1\234\32\0\1\234"+
    "\110\0\1\235\31\0\1\235\64\0\1\236\31\0\1\236"+
    "\61\0\1\237\32\0\1\237\74\0\1\240\10\0\1\241"+
    "\21\0\1\240\7\0\1\241\61\0\1\242\32\0\1\242"+
    "\33\0\1\116\15\0\2\116\7\0\30\116\3\0\27\116"+
    "\11\0\1\120\2\0\1\120\1\0\1\243\1\120\12\0"+
    "\2\120\7\0\30\120\3\0\27\120\3\0\1\120\12\0"+
    "\1\243\1\0\1\121\7\0\1\121\1\0\2\121\7\0"+
    "\30\121\2\0\30\121\3\0\1\121\5\0\1\120\2\0"+
    "\1\120\1\0\1\243\1\120\1\121\7\0\1\121\1\0"+
    "\2\122\7\0\30\122\2\0\1\121\27\122\3\0\1\122"+
    "\5\0\1\120\2\0\1\120\1\0\1\243\1\120\1\121"+
    "\7\0\1\121\1\0\2\122\7\0\22\122\1\244\5\122"+
    "\2\0\1\121\21\122\1\244\5\122\3\0\1\122\16\0"+
    "\1\245\7\0\2\125\7\0\30\125\3\0\27\125\3\0"+
    "\1\125\26\0\2\246\105\0\1\140\15\0\2\247\7\0"+
    "\30\140\3\0\27\140\3\0\1\140\14\0\1\6\7\0"+
    "\1\6\1\0\2\250\7\0\30\6\2\0\30\6\3\0"+
    "\1\6\3\0\2\126\3\0\1\127\3\126\1\130\7\126"+
    "\1\130\1\126\2\251\7\126\30\132\2\126\1\130\27\132"+
    "\3\126\1\132\3\126\5\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\252\7\0\30\40\2\0\1\6\27\40"+
    "\3\0\1\40\24\0\1\253\152\0\1\254\31\0\1\254"+
    "\30\0\1\140\15\0\2\140\7\0\30\140\3\0\27\140"+
    "\3\0\1\140\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\4\40\1\255\23\40\2\0\1\6"+
    "\4\40\1\255\22\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\2\40\1\256"+
    "\25\40\2\0\1\6\2\40\1\256\24\40\3\0\1\40"+
    "\41\0\1\257\32\0\1\257\40\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\16\40\1\260\11\40"+
    "\2\0\1\6\15\40\1\260\11\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\15\40\1\261\2\40\1\262\7\40\2\0\1\6\14\40"+
    "\1\261\2\40\1\262\7\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\1\263"+
    "\27\40\2\0\1\6\1\263\26\40\3\0\1\40\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\1\6\1\264"+
    "\1\6\1\265\2\6\1\266\1\267\1\270\2\6\1\271"+
    "\2\6\1\272\1\273\1\6\1\274\1\275\5\6\2\0"+
    "\2\6\1\264\1\6\1\265\2\6\1\266\1\267\1\270"+
    "\1\6\1\271\2\6\1\272\1\273\1\6\1\274\1\275"+
    "\5\6\3\0\1\6\1\276\1\277\6\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\2\40\1\300"+
    "\16\40\1\301\6\40\2\0\1\6\2\40\1\300\15\40"+
    "\1\301\6\40\3\0\1\40\1\0\1\302\6\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\21\40"+
    "\1\303\6\40\2\0\1\6\20\40\1\303\6\40\3\0"+
    "\1\40\1\0\1\304\6\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\3\40\1\305\24\40\2\0"+
    "\1\6\3\40\1\305\23\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\10\40"+
    "\1\306\17\40\2\0\1\6\10\40\1\306\16\40\3\0"+
    "\1\40\1\307\7\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\13\40\1\310\14\40\2\0\1\6"+
    "\12\40\1\310\14\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\22\40\1\311"+
    "\5\40\2\0\1\6\21\40\1\311\5\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\15\40\1\312\12\40\2\0\1\6\14\40\1\312"+
    "\12\40\3\0\1\40\10\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\313\27\40"+
    "\3\0\1\40\4\0\2\216\1\0\1\216\1\314\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\27\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\10\40\1\315\10\40"+
    "\1\316\1\317\5\40\2\0\1\6\10\40\1\315\7\40"+
    "\1\316\1\317\5\40\3\0\1\40\1\320\1\321\6\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\22\40\1\322\5\40\2\0\1\6\21\40\1\322\5\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\14\40\1\323\13\40\2\0\1\6"+
    "\13\40\1\323\13\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\14\40\1\324"+
    "\13\40\2\0\1\6\13\40\1\324\13\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\325\27\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\16\40\1\326\11\40\2\0\1\6\15\40\1\326\11\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\17\40\1\327\4\40\1\330\3\40"+
    "\2\0\1\6\16\40\1\327\10\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\20\40\1\331\7\40\2\0\1\6\17\40\1\331\7\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\4\40\1\332\23\40\2\0\1\6"+
    "\4\40\1\332\22\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\23\40\1\333"+
    "\4\40\2\0\1\6\22\40\1\333\4\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\22\40\1\334\5\40\2\0\1\6\21\40\1\334"+
    "\5\40\3\0\1\40\10\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\10\40\1\335\17\40\2\0"+
    "\1\6\10\40\1\335\16\40\3\0\1\40\1\336\7\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\4\40\1\255\23\40\2\0\1\6\4\40\1\255\14\40"+
    "\1\337\5\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\2\40\1\340\24\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\1\341\26\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\12\40\1\342\14\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\14\40\1\343\12\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\10\40\1\344\16\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\4\40\1\345\22\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\13\40\1\346\13\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\325\2\40\1\347"+
    "\24\40\3\0\1\40\10\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\23\40"+
    "\1\350\3\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\2\40\1\351\24\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\24\40\1\352\2\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\16\40\1\353\10\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\3\40\1\354\23\40\3\0\1\40"+
    "\71\0\1\355\37\0\2\216\1\0\2\216\163\0\1\320"+
    "\10\0\1\321\1\356\20\0\1\320\7\0\1\321\1\356"+
    "\11\0\1\320\1\321\55\0\1\357\31\0\1\357\56\0"+
    "\1\360\32\0\1\360\103\0\1\361\31\0\1\361\74\0"+
    "\1\362\31\0\1\362\52\0\1\363\32\0\1\363\73\0"+
    "\1\364\16\0\1\302\13\0\1\364\15\0\1\302\13\0"+
    "\1\302\56\0\1\304\31\0\1\304\13\0\1\304\40\0"+
    "\1\365\32\0\1\365\76\0\1\307\32\0\1\307\22\0"+
    "\1\307\51\0\1\366\31\0\1\366\101\0\1\367\31\0"+
    "\1\367\65\0\1\370\31\0\1\370\77\0\1\371\31\0"+
    "\1\371\64\0\1\372\31\0\1\372\110\0\1\373\111\0"+
    "\1\374\4\0\1\375\24\0\1\374\57\0\1\376\32\0"+
    "\1\376\110\0\1\377\31\0\1\377\57\0\1\336\32\0"+
    "\1\336\22\0\1\336\4\0\1\120\2\0\1\120\1\0"+
    "\1\243\1\120\1\121\7\0\1\121\1\0\2\122\7\0"+
    "\22\122\1\u0100\5\122\2\0\1\121\21\122\1\u0100\5\122"+
    "\3\0\1\122\24\0\1\u0101\155\0\1\u0102\31\0\1\u0102"+
    "\25\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\20\40\1\u0103\7\40\2\0\1\6\17\40\1\u0103"+
    "\7\40\3\0\1\40\4\0\2\257\1\0\1\257\1\u0104"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\27\40\3\0\1\40\4\0\2\257\1\0"+
    "\2\257\124\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\13\40\1\u0105\14\40\2\0\1\6\12\40"+
    "\1\u0105\14\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\22\40\1\u0106\5\40"+
    "\2\0\1\6\21\40\1\u0106\5\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\1\u0107\27\40\2\0\1\6\1\u0107\26\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\20\40\1\u0108\7\40\2\0\1\6\17\40\1\u0108"+
    "\7\40\3\0\1\40\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\16\6\1\u0109\1\6\1\u010a\2\6\1\u010b"+
    "\4\6\2\0\16\6\1\u0109\1\6\1\u010a\2\6\1\u010b"+
    "\4\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\10\6\1\u010c\17\6\2\0\11\6\1\u010c"+
    "\16\6\3\0\1\6\1\u010d\13\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\2\6\1\u010e\25\6\2\0\3\6"+
    "\1\u010e\24\6\3\0\1\6\14\0\1\6\7\0\1\6"+
    "\1\0\1\6\1\u010f\7\0\4\6\1\u0110\23\6\2\0"+
    "\5\6\1\u0110\22\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\14\6\1\u0111\1\u0112\12\6"+
    "\2\0\14\6\1\u0111\1\u0112\12\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\10\6\1\u0113"+
    "\17\6\2\0\11\6\1\u0113\16\6\3\0\1\6\1\u0114"+
    "\13\0\1\6\7\0\1\6\1\0\2\6\7\0\17\6"+
    "\1\u0115\10\6\2\0\17\6\1\u0115\10\6\3\0\1\6"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\2\6"+
    "\1\u0116\1\6\1\u0117\12\6\1\u0118\10\6\2\0\3\6"+
    "\1\u0116\1\6\1\u0117\11\6\1\u0118\10\6\3\0\1\6"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\4\6"+
    "\1\u0119\3\6\1\u011a\17\6\2\0\5\6\1\u0119\3\6"+
    "\1\u011a\16\6\3\0\1\6\1\u011b\52\0\1\u011c\1\u011d"+
    "\30\0\1\u011c\1\u011d\57\0\1\u011e\1\0\1\u011f\12\0"+
    "\1\u0120\15\0\1\u011e\1\0\1\u011f\11\0\1\u0120\24\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\10\40\1\u0121\17\40\2\0\1\6\10\40\1\u0121\16\40"+
    "\3\0\1\40\1\u0122\7\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\2\40\1\u0123\25\40\2\0"+
    "\1\6\2\40\1\u0123\24\40\3\0\1\40\41\0\1\u0124"+
    "\32\0\1\u0124\40\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\4\40\1\u0125\23\40\2\0\1\6"+
    "\4\40\1\u0125\22\40\3\0\1\40\43\0\1\u0126\32\0"+
    "\1\u0126\32\0\2\365\1\0\1\365\1\u0127\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\27\40\3\0\1\40\10\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\22\40\1\u0128\5\40\2\0"+
    "\1\6\21\40\1\u0128\5\40\3\0\1\40\61\0\1\u0129"+
    "\31\0\1\u0129\21\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\21\40\1\u012a\6\40\2\0\1\6"+
    "\20\40\1\u012a\6\40\3\0\1\40\1\0\1\u012b\6\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\4\40\1\u012c\23\40\2\0\1\6\4\40\1\u012c\22\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\22\40\1\u012d\5\40\2\0\1\6"+
    "\21\40\1\u012d\5\40\3\0\1\40\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\2\6\1\u012e\25\6\2\0"+
    "\3\6\1\u012e\24\6\3\0\1\6\4\0\2\216\1\0"+
    "\1\216\1\314\15\0\2\140\7\0\30\140\3\0\27\140"+
    "\3\0\1\140\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\22\40\1\u012f\5\40\2\0\1\6"+
    "\21\40\1\u012f\5\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\4\40\1\u0130"+
    "\23\40\2\0\1\6\4\40\1\u0130\22\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\4\40\1\u0131\23\40\2\0\1\6\4\40\1\u0131"+
    "\22\40\3\0\1\40\61\0\1\u0132\31\0\1\u0132\54\0"+
    "\1\u0133\32\0\1\u0133\36\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\10\40\1\u0134\6\40\1\u0135"+
    "\10\40\2\0\1\6\10\40\1\u0134\5\40\1\u0135\10\40"+
    "\3\0\1\40\1\u0136\7\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\1\40\1\u0137\26\40\2\0"+
    "\1\6\1\40\1\u0137\25\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\u0138\27\40\3\0\1\40\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\13\6\1\u0139\14\6\2\0"+
    "\13\6\1\u0139\14\6\3\0\1\6\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\2\40\1\u013a"+
    "\25\40\2\0\1\6\2\40\1\u013a\24\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\4\40\1\u013b\23\40\2\0\1\6\4\40\1\u013b"+
    "\22\40\3\0\1\40\10\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\4\40\1\u013c\23\40\2\0"+
    "\1\6\4\40\1\u013c\22\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\10\40"+
    "\1\u013d\17\40\2\0\1\6\10\40\1\u013d\16\40\3\0"+
    "\1\40\1\u013e\7\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\15\40\1\u013f\12\40\2\0\1\6"+
    "\14\40\1\u013f\12\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\4\40\1\u0140"+
    "\23\40\2\0\1\6\4\40\1\u0140\22\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\10\40\1\u0141\17\40\2\0\1\6\10\40\1\u0141"+
    "\16\40\3\0\1\40\1\u0142\7\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\13\40\1\u0143\14\40"+
    "\2\0\1\6\12\40\1\u0143\14\40\3\0\1\40\52\0"+
    "\1\u0144\31\0\1\u0144\30\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\11\40"+
    "\1\u0145\15\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\20\40\1\u0146\6\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\15\40\1\u0147\2\40\1\u0148\6\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\21\40\1\u0149\5\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\6\40\1\u014a\20\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\5\40\1\u014b"+
    "\21\40\3\0\1\40\10\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\4\40"+
    "\1\u014c\22\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\12\40\1\u014d\14\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\20\40\1\u014e\6\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\21\40\1\u014f\5\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\4\40\1\u0150\22\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\21\40\1\u0151\5\40\3\0"+
    "\1\40\41\0\1\u0152\32\0\1\u0152\73\0\1\u0153\32\0"+
    "\1\u0153\75\0\1\u013e\32\0\1\u013e\22\0\1\u013e\56\0"+
    "\1\u0154\31\0\1\u0154\65\0\1\u0155\31\0\1\u0155\57\0"+
    "\1\u0156\32\0\1\u0156\111\0\1\u0157\31\0\1\u0157\62\0"+
    "\1\u0122\32\0\1\u0122\22\0\1\u0122\3\0\2\365\1\0"+
    "\2\365\174\0\1\u012b\31\0\1\u012b\13\0\1\u012b\41\0"+
    "\1\u0158\32\0\1\u0158\107\0\1\u0159\31\0\1\u0159\60\0"+
    "\1\u0136\6\0\1\u015a\23\0\1\u0136\5\0\1\u015a\14\0"+
    "\1\u0136\70\0\1\u015b\105\0\1\u015c\31\0\1\u015c\63\0"+
    "\1\u015d\32\0\1\u015d\71\0\1\u015e\32\0\1\u015e\102\0"+
    "\1\u015f\31\0\1\u015f\61\0\1\u0160\32\0\1\u0160\33\0"+
    "\1\120\2\0\1\120\1\0\1\243\1\120\1\121\7\0"+
    "\1\121\1\0\2\122\7\0\17\122\1\u0161\10\122\2\0"+
    "\1\121\16\122\1\u0161\10\122\3\0\1\122\4\0\2\u0101"+
    "\1\0\2\u0101\13\0\1\u0162\1\0\2\u0101\7\0\30\u0101"+
    "\3\0\27\u0101\44\0\1\u0163\32\0\1\u0163\41\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\22\40"+
    "\1\u0164\5\40\2\0\1\6\21\40\1\u0164\5\40\3\0"+
    "\1\40\4\0\2\257\1\0\1\257\1\u0104\15\0\2\140"+
    "\7\0\30\140\3\0\27\140\3\0\1\140\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\4\40"+
    "\1\u0165\23\40\2\0\1\6\4\40\1\u0165\22\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\u0166\27\40\3\0\1\40"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\2\40\1\u0167\25\40\2\0\1\6\2\40\1\u0167"+
    "\24\40\3\0\1\40\4\0\2\u0157\1\0\1\u0157\1\u0168"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\27\40\3\0\1\40\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\3\6\1\u0169\24\6\2\0"+
    "\4\6\1\u0169\23\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\22\6\1\u016a\5\6\2\0"+
    "\22\6\1\u016a\5\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\24\6\1\u016b\3\6\2\0"+
    "\30\6\3\0\1\6\63\0\1\u016c\55\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\10\6\1\u016d\17\6\2\0"+
    "\11\6\1\u016d\16\6\3\0\1\6\1\u016e\13\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\1\u016f\27\6\2\0"+
    "\1\6\1\u016f\26\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\6\6\1\u0170\21\6\2\0"+
    "\7\6\1\u0170\20\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\17\6\1\u0171\10\6\2\0"+
    "\17\6\1\u0171\10\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\15\6\1\u0172\12\6\2\0"+
    "\15\6\1\u0172\12\6\3\0\1\6\54\0\1\u0173\31\0"+
    "\1\u0173\32\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\22\6\1\u0174\5\6\2\0\22\6\1\u0174\5\6\3\0"+
    "\1\6\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\20\6\1\u0175\7\6\2\0\20\6\1\u0175\7\6\3\0"+
    "\1\6\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\13\6\1\u0176\14\6\2\0\13\6\1\u0176\14\6\3\0"+
    "\1\6\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\1\u0177\27\6\2\0\1\6\1\u0177\26\6\3\0\1\6"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\26\6"+
    "\1\u0178\1\6\2\0\25\6\1\u0178\2\6\3\0\1\6"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\22\6"+
    "\1\u0179\5\6\2\0\22\6\1\u0179\5\6\3\0\1\6"+
    "\61\0\1\u017a\31\0\1\u017a\56\0\1\u017b\32\0\1\u017b"+
    "\102\0\1\u017c\31\0\1\u017c\73\0\1\u017d\31\0\1\u017d"+
    "\65\0\1\u017e\31\0\1\u017e\57\0\1\u017f\32\0\1\u017f"+
    "\42\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\14\40\1\u0180\13\40\2\0\1\6\13\40\1\u0180"+
    "\13\40\3\0\1\40\53\0\1\u0181\31\0\1\u0181\23\0"+
    "\2\u0124\1\0\1\u0124\1\u0182\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\27\40\3\0"+
    "\1\40\4\0\2\u0124\1\0\2\u0124\120\0\2\u0183\1\0"+
    "\1\u0183\1\u0184\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\27\40\3\0\1\40\4\0"+
    "\2\u0183\1\0\1\u0183\1\u0185\120\0\2\365\1\0\1\365"+
    "\1\u0127\15\0\2\140\7\0\30\140\3\0\27\140\3\0"+
    "\1\140\4\0\2\u0129\1\0\1\u0129\1\u0186\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\27\40\3\0\1\40\4\0\2\u0129\1\0\2\u0129\124\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\4\40\1\u0187\23\40\2\0\1\6\4\40\1\u0187\22\40"+
    "\3\0\1\40\43\0\1\u0188\32\0\1\u0188\36\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\13\40"+
    "\1\u0189\14\40\2\0\1\6\12\40\1\u0189\14\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\10\40\1\u018a\17\40\2\0\1\6\10\40"+
    "\1\u018a\16\40\3\0\1\40\1\u018b\13\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\1\u018c\27\6\2\0\1\6"+
    "\1\u018c\26\6\3\0\1\6\4\0\2\u0132\1\0\1\u0132"+
    "\1\u018d\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\27\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\20\40"+
    "\1\u018e\7\40\2\0\1\6\17\40\1\u018e\7\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\6\40\1\u018f\21\40\2\0\1\6\6\40"+
    "\1\u018f\20\40\3\0\1\40\4\0\2\u0132\1\0\2\u0132"+
    "\173\0\1\u0190\31\0\1\u0190\23\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\14\40\1\u0191\13\40"+
    "\2\0\1\6\13\40\1\u0191\13\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\1\u0192\27\40\2\0\1\6\1\u0192\26\40\3\0\1\40"+
    "\53\0\1\u0193\31\0\1\u0193\27\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\20\40\1\u0194\7\40"+
    "\2\0\1\6\17\40\1\u0194\7\40\3\0\1\40\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\1\u0195\27\6"+
    "\2\0\1\6\1\u0195\26\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\16\6\1\u0196\11\6"+
    "\2\0\16\6\1\u0196\11\6\3\0\1\6\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\4\40"+
    "\1\u0197\23\40\2\0\1\6\4\40\1\u0197\22\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\1\u0198\27\40\2\0\1\6\1\u0198\26\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\20\40\1\u0199\7\40\2\0\1\6"+
    "\17\40\1\u0199\7\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\15\40\1\u019a"+
    "\12\40\2\0\1\6\14\40\1\u019a\12\40\3\0\1\40"+
    "\54\0\1\u019b\31\0\1\u019b\22\0\2\u019c\1\0\1\u019c"+
    "\1\u019d\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\25\40\1\u019e\2\40\2\0\1\6\23\40\1\u019e\3\40"+
    "\3\0\1\40\4\0\2\u0160\1\0\1\u0160\1\u019f\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\27\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\14\40\1\u01a0\13\40"+
    "\2\0\1\6\13\40\1\u01a0\13\40\3\0\1\40\53\0"+
    "\1\u01a1\31\0\1\u01a1\27\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\4\40\1\u01a2\23\40\2\0"+
    "\1\6\4\40\1\u01a2\22\40\3\0\1\40\43\0\1\u01a3"+
    "\32\0\1\u01a3\36\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\6\40\1\u01a4"+
    "\20\40\3\0\1\40\10\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\20\40"+
    "\1\u01a5\6\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\17\40\1\u01a6\7\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\u01a7\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\27\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\7\40\1\u01a8\17\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\10\40\1\u01a9\16\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\u01aa\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\27\40\3\0\1\40\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\7\40\1\u01ab\17\40\3\0\1\40\37\0\1\u01ac"+
    "\32\0\1\u01ac\77\0\1\u01ad\32\0\1\u01ad\105\0\1\u01ae"+
    "\31\0\1\u01ae\54\0\1\u01af\32\0\1\u01af\67\0\1\u01b0"+
    "\32\0\1\u01b0\34\0\2\u0157\1\0\2\u0157\166\0\1\u01b1"+
    "\31\0\1\u01b1\67\0\1\u018b\32\0\1\u018b\22\0\1\u018b"+
    "\36\0\1\u01b2\32\0\1\u01b2\71\0\1\u01b3\32\0\1\u01b3"+
    "\107\0\1\u01b4\31\0\1\u01b4\54\0\1\u01b5\32\0\1\u01b5"+
    "\111\0\1\u01b6\31\0\1\u01b6\17\0\2\u019c\1\0\2\u019c"+
    "\53\0\1\u01b7\30\0\1\u01b7\13\0\2\u0160\1\0\2\u0160"+
    "\121\0\1\120\2\0\1\120\1\0\1\243\1\120\1\121"+
    "\7\0\1\121\1\0\2\122\1\u01b8\6\0\21\122\1\u01b9"+
    "\6\122\2\0\1\121\20\122\1\u01b9\6\122\3\0\1\122"+
    "\1\0\1\u01ba\22\0\1\u01bb\137\0\1\u01bc\32\0\1\u01bc"+
    "\42\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\u01bd\27\40\3\0\1\40\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\1\u01be\27\40\2\0\1\6\1\u01be\26\40\3\0\1\40"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\1\u01bf"+
    "\4\6\1\u01c0\15\6\1\u01c1\4\6\2\0\1\6\1\u01bf"+
    "\4\6\1\u01c0\14\6\1\u01c1\4\6\3\0\1\6\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\22\40\1\u01c2\5\40\2\0\1\6\21\40\1\u01c2\5\40"+
    "\3\0\1\40\4\0\2\u0157\1\0\1\u0157\1\u0168\15\0"+
    "\2\140\7\0\30\140\3\0\27\140\3\0\1\140\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\27\6\1\u01c3"+
    "\2\0\26\6\1\u01c3\1\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\22\6\1\u01c4\5\6"+
    "\2\0\22\6\1\u01c4\5\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\2\6\1\u01c5\25\6"+
    "\2\0\3\6\1\u01c5\24\6\3\0\1\6\41\0\1\u01c6"+
    "\32\0\1\u01c6\44\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\3\6\1\u01c7\24\6\2\0\4\6\1\u01c7\23\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\23\6\1\u01c8\4\6\2\0\23\6\1\u01c8\4\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\12\6\1\u01c9\15\6\2\0\12\6\1\u01c9\15\6"+
    "\3\0\1\6\2\0\1\u01ca\46\0\1\u01ca\31\0\1\u01ca"+
    "\23\0\1\u01ca\11\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\10\6\1\u01cb\17\6\2\0\11\6\1\u01cb\16\6"+
    "\3\0\1\6\1\u01cc\13\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\10\6\1\u01cd\17\6\2\0\11\6\1\u01cd"+
    "\16\6\3\0\1\6\1\u01ce\13\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\4\6\1\u01cf\23\6\2\0\5\6"+
    "\1\u01cf\22\6\3\0\1\6\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\14\6\1\u01d0\13\6\2\0\14\6"+
    "\1\u01d0\13\6\3\0\1\6\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\22\6\1\u01d1\5\6\2\0\22\6"+
    "\1\u01d1\5\6\3\0\1\6\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\13\6\1\u01d2\14\6\2\0\13\6"+
    "\1\u01d2\14\6\3\0\1\6\52\0\1\u01d3\31\0\1\u01d3"+
    "\102\0\1\u01d4\31\0\1\u01d4\57\0\1\u01ce\32\0\1\u01ce"+
    "\22\0\1\u01ce\42\0\1\u01d5\32\0\1\u01d5\101\0\1\u01d6"+
    "\31\0\1\u01d6\27\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\1\u01d7\27\40\2\0\1\6\1\u01d7"+
    "\26\40\3\0\1\40\37\0\1\u01d8\32\0\1\u01d8\36\0"+
    "\2\u0124\1\0\1\u0124\1\u0182\15\0\2\140\7\0\30\140"+
    "\3\0\27\140\3\0\1\140\4\0\2\u0183\1\0\2\u0183"+
    "\120\0\2\u0183\1\0\1\u0183\1\u01d9\15\0\2\140\7\0"+
    "\10\140\1\u01da\17\140\3\0\10\140\1\u01da\16\140\3\0"+
    "\1\140\1\u01db\3\0\2\u0183\1\0\2\u0183\36\0\1\u01db"+
    "\32\0\1\u01db\22\0\1\u01db\3\0\2\u0129\1\0\1\u0129"+
    "\1\u0186\15\0\2\140\7\0\30\140\3\0\27\140\3\0"+
    "\1\140\4\0\2\u0188\1\0\1\u0188\1\u01dc\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\27\40\3\0\1\40\4\0\2\u0188\1\0\2\u0188\124\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\4\40\1\u01dd\23\40\2\0\1\6\4\40\1\u01dd\22\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\13\40\1\u01de\14\40\2\0\1\6"+
    "\12\40\1\u01de\14\40\3\0\1\40\52\0\1\u01df\31\0"+
    "\1\u01df\34\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\17\6\1\u01e0\10\6\2\0\17\6\1\u01e0\10\6\3\0"+
    "\1\6\4\0\2\u0132\1\0\1\u0132\1\u018d\15\0\2\140"+
    "\7\0\30\140\3\0\27\140\3\0\1\140\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\22\40"+
    "\1\u01e1\5\40\2\0\1\6\21\40\1\u01e1\5\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\4\40\1\u01e2\23\40\2\0\1\6\4\40"+
    "\1\u01e2\22\40\3\0\1\40\61\0\1\u01e3\31\0\1\u01e3"+
    "\21\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\17\40\1\u01e4\10\40\2\0\1\6\16\40\1\u01e4"+
    "\10\40\3\0\1\40\10\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\20\40\1\u01e5\7\40\2\0"+
    "\1\6\17\40\1\u01e5\7\40\3\0\1\40\56\0\1\u01e6"+
    "\31\0\1\u01e6\24\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\4\40\1\u01e7\23\40\2\0\1\6"+
    "\4\40\1\u01e7\22\40\3\0\1\40\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\13\6\1\u01e8\14\6\2\0"+
    "\13\6\1\u01e8\14\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\1\u01e9\27\6\2\0\1\6"+
    "\1\u01e9\26\6\3\0\1\6\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\21\40\1\u01ea\6\40"+
    "\2\0\1\6\20\40\1\u01ea\6\40\3\0\1\40\1\0"+
    "\1\u01eb\6\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\22\40\1\u01ec\5\40\2\0\1\6\21\40"+
    "\1\u01ec\5\40\3\0\1\40\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\21\40\1\u01ed\6\40"+
    "\2\0\1\6\20\40\1\u01ed\6\40\3\0\1\40\1\0"+
    "\1\u01ee\6\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\6\40\1\u01ef\21\40\2\0\1\6\6\40"+
    "\1\u01ef\20\40\3\0\1\40\45\0\1\u01f0\32\0\1\u01f0"+
    "\30\0\2\u019c\1\0\2\u019c\120\0\2\u019c\1\0\1\u019c"+
    "\1\u019d\15\0\2\140\7\0\30\140\3\0\27\140\3\0"+
    "\1\140\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\7\40\1\u01f1\20\40\2\0\1\6\7\40"+
    "\1\u01f1\17\40\3\0\1\40\4\0\2\u0160\1\0\1\u0160"+
    "\1\u019f\15\0\2\140\7\0\30\140\3\0\27\140\3\0"+
    "\1\140\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\1\u01f2\27\40\2\0\1\6\1\u01f2\26\40"+
    "\3\0\1\40\37\0\1\u01f3\32\0\1\u01f3\36\0\2\u01a3"+
    "\1\0\1\u01a3\1\u01f4\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\27\40\3\0\1\40"+
    "\4\0\2\u01a3\1\0\2\u01a3\124\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\17\40\1\u01f5\7\40\3\0\1\40\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\30\6\2\0\6\6\1\u01f6"+
    "\12\6\1\u01f7\6\6\3\0\1\6\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\21\40\1\u01f8\5\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\2\40\1\u01f9\24\40\3\0\1\40\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\30\6\2\0"+
    "\1\6\1\u01fa\26\6\3\0\1\6\56\0\1\u01fb\31\0"+
    "\1\u01fb\57\0\1\u01fc\32\0\1\u01fc\117\0\1\u01fd\72\0"+
    "\1\u01fe\32\0\1\u01fe\113\0\1\u01ff\31\0\1\u01ff\54\0"+
    "\1\u0200\32\0\1\u0200\105\0\1\u0201\31\0\1\u0201\65\0"+
    "\1\u0202\31\0\1\u0202\57\0\1\u0203\32\0\1\u0203\113\0"+
    "\1\u0204\31\0\1\u0204\71\0\1\u01ee\31\0\1\u01ee\13\0"+
    "\1\u01ee\44\0\1\u0205\32\0\1\u0205\50\0\1\u0206\104\0"+
    "\1\120\2\0\1\120\1\0\1\243\1\120\1\121\7\0"+
    "\1\121\1\0\2\122\1\u01b8\6\0\30\122\2\0\1\121"+
    "\27\122\3\0\1\122\30\0\1\u01b8\130\0\1\u0207\142\0"+
    "\1\u0208\31\0\1\u0208\34\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\10\6\1\u0209\17\6\2\0\11\6\1\u0209"+
    "\16\6\3\0\1\6\1\u020a\7\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\15\40\1\u020b\12\40"+
    "\2\0\1\6\14\40\1\u020b\12\40\3\0\1\40\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\2\6\1\u020c"+
    "\25\6\2\0\3\6\1\u020c\24\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\1\u020d\27\6"+
    "\2\0\1\6\1\u020d\26\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\21\6\1\u020e\6\6"+
    "\2\0\21\6\1\u020e\6\6\3\0\1\6\1\0\1\u020f"+
    "\6\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\4\40\1\u0210\23\40\2\0\1\6\4\40\1\u0210"+
    "\22\40\3\0\1\40\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\16\6\1\u0211\11\6\2\0\16\6\1\u0211"+
    "\11\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\22\6\1\u0212\5\6\2\0\22\6\1\u0212"+
    "\5\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\16\6\1\u0213\11\6\2\0\16\6\1\u0213"+
    "\11\6\3\0\1\6\55\0\1\u0214\31\0\1\u0214\31\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\17\6\1\u0215"+
    "\10\6\2\0\17\6\1\u0215\10\6\3\0\1\6\56\0"+
    "\1\u0216\31\0\1\u0216\30\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\2\6\1\u0217\25\6\2\0\3\6\1\u0217"+
    "\24\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\1\u0218\27\6\2\0\1\6\1\u0218\26\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\4\6\1\u0219\23\6\2\0\5\6\1\u0219\22\6"+
    "\3\0\1\6\43\0\1\u021a\32\0\1\u021a\107\0\1\u021b"+
    "\31\0\1\u021b\52\0\1\u021c\32\0\1\u021c\40\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\13\40"+
    "\1\u021d\14\40\2\0\1\6\12\40\1\u021d\14\40\3\0"+
    "\1\40\52\0\1\u021e\31\0\1\u021e\24\0\2\u0183\1\0"+
    "\1\u0183\1\u01d9\15\0\2\140\7\0\30\140\3\0\27\140"+
    "\3\0\1\140\10\0\1\140\15\0\2\140\7\0\5\140"+
    "\1\u021f\22\140\3\0\5\140\1\u021f\21\140\3\0\1\140"+
    "\44\0\1\u0220\32\0\1\u0220\31\0\2\u0188\1\0\1\u0188"+
    "\1\u01dc\15\0\2\140\7\0\30\140\3\0\27\140\3\0"+
    "\1\140\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\14\40\1\u0221\13\40\2\0\1\6\13\40"+
    "\1\u0221\13\40\3\0\1\40\4\0\2\u01df\1\0\1\u01df"+
    "\1\u0222\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\27\40\3\0\1\40\4\0\2\u01df"+
    "\1\0\2\u01df\130\0\1\6\7\0\1\6\1\0\2\6"+
    "\3\0\1\u0223\3\0\30\6\2\0\30\6\3\0\1\6"+
    "\4\0\2\u01e3\1\0\1\u01e3\1\u0224\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\27\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\20\40\1\u0225\7\40\2\0\1\6"+
    "\17\40\1\u0225\7\40\3\0\1\40\4\0\2\u01e3\1\0"+
    "\2\u01e3\124\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\1\u0226\27\40\2\0\1\6\1\u0226\26\40"+
    "\3\0\1\40\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\u0227\27\40\3\0"+
    "\1\40\37\0\1\u0228\32\0\1\u0228\42\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\u0229\27\40\3\0\1\40\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\4\6\1\u022a\23\6\2\0\5\6"+
    "\1\u022a\22\6\3\0\1\6\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\3\6\1\u022b\24\6\2\0\4\6"+
    "\1\u022b\23\6\3\0\1\6\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\21\40\1\u022c\6\40"+
    "\2\0\1\6\20\40\1\u022c\6\40\3\0\1\40\1\0"+
    "\1\u022d\56\0\1\u022d\31\0\1\u022d\13\0\1\u022d\2\0"+
    "\2\u0204\1\0\1\u0204\1\u022e\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\27\40\3\0"+
    "\1\40\10\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\4\40\1\u022f\23\40\2\0\1\6\4\40"+
    "\1\u022f\22\40\3\0\1\40\43\0\1\u0230\32\0\1\u0230"+
    "\32\0\2\u01f0\1\0\1\u01f0\1\u0231\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\27\40"+
    "\3\0\1\40\4\0\2\u01f0\1\0\2\u01f0\124\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\10\40"+
    "\1\u0232\17\40\2\0\1\6\10\40\1\u0232\16\40\3\0"+
    "\1\40\1\u0233\7\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\u0234\27\40\3\0"+
    "\1\40\71\0\1\u0235\37\0\2\u01a3\1\0\1\u01a3\1\u01f4"+
    "\15\0\2\140\7\0\30\140\3\0\27\140\3\0\1\140"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\15\40\1\u0236\11\40\3\0"+
    "\1\40\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\30\6\2\0\1\6\1\u0237\26\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\30\6\2\0"+
    "\11\6\1\u0238\16\6\3\0\1\6\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\11\40\1\u0239\15\40\3\0\1\40\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\30\6\2\0\13\6"+
    "\1\u023a\14\6\3\0\1\6\33\0\1\u0223\150\0\1\u023b"+
    "\31\0\1\u023b\62\0\1\u020a\32\0\1\u020a\22\0\1\u020a"+
    "\53\0\1\u023c\31\0\1\u023c\61\0\1\u023d\32\0\1\u023d"+
    "\101\0\1\u023e\31\0\1\u023e\110\0\1\u023f\76\0\1\u0240"+
    "\32\0\1\u0240\70\0\1\u0241\32\0\1\u0241\33\0\2\u0204"+
    "\1\0\2\u0204\163\0\1\u0233\32\0\1\u0233\22\0\1\u0233"+
    "\24\0\1\u0242\103\0\2\u0208\1\0\2\u0208\130\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\15\6\1\u0243\12\6"+
    "\2\0\15\6\1\u0243\12\6\3\0\1\6\54\0\1\u0244"+
    "\31\0\1\u0244\22\0\2\u023c\1\0\1\u023c\1\u0245\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\27\40\3\0\1\40\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\10\6\1\u0246\17\6\2\0\11\6"+
    "\1\u0246\16\6\3\0\1\6\1\u0247\13\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\13\6\1\u0248\14\6\2\0"+
    "\13\6\1\u0248\14\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\16\6\1\u0249\11\6\2\0"+
    "\16\6\1\u0249\11\6\3\0\1\6\55\0\1\u024a\31\0"+
    "\1\u024a\25\0\1\140\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\20\40\1\u024b\7\40\2\0\1\6\17\40"+
    "\1\u024b\7\40\3\0\1\40\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\15\6\1\u024c\12\6\2\0\15\6"+
    "\1\u024c\12\6\3\0\1\6\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\15\6\1\u024d\12\6\2\0\15\6"+
    "\1\u024d\12\6\3\0\1\6\54\0\1\u024e\31\0\1\u024e"+
    "\32\0\1\6\7\0\1\6\1\0\2\6\7\0\22\6"+
    "\1\u024f\5\6\2\0\22\6\1\u024f\5\6\3\0\1\6"+
    "\61\0\1\u0250\31\0\1\u0250\25\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\22\6\1\u0251\5\6\2\0\22\6"+
    "\1\u0251\5\6\3\0\1\6\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\20\6\1\u0252\7\6\2\0\20\6"+
    "\1\u0252\7\6\3\0\1\6\61\0\1\u0253\31\0\1\u0253"+
    "\15\0\2\u021e\1\0\1\u021e\1\u0254\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\27\40"+
    "\3\0\1\40\4\0\2\u021e\1\0\2\u021e\120\0\2\u0220"+
    "\1\0\1\u0220\1\u021f\15\0\2\140\7\0\30\140\3\0"+
    "\27\140\3\0\1\140\4\0\2\u0220\1\0\2\u0220\124\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\4\40\1\u0255\23\40\2\0\1\6\4\40\1\u0255\22\40"+
    "\3\0\1\40\4\0\2\u01df\1\0\1\u01df\1\u0222\15\0"+
    "\2\140\7\0\30\140\3\0\27\140\3\0\1\140\4\0"+
    "\2\u01e3\1\0\1\u01e3\1\u0224\15\0\2\140\7\0\30\140"+
    "\3\0\27\140\3\0\1\140\4\0\2\u023b\1\0\1\u023b"+
    "\1\u0256\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\27\40\3\0\1\40\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\20\40"+
    "\1\u0257\7\40\2\0\1\6\17\40\1\u0257\7\40\3\0"+
    "\1\40\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\15\6\1\u0258\12\6\2\0\15\6\1\u0258\12\6\3\0"+
    "\1\6\57\0\1\u0259\31\0\1\u0259\27\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\2\6\1\u025a\25\6\2\0"+
    "\3\6\1\u025a\24\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\1\u025b\27\6\2\0\1\6"+
    "\1\u025b\26\6\3\0\1\6\4\0\2\u0241\1\0\2\u0241"+
    "\3\0\1\6\7\0\1\6\1\0\2\6\7\0\30\6"+
    "\2\0\30\6\3\0\1\6\10\0\1\140\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\u025c"+
    "\27\40\3\0\1\40\71\0\1\u025d\37\0\2\u0204\1\0"+
    "\1\u0204\1\u022e\15\0\2\140\7\0\30\140\3\0\27\140"+
    "\3\0\1\140\4\0\2\u0230\1\0\1\u0230\1\u025e\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\27\40\3\0\1\40\4\0\2\u0230\1\0\2\u0230"+
    "\120\0\2\u01f0\1\0\1\u01f0\1\u0231\15\0\2\140\7\0"+
    "\30\140\3\0\27\140\3\0\1\140\10\0\1\140\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\13\40\1\u025f"+
    "\14\40\2\0\1\6\12\40\1\u025f\14\40\3\0\1\40"+
    "\52\0\1\u0260\31\0\1\u0260\34\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\5\6\1\u0261\22\6\2\0\6\6"+
    "\1\u0261\21\6\3\0\1\6\44\0\1\u0262\32\0\1\u0262"+
    "\35\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\22\40\1\u0263\4\40\3\0"+
    "\1\40\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\30\6\2\0\14\6\1\u0264\13\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\30\6\2\0"+
    "\27\6\1\u0265\3\0\1\6\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\30\6\2\0\11\6\1\u0266\16\6"+
    "\3\0\1\6\4\0\2\u023b\1\0\2\u023b\120\0\2\u023c"+
    "\1\0\2\u023c\173\0\1\u0267\31\0\1\u0267\56\0\1\u0268"+
    "\32\0\1\u0268\102\0\1\u0269\31\0\1\u0269\55\0\1\u026a"+
    "\32\0\1\u026a\36\0\2\u0241\1\0\2\u0241\140\0\1\u026b"+
    "\1\0\2\u026b\7\0\30\u026b\3\0\27\u026b\20\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\5\6\1\u026c\22\6"+
    "\2\0\6\6\1\u026c\21\6\3\0\1\6\44\0\1\u026d"+
    "\32\0\1\u026d\31\0\2\u023c\1\0\1\u023c\1\u0245\15\0"+
    "\2\140\7\0\30\140\3\0\27\140\3\0\1\140\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\4\6\1\u026e"+
    "\23\6\2\0\5\6\1\u026e\22\6\3\0\1\6\43\0"+
    "\1\u026f\32\0\1\u026f\42\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\13\6\1\u0270\14\6\2\0\13\6\1\u0270"+
    "\14\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\21\6\1\u0271\6\6\2\0\21\6\1\u0271"+
    "\6\6\3\0\1\6\1\0\1\u0272\56\0\1\u0272\31\0"+
    "\1\u0272\13\0\1\u0272\6\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\u0273\27\40"+
    "\3\0\1\40\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\10\6\1\u0274\17\6\2\0\11\6\1\u0274\16\6"+
    "\3\0\1\6\1\u0275\46\0\1\u0275\32\0\1\u0275\22\0"+
    "\1\u0275\13\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\4\6\1\u0276\23\6\2\0\5\6\1\u0276\22\6\3\0"+
    "\1\6\4\0\2\u021e\1\0\1\u021e\1\u0254\15\0\2\140"+
    "\7\0\30\140\3\0\27\140\3\0\1\140\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\15\40"+
    "\1\u0277\12\40\2\0\1\6\14\40\1\u0277\12\40\3\0"+
    "\1\40\4\0\2\u023b\1\0\1\u023b\1\u0256\15\0\2\140"+
    "\7\0\30\140\3\0\27\140\3\0\1\140\10\0\1\140"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\u0278\27\40\3\0\1\40\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\23\6\1\u0279\4\6\2\0"+
    "\23\6\1\u0279\4\6\3\0\1\6\71\0\1\u027a\47\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\1\u027b\27\6"+
    "\2\0\1\6\1\u027b\26\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\22\6\1\u027c\5\6"+
    "\2\0\22\6\1\u027c\5\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\u027d\7\0\30\u027d\2\0\1\6"+
    "\27\u027d\3\0\1\u027d\26\0\2\u027e\7\0\30\u027e\3\0"+
    "\27\u027e\3\0\1\u027e\4\0\2\u0230\1\0\1\u0230\1\u025e"+
    "\15\0\2\140\7\0\30\140\3\0\27\140\3\0\1\140"+
    "\10\0\1\140\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\4\40\1\u027f\23\40\2\0\1\6\4\40\1\u027f"+
    "\22\40\3\0\1\40\43\0\1\u0280\32\0\1\u0280\42\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\4\6\1\u0281"+
    "\23\6\2\0\5\6\1\u0281\22\6\3\0\1\6\43\0"+
    "\1\u0282\32\0\1\u0282\36\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\14\40"+
    "\1\u0283\12\40\3\0\1\40\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\30\6\2\0\11\6\1\u0284\16\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\30\6\2\0\5\6\1\u0285\22\6\3\0\1\6"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\30\6"+
    "\2\0\7\6\1\u0286\20\6\3\0\1\6\71\0\1\u0287"+
    "\107\0\1\u0288\31\0\1\u0288\100\0\1\u0289\31\0\1\u0289"+
    "\71\0\1\u028a\31\0\1\u028a\14\0\2\u028b\3\0\14\u028b"+
    "\1\u028c\1\u028b\2\u028c\7\u028b\30\u028c\3\u028b\27\u028c\7\u028b"+
    "\11\0\1\6\7\0\1\6\1\0\2\6\7\0\16\6"+
    "\1\u028d\11\6\2\0\16\6\1\u028d\11\6\3\0\1\6"+
    "\55\0\1\u028e\31\0\1\u028e\31\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\20\6\1\u028f\7\6\2\0\20\6"+
    "\1\u028f\7\6\3\0\1\6\57\0\1\u0290\31\0\1\u0290"+
    "\27\0\1\6\7\0\1\6\1\0\2\6\7\0\16\6"+
    "\1\u0291\11\6\2\0\16\6\1\u0291\11\6\3\0\1\6"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\3\0\1\u0292"+
    "\3\0\30\6\2\0\30\6\3\0\1\6\33\0\1\u0292"+
    "\105\0\1\6\7\0\1\6\1\0\2\6\7\0\1\u0293"+
    "\27\6\2\0\1\6\1\u0293\26\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\15\6\1\u0294"+
    "\12\6\2\0\15\6\1\u0294\12\6\3\0\1\6\54\0"+
    "\1\u0295\31\0\1\u0295\32\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\1\u0296\27\6\2\0\1\6\1\u0296\26\6"+
    "\3\0\1\6\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\1\40\1\u0297\26\40\2\0\1\6"+
    "\1\40\1\u0297\25\40\3\0\1\40\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\15\6\1\u0298\12\6\2\0"+
    "\15\6\1\u0298\12\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\14\6\1\u0299\13\6\2\0"+
    "\14\6\1\u0299\13\6\3\0\1\6\54\0\1\u029a\31\0"+
    "\1\u029a\32\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\17\6\1\u029b\10\6\2\0\17\6\1\u029b\10\6\3\0"+
    "\1\6\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\16\6\1\u029c\11\6\2\0\16\6\1\u029c\11\6\3\0"+
    "\1\6\4\0\2\u0280\1\0\1\u0280\1\u029d\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\27\40\3\0\1\40\4\0\2\u0280\1\0\2\u0280\130\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\2\6\1\u029e"+
    "\25\6\2\0\3\6\1\u029e\24\6\3\0\1\6\41\0"+
    "\1\u029f\32\0\1\u029f\40\0\1\140\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\3\40"+
    "\1\u02a0\23\40\3\0\1\40\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\30\6\2\0\13\6\1\u02a1\14\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\30\6\2\0\15\6\1\u02a2\12\6\3\0\1\6"+
    "\37\0\1\u02a3\32\0\1\u02a3\72\0\1\u02a4\32\0\1\u02a4"+
    "\104\0\1\u02a5\31\0\1\u02a5\74\0\1\u02a6\31\0\1\u02a6"+
    "\41\0\1\u02a7\1\0\2\u02a7\7\0\30\u02a7\3\0\27\u02a7"+
    "\7\0\2\u028b\3\0\14\u028b\1\u02a7\1\u028b\2\u02a7\7\u028b"+
    "\30\u02a7\3\u028b\27\u02a7\7\u028b\1\0\2\u028e\1\0\2\u028e"+
    "\3\0\1\6\7\0\1\6\1\0\2\6\7\0\30\6"+
    "\2\0\30\6\3\0\1\6\4\0\2\u028e\1\0\2\u028e"+
    "\130\0\1\6\7\0\1\6\1\0\2\6\7\0\22\6"+
    "\1\u02a8\5\6\2\0\22\6\1\u02a8\5\6\3\0\1\6"+
    "\61\0\1\u02a9\31\0\1\u02a9\25\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\21\6\1\u02aa\6\6\2\0\21\6"+
    "\1\u02aa\6\6\3\0\1\6\1\0\1\u02ab\12\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\13\6\1\u02ac\14\6"+
    "\2\0\13\6\1\u02ac\14\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\6\6\1\u02ad\21\6"+
    "\2\0\7\6\1\u02ad\20\6\3\0\1\6\45\0\1\u02ae"+
    "\32\0\1\u02ae\34\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\27\40\1\u02af\2\0\1\6\25\40"+
    "\1\u02af\1\40\3\0\1\40\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\23\6\1\u02b0\4\6\2\0\23\6"+
    "\1\u02b0\4\6\3\0\1\6\4\0\2\u02a5\1\0\2\u02a5"+
    "\3\0\1\6\7\0\1\6\1\0\2\6\7\0\30\6"+
    "\2\0\30\6\3\0\1\6\62\0\1\u02b1\31\0\1\u02b1"+
    "\24\0\1\6\7\0\1\6\1\0\2\6\3\0\1\u02b2"+
    "\3\0\30\6\2\0\30\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\20\6\1\u02b3\7\6"+
    "\2\0\20\6\1\u02b3\7\6\3\0\1\6\4\0\2\u0280"+
    "\1\0\1\u0280\1\u029d\15\0\2\140\7\0\30\140\3\0"+
    "\27\140\3\0\1\140\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\7\6\1\u02b4\20\6\2\0\10\6\1\u02b4"+
    "\17\6\3\0\1\6\46\0\1\u02b5\32\0\1\u02b5\37\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\30\6\2\0"+
    "\26\6\1\u02b6\1\6\3\0\1\6\52\0\1\u02b7\31\0"+
    "\1\u02b7\106\0\1\u02b8\30\0\1\u02b8\11\0\2\u02a5\1\0"+
    "\2\u02a5\173\0\1\u02b9\31\0\1\u02b9\16\0\2\u028b\3\0"+
    "\2\u028b\1\u02ba\1\u02bb\10\u028b\1\u02a7\1\u02bb\2\u02a7\5\u028b"+
    "\1\u02bb\1\u028b\30\u02a7\3\u028b\27\u02a7\7\u028b\11\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\16\6\1\u02bc\11\6"+
    "\2\0\16\6\1\u02bc\11\6\3\0\1\6\55\0\1\u02bd"+
    "\31\0\1\u02bd\31\0\1\6\7\0\1\6\1\0\2\6"+
    "\3\0\1\u02be\3\0\30\6\2\0\30\6\3\0\1\6"+
    "\33\0\1\u02be\105\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\4\6\1\u02bf\23\6\2\0\5\6\1\u02bf\22\6"+
    "\3\0\1\6\10\0\1\140\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\10\40\1\u02c0\17\40\2\0\1\6"+
    "\10\40\1\u02c0\16\40\3\0\1\40\1\u02c1\13\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\14\6\1\u02c2\13\6"+
    "\2\0\14\6\1\u02c2\13\6\3\0\1\6\53\0\1\u02c3"+
    "\31\0\1\u02c3\33\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\10\6\1\u02c4\17\6\2\0\11\6\1\u02c4\16\6"+
    "\3\0\1\6\1\u02c5\13\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\1\u02c6\27\6\2\0\1\6\1\u02c6\26\6"+
    "\3\0\1\6\37\0\1\u02c7\32\0\1\u02c7\75\0\1\u02c8"+
    "\32\0\1\u02c8\75\0\1\u02c1\32\0\1\u02c1\22\0\1\u02c1"+
    "\46\0\1\u02c5\32\0\1\u02c5\22\0\1\u02c5\11\0\1\243"+
    "\11\0\1\u02a7\1\0\2\u02a7\7\0\30\u02a7\3\0\27\u02a7"+
    "\20\0\1\6\7\0\1\6\1\0\2\6\7\0\21\6"+
    "\1\u02c9\6\6\2\0\21\6\1\u02c9\6\6\3\0\1\6"+
    "\1\0\1\u02ca\56\0\1\u02ca\31\0\1\u02ca\13\0\1\u02ca"+
    "\12\0\1\6\7\0\1\6\1\0\2\6\7\0\1\u02cb"+
    "\27\6\2\0\1\6\1\u02cb\26\6\3\0\1\6\10\0"+
    "\1\140\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\3\40\1\u02cc\24\40\2\0\1\6\3\40\1\u02cc\23\40"+
    "\3\0\1\40\42\0\1\u02cd\32\0\1\u02cd\33\0\2\u02c3"+
    "\1\0\2\u02c3\3\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\30\6\2\0\30\6\3\0\1\6\4\0\2\u02c3"+
    "\1\0\2\u02c3\130\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\16\6\1\u02ce\11\6\2\0\16\6\1\u02ce\11\6"+
    "\3\0\1\6\55\0\1\u02cf\31\0\1\u02cf\31\0\1\6"+
    "\7\0\1\6\1\0\2\6\3\0\1\u02d0\3\0\30\6"+
    "\2\0\30\6\3\0\1\6\33\0\1\u02d0\130\0\1\u02d1"+
    "\32\0\1\u02d1\46\0\1\6\7\0\1\6\1\0\2\6"+
    "\3\0\1\u02d2\3\0\30\6\2\0\30\6\3\0\1\6"+
    "\33\0\1\u02d2\105\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\22\6\1\u02d3\5\6\2\0\22\6\1\u02d3\5\6"+
    "\3\0\1\6\4\0\2\u02cd\1\0\1\u02cd\1\u02d4\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\27\40\3\0\1\40\4\0\2\u02cd\1\0\2\u02cd"+
    "\120\0\2\u02cf\1\0\2\u02cf\3\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\30\6\2\0\30\6\3\0\1\6"+
    "\4\0\2\u02cf\1\0\2\u02cf\175\0\1\u02d5\31\0\1\u02d5"+
    "\25\0\1\6\7\0\1\6\1\0\2\6\7\0\16\6"+
    "\1\u02d6\11\6\2\0\16\6\1\u02d6\11\6\3\0\1\6"+
    "\4\0\2\u02cd\1\0\1\u02cd\1\u02d4\15\0\2\140\7\0"+
    "\30\140\3\0\27\140\3\0\1\140\55\0\1\u02d7\31\0"+
    "\1\u02d7\31\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\20\6\1\u02d8\7\6\2\0\20\6\1\u02d8\7\6\3\0"+
    "\1\6\57\0\1\u02d9\31\0\1\u02d9\27\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\10\6\1\u02da\17\6\2\0"+
    "\11\6\1\u02da\16\6\3\0\1\6\1\u02db\46\0\1\u02db"+
    "\32\0\1\u02db\22\0\1\u02db\13\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\16\6\1\u02dc\11\6\2\0\16\6"+
    "\1\u02dc\11\6\3\0\1\6\55\0\1\u02dd\31\0\1\u02dd"+
    "\21\0\2\u02dd\1\0\2\u02dd\3\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\30\6\2\0\30\6\3\0\1\6"+
    "\4\0\2\u02dd\1\0\2\u02dd\117\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[55335];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\5\11\1\1\1\11\1\1\2\11"+
    "\27\1\2\11\14\1\1\11\1\1\1\11\2\1\21\0"+
    "\1\1\1\11\4\0\1\11\2\0\4\1\1\0\3\11"+
    "\1\0\3\1\1\0\50\1\1\11\1\0\1\1\24\0"+
    "\1\11\1\0\1\11\5\1\2\0\21\1\2\0\2\1"+
    "\1\0\1\1\1\0\2\1\1\0\10\1\2\0\14\1"+
    "\1\0\16\1\10\0\1\1\15\0\12\1\1\0\6\1"+
    "\1\0\6\1\6\0\1\1\1\0\10\1\1\0\7\1"+
    "\1\0\2\1\1\0\7\1\1\0\3\1\1\0\1\1"+
    "\1\0\15\1\5\0\1\1\7\0\2\1\3\0\10\1"+
    "\1\11\1\1\1\0\4\1\1\0\6\1\1\0\1\11"+
    "\4\0\1\1\1\0\11\1\1\0\4\1\1\0\2\1"+
    "\1\0\7\1\1\0\5\1\1\0\12\1\21\0\11\1"+
    "\1\11\3\1\1\11\1\1\1\0\1\1\1\0\4\1"+
    "\3\0\1\11\1\1\1\0\2\1\1\0\12\1\1\0"+
    "\4\1\1\0\2\1\1\0\4\1\1\0\7\1\11\0"+
    "\1\1\2\0\1\11\2\1\1\0\4\1\1\0\4\1"+
    "\1\0\1\1\1\0\3\1\2\11\1\0\6\1\1\11"+
    "\4\1\1\0\4\1\1\0\5\1\1\0\1\1\1\0"+
    "\7\1\4\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\3\1\1\11\1\1\1\0\2\1\1\11"+
    "\5\1\1\0\3\1\1\0\2\1\1\0\1\1\1\0"+
    "\4\1\5\0\1\1\1\0\1\1\1\0\2\1\1\0"+
    "\2\1\1\0\4\1\1\0\7\1\1\0\4\1\6\0"+
    "\3\1\1\0\1\1\1\11\2\1\1\0\4\1\1\0"+
    "\4\1\1\0\3\1\2\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\11\2\1\1\0\1\11\2\1"+
    "\1\0\1\1\3\0\1\1\1\0\1\1\1\0\1\11"+
    "\2\1\1\0\3\1\1\0\1\1\2\0\1\1\1\0"+
    "\5\1\1\11\1\0\1\11\2\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[733];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorCom> erroresCom;

    private void error(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","Simbolo no existe en el lenguaje",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme,""));
    }    

    private void errorPrueba(String lexeme, String tipo) {
        erroresCom.add(new ErrorCom("PRUEBA",tipo,String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme,""));
    }

    public List<ErrorCom> getErroresCom() {
        return erroresCom;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerGCIC(java.io.Reader in) {
      erroresCom = new ArrayList<>();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error(yytext()); new Symbol(sym.error,yyline,yycolumn, yytext());
            }
            // fall through
          case 102: break;
          case 2:
            { 
            }
            // fall through
          case 103: break;
          case 3:
            { return new Symbol(symG.EXCL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 4:
            { return new Symbol(symG.IDET,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 5:
            { return new Symbol(symG.PARI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 6:
            { return new Symbol(symG.PARD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 7:
            { return new Symbol(symG.MULT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 8:
            { return new Symbol(symG.SUMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 9:
            { return new Symbol(symG.COMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 10:
            { return new Symbol(symG.RESTA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 11:
            { return new Symbol(symG.BARRA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 12:
            { return new Symbol(symG.DOSPUNT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 13:
            { return new Symbol(symG.PUNTCOMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 14:
            { return new Symbol(symG.MEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 15:
            { return new Symbol(symG.IGUAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 16:
            { return new Symbol(symG.MAY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 17:
            { return new Symbol(symG.CORCHCUADI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 18:
            { return new Symbol(symG.CORCHCUADD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 19:
            { return new Symbol(symG.CORCHI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 20:
            { return new Symbol(symG.CORCHD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 21:
            { return new Symbol(symG.DIFER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 22:
            { return new Symbol(symG.AND,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 23:
            { return new Symbol(symG.PALABRAS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 24:
            { return new Symbol(symG.MENIG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 25:
            { return new Symbol(symG.DOBIGUAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 26:
            { return new Symbol(symG.MAYIG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 27:
            { return new Symbol(symG.IF,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 28:
            { return new Symbol(symG.IDETIQUETA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 29:
            { return new Symbol(symG.OR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          case 30:
            { return new Symbol(symG.VALP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 31:
            { return new Symbol(symG.CARACTER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 32:
            { return new Symbol(symG.DECIM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 33:
            { return new Symbol(symG.ASC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 34:
            { return new Symbol(symG.PAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 35:
            { return new Symbol(symG.END,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 36:
            { return new Symbol(symG.ALT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 37:
            { return new Symbol(symG.SRC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 38:
            { return new Symbol(symG.CHAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 39:
            { return new Symbol(symG.BR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 40:
            { return new Symbol(symG.H1,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 41:
            { return new Symbol(symG.DESC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 42:
            { return new Symbol(symG.ELSE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 43:
            { return new Symbol(symG.EXIT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 44:
            { return new Symbol(symG.INITC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 45:
            { return new Symbol(symG.THEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 46:
            { return new Symbol(symG.TRUE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 47:
            { return new Symbol(symG.COLS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 48:
            { return new Symbol(symG.HREF,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 49:
            { return new Symbol(symG.NAME,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 50:
            { return new Symbol(symG.ROWS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 51:
            { return new Symbol(symG.TYPE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 52:
            { return new Symbol(symG.DIV,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 53:
            { return new Symbol(symG.IMG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 54:
            { return new Symbol(symG.FALSE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 55:
            { return new Symbol(symG.WHILE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 56:
            { return new Symbol(symG.CLASS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 57:
            { return new Symbol(symG.COLOR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          case 58:
            { return new Symbol(symG.WIDTH,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 159: break;
          case 59:
            { return new Symbol(symG.BODY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 160: break;
          case 60:
            { return new Symbol(symG.GCIC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 161: break;
          case 61:
            { return new Symbol(symG.HEAD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 62:
            { return new Symbol(symG.LINK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 163: break;
          case 63:
            { return new Symbol(symG.SPAM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 164: break;
          case 64:
            { return new Symbol(symG.HUNTIL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 165: break;
          case 65:
            { return new Symbol(symG.INSERT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 166: break;
          case 66:
            { return new Symbol(symG.REPEAT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 167: break;
          case 67:
            { return new Symbol(symG.STRING,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 168: break;
          case 68:
            { return new Symbol(symG.HEIGHT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 169: break;
          case 69:
            { return new Symbol(symG.GLOBAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 170: break;
          case 70:
            { return new Symbol(symG.BOOLEAN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 171: break;
          case 71:
            { return new Symbol(symG.INPUT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 172: break;
          case 72:
            { return new Symbol(symG.TITLE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 173: break;
          case 73:
            { return new Symbol(symG.DECIMAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 174: break;
          case 74:
            { return new Symbol(symG.ELSEIF,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 175: break;
          case 75:
            { return new Symbol(symG.ID_CAP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 176: break;
          case 76:
            { return new Symbol(symG.INTEGER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 177: break;
          case 77:
            { return new Symbol(symG.ONLOAD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 178: break;
          case 78:
            { return new Symbol(symG.REVERSE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 179: break;
          case 79:
            { return new Symbol(symG.ONCLICK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 180: break;
          case 80:
            { return new Symbol(symG.BUTTON,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 181: break;
          case 81:
            { return new Symbol(symG.OPTION,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 182: break;
          case 82:
            { return new Symbol(symG.SELECT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 183: break;
          case 83:
            { return new Symbol(symG.PROCESO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 184: break;
          case 84:
            { return new Symbol(symG.THENWHILE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 185: break;
          case 85:
            { return new Symbol(symG.FSIZE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 186: break;
          case 86:
            { return new Symbol(symG.ALERTINFO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 187: break;
          case 87:
            { return new Symbol(symG.CANT_USOS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 188: break;
          case 88:
            { return new Symbol(symG.TEXTAREA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 189: break;
          case 89:
            { return new Symbol(symG.LETPAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 190: break;
          case 90:
            { return new Symbol(symG.BACK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 191: break;
          case 91:
            { return new Symbol(symG.TEXTALIGN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 192: break;
          case 92:
            { return new Symbol(symG.SCRIPTING,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 193: break;
          case 93:
            { return new Symbol(symG.NOMBRE_CAP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 194: break;
          case 94:
            { return new Symbol(symG.FFAMILY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 195: break;
          case 95:
            { return new Symbol(symG.CANT_FALLOS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 196: break;
          case 96:
            { return new Symbol(symG.LETIMPAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 197: break;
          case 97:
            { return new Symbol(symG.GETELEMENT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 198: break;
          case 98:
            { return new Symbol(symG.NUMALEA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 199: break;
          case 99:
            { return new Symbol(symG.ULTIMA_FECHA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 200: break;
          case 100:
            { return new Symbol(symG.CANT_ACIERTOS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 201: break;
          case 101:
            { return new Symbol(symG.CARALEATORIO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 202: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerGCIC [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerGCIC scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerGCIC(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
