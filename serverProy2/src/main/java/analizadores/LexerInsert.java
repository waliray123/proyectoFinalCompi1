// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexerInsert.jflex

package analizadores;
import java_cup.runtime.*; 
import analizadores.symTI.*;
import java.util.List;
import java.util.ArrayList;
import objetos.ErrorCom;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerInsert implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\24\u0200\1\u0300\11\u0200\1\u0400\1\u0500\16\u0200"+
    "\1\u0600\247\u0200\10\u0700\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\1\3\2\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\0\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\10\23\1\25\1\26\1\27\1\30\1\31\1\32\1\0"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\44\1\53\1\54\1\55\1\56\1\57\1\44\1\60"+
    "\1\61\1\44\1\62\1\0\1\63\1\0\1\64\1\0"+
    "\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\44\1\76\1\77\1\100\1\101\1\102\1\103"+
    "\1\44\1\104\1\105\1\106\1\107\1\57\1\110\1\111"+
    "\1\112\1\113\1\114\1\115\1\116\7\0\1\3\71\0"+
    "\1\117\100\120\60\0\2\121\115\0\1\122\u02a8\0\2\3"+
    "\u0100\0\1\123\u01d5\0\u0100\124";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\2\4\1\22\1\23"+
    "\14\4\1\24\1\1\1\25\1\2\1\26\2\0\1\27"+
    "\1\21\1\4\1\0\1\30\1\31\1\32\1\21\10\4"+
    "\1\33\7\4\1\34\1\35\1\0\1\36\1\4\1\0"+
    "\1\21\10\4\1\37\3\4\2\0\1\40\11\4\1\41"+
    "\3\4\1\0\1\4\1\0\1\21\1\4\1\42\2\4"+
    "\1\0\1\4\1\0\1\4\1\43\4\4\1\0\6\4"+
    "\1\0\1\4\5\0\3\4\1\44\2\4\1\45\1\46"+
    "\1\4\1\47\1\4\1\50\1\4\3\0\2\4\2\51"+
    "\1\4\1\0\1\4\1\0\1\4\1\52\2\4\1\0"+
    "\6\4\1\0\1\4\1\52\4\0\1\4\1\53\1\54"+
    "\4\4\1\55\4\0\1\56\2\4\1\0\2\57\1\60"+
    "\1\4\2\61\1\4\1\0\1\4\1\0\1\4\1\62"+
    "\2\4\1\0\1\4\3\0\1\62\3\4\1\63\2\4"+
    "\2\0\1\2\2\4\1\0\1\64\1\4\1\0\1\4"+
    "\1\0\2\4\2\65\1\4\1\0\1\64\1\0\3\4"+
    "\1\66\1\4\1\0\1\67\1\4\1\0\2\70\1\4"+
    "\1\0\1\71\2\4\1\0\1\71\4\4\1\0\1\4"+
    "\1\0\1\4\1\0\2\4\1\0\2\4\1\72\1\4"+
    "\2\0\1\4\1\0\1\4\1\0\1\73\1\4\1\0"+
    "\1\74\1\4\1\75\1\0\1\4\1\0\2\76\1\4"+
    "\1\0\1\77\1\0\1\35\1\0\1\4\1\0\1\4"+
    "\2\0\1\4\1\0\1\4\2\0\1\4\1\0\1\4"+
    "\2\0\1\4\1\0\1\4\4\0\1\4\1\0\1\100"+
    "\1\4\1\0\1\4\1\0\1\101";

  private static int [] zzUnpackAction() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\125"+
    "\0\125\0\125\0\125\0\125\0\u01a9\0\125\0\u0253\0\125"+
    "\0\125\0\u02a8\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\125"+
    "\0\125\0\u04a6\0\u04fb\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4"+
    "\0\u06f9\0\u074e\0\u07a3\0\u07f8\0\u084d\0\125\0\u08a2\0\125"+
    "\0\u08f7\0\125\0\u094c\0\u09a1\0\125\0\u09f6\0\u0a4b\0\u0aa0"+
    "\0\125\0\125\0\125\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4\0\u0c49"+
    "\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d\0\u0a4b\0\u0df2\0\u0e47\0\u0e9c"+
    "\0\u0ef1\0\u0f46\0\u0f9b\0\u0ff0\0\125\0\125\0\u1045\0\u09f6"+
    "\0\u109a\0\u10ef\0\u1144\0\u1199\0\u11ee\0\u1243\0\u1298\0\u12ed"+
    "\0\u1342\0\u1397\0\u13ec\0\u01a9\0\u1441\0\u1496\0\u14eb\0\u1540"+
    "\0\u1595\0\u03fc\0\u15ea\0\u163f\0\u1694\0\u16e9\0\u173e\0\u1793"+
    "\0\u17e8\0\u183d\0\u1892\0\u03fc\0\u18e7\0\u193c\0\u1991\0\u19e6"+
    "\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a\0\u01a9\0\u1b8f\0\u1be4\0\u1c39"+
    "\0\u1c8e\0\u1ce3\0\u1d38\0\u01a9\0\u1d8d\0\u1de2\0\u1e37\0\u1e8c"+
    "\0\u1ee1\0\u1f36\0\u1f8b\0\u1fe0\0\u2035\0\u208a\0\u20df\0\u2134"+
    "\0\u2189\0\u21de\0\u2233\0\u2288\0\u22dd\0\u2332\0\u2387\0\u23dc"+
    "\0\u2431\0\u03fc\0\u2486\0\u24db\0\u03fc\0\u03fc\0\u2530\0\u03fc"+
    "\0\u2585\0\u03fc\0\u25da\0\u262f\0\u2684\0\u26d9\0\u272e\0\u2783"+
    "\0\u01a9\0\125\0\u27d8\0\u282d\0\u2882\0\u28d7\0\u292c\0\u01a9"+
    "\0\u2981\0\u29d6\0\u2a2b\0\u2a80\0\u2ad5\0\u2b2a\0\u2b7f\0\u2bd4"+
    "\0\u2c29\0\u2c7e\0\u2cd3\0\125\0\u2d28\0\u2d7d\0\u2dd2\0\u2e27"+
    "\0\u2e7c\0\u03fc\0\u03fc\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u03fc"+
    "\0\u3025\0\u307a\0\u30cf\0\u3124\0\u01a9\0\u3179\0\u31ce\0\u3223"+
    "\0\u01a9\0\125\0\u01a9\0\u3278\0\u01a9\0\125\0\u32cd\0\u3322"+
    "\0\u3377\0\u33cc\0\u3421\0\u01a9\0\u3476\0\u34cb\0\u3520\0\u3575"+
    "\0\u35ca\0\u361f\0\u3674\0\125\0\u36c9\0\u371e\0\u3773\0\u03fc"+
    "\0\u37c8\0\u381d\0\u3872\0\u38c7\0\u1a90\0\u391c\0\u3971\0\u39c6"+
    "\0\u01a9\0\u3a1b\0\u3a70\0\u3ac5\0\u3b1a\0\u3b6f\0\u3bc4\0\u01a9"+
    "\0\125\0\u3c19\0\u3c6e\0\125\0\u3cc3\0\u3d18\0\u3d6d\0\u3dc2"+
    "\0\u03fc\0\u3e17\0\u3e6c\0\u01a9\0\u3ec1\0\u3f16\0\u01a9\0\125"+
    "\0\u3f6b\0\u3fc0\0\u01a9\0\u4015\0\u406a\0\u40bf\0\125\0\u4114"+
    "\0\u4169\0\u41be\0\u4213\0\u4268\0\u42bd\0\u4312\0\u4367\0\u43bc"+
    "\0\u4411\0\u4466\0\u44bb\0\u4510\0\u4565\0\u01a9\0\u45ba\0\u460f"+
    "\0\u4664\0\u46b9\0\u470e\0\u4763\0\u47b8\0\u01a9\0\u480d\0\u4862"+
    "\0\u0a4b\0\u48b7\0\u01a9\0\u490c\0\u4961\0\u49b6\0\u01a9\0\125"+
    "\0\u4a0b\0\u4a60\0\u01a9\0\u4ab5\0\u460f\0\u4b0a\0\u4b5f\0\u4bb4"+
    "\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u4db2\0\u4e07\0\u4e5c"+
    "\0\u4eb1\0\u4f06\0\u4f5b\0\u4fb0\0\u5005\0\u505a\0\u50af\0\u5104"+
    "\0\u5159\0\u51ae\0\u5203\0\u5258\0\u52ad\0\u5302\0\125\0\u5357"+
    "\0\u53ac\0\u5401\0\u5456\0\125";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\2\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\2"+
    "\1\16\2\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\26\1\27\24\26\1\30\1\31\1\6\1\32\1\33"+
    "\1\34\2\26\1\35\1\26\1\36\1\37\3\26\1\40"+
    "\1\41\1\26\1\42\1\43\1\44\1\26\1\45\3\26"+
    "\1\46\1\47\1\50\1\2\1\26\4\2\126\0\2\3"+
    "\1\0\2\3\125\0\1\51\21\0\1\52\76\0\1\53"+
    "\2\0\1\53\2\0\2\53\1\0\2\53\3\0\1\53"+
    "\2\0\3\53\5\0\7\53\1\54\17\53\2\0\10\53"+
    "\1\54\17\53\4\0\1\53\15\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\27\6\2\0\30\6\4\0\1\6"+
    "\16\0\1\55\113\0\2\25\1\0\2\25\3\0\1\6"+
    "\6\0\1\6\1\56\1\0\2\17\1\25\4\0\1\25"+
    "\3\26\1\57\23\26\2\0\1\6\3\26\1\57\23\26"+
    "\3\0\1\25\1\26\12\0\1\60\21\0\1\61\124\0"+
    "\1\62\124\0\1\63\75\0\2\25\1\0\2\25\13\0"+
    "\1\25\1\0\3\25\4\0\4\25\1\64\23\25\3\0"+
    "\3\25\1\64\23\25\3\0\2\25\5\0\2\25\1\0"+
    "\2\25\3\0\1\6\6\0\1\6\1\25\1\0\2\26"+
    "\1\25\4\0\1\25\3\26\1\57\23\26\2\0\1\6"+
    "\3\26\1\57\23\26\3\0\1\25\1\26\5\0\2\25"+
    "\1\0\2\25\3\0\1\6\6\0\1\6\1\25\1\0"+
    "\2\26\1\25\4\0\1\25\3\26\1\57\23\26\2\0"+
    "\1\65\3\26\1\57\23\26\3\0\1\25\1\26\5\0"+
    "\2\25\1\0\2\25\3\0\1\6\6\0\1\6\1\25"+
    "\1\0\2\26\1\25\4\0\1\25\3\26\1\57\23\26"+
    "\2\0\1\6\3\26\1\57\6\26\1\66\14\26\3\0"+
    "\1\25\1\26\5\0\2\25\1\0\2\25\3\0\1\6"+
    "\6\0\1\6\1\25\1\0\2\26\1\25\4\0\1\25"+
    "\3\26\1\57\23\26\2\0\1\6\1\67\2\26\1\57"+
    "\23\26\3\0\1\25\1\26\5\0\2\25\1\0\2\25"+
    "\3\0\1\6\6\0\1\6\1\25\1\0\2\26\1\25"+
    "\4\0\1\25\3\26\1\57\23\26\2\0\1\65\3\26"+
    "\1\57\6\26\1\70\2\26\1\71\11\26\3\0\1\25"+
    "\1\26\5\0\2\25\1\0\2\25\3\0\1\6\6\0"+
    "\1\6\1\25\1\0\2\26\1\25\4\0\1\25\3\26"+
    "\1\57\23\26\2\0\1\6\3\26\1\57\11\26\1\72"+
    "\11\26\3\0\1\25\1\26\5\0\2\25\1\0\2\25"+
    "\3\0\1\6\6\0\1\6\1\25\1\0\2\26\1\25"+
    "\4\0\1\25\3\26\1\57\23\26\2\0\1\6\3\26"+
    "\1\57\1\73\12\26\1\74\7\26\3\0\1\25\1\26"+
    "\5\0\2\25\1\0\2\25\3\0\1\6\6\0\1\6"+
    "\1\25\1\0\2\26\1\25\4\0\1\25\3\26\1\57"+
    "\23\26\2\0\1\6\3\26\1\75\23\26\3\0\1\25"+
    "\1\26\5\0\2\25\1\0\2\25\3\0\1\6\6\0"+
    "\1\6\1\25\1\0\2\26\1\25\4\0\1\25\3\26"+
    "\1\57\23\26\2\0\1\6\1\76\2\26\1\57\23\26"+
    "\3\0\1\25\1\26\5\0\2\25\1\0\2\25\3\0"+
    "\1\6\6\0\1\6\1\25\1\0\2\26\1\25\4\0"+
    "\1\25\3\26\1\57\23\26\2\0\1\6\3\26\1\57"+
    "\10\26\1\77\12\26\3\0\1\25\1\26\5\0\2\25"+
    "\1\0\2\25\3\0\1\6\6\0\1\6\1\25\1\0"+
    "\2\26\1\25\4\0\1\25\3\26\1\57\23\26\2\0"+
    "\1\6\3\26\1\57\11\26\1\100\11\26\3\0\1\25"+
    "\1\26\5\0\2\25\1\0\2\25\3\0\1\6\6\0"+
    "\1\6\1\25\1\0\2\26\1\25\4\0\1\25\3\26"+
    "\1\57\23\26\2\0\1\6\3\26\1\57\13\26\1\101"+
    "\7\26\3\0\1\25\1\26\5\0\2\25\1\0\2\25"+
    "\3\0\1\6\6\0\1\6\1\25\1\0\2\26\1\25"+
    "\4\0\1\25\3\26\1\57\23\26\2\0\1\6\3\26"+
    "\1\57\1\102\20\26\1\103\1\26\3\0\1\25\1\26"+
    "\5\0\2\25\1\0\2\25\3\0\1\6\6\0\1\6"+
    "\1\25\1\0\2\26\1\25\4\0\1\25\3\26\1\57"+
    "\23\26\2\0\1\6\3\26\1\57\4\26\1\104\16\26"+
    "\3\0\1\25\1\26\121\0\1\105\7\0\2\51\3\0"+
    "\117\51\3\0\1\53\2\0\1\53\1\0\1\106\2\53"+
    "\1\0\2\53\3\0\1\53\2\0\3\53\5\0\7\53"+
    "\1\54\17\53\2\0\10\53\1\54\17\53\4\0\1\53"+
    "\6\0\1\53\2\0\1\53\1\0\1\106\2\53\1\0"+
    "\2\53\3\0\1\53\2\0\3\53\5\0\7\53\1\54"+
    "\12\53\1\107\4\53\2\0\10\53\1\54\11\53\1\107"+
    "\5\53\4\0\1\53\5\0\2\25\1\0\2\25\13\0"+
    "\1\25\1\0\2\110\1\25\4\0\4\25\1\64\23\25"+
    "\3\0\3\25\1\64\23\25\3\0\2\25\5\0\2\25"+
    "\1\0\2\25\3\0\1\6\6\0\1\6\1\25\1\0"+
    "\2\26\1\25\4\0\1\25\3\26\1\57\1\111\22\26"+
    "\2\0\1\6\3\26\1\57\1\111\22\26\3\0\1\25"+
    "\1\26\24\0\1\112\105\0\2\25\1\0\2\25\13\0"+
    "\1\25\1\0\3\25\4\0\4\25\1\64\1\113\22\25"+
    "\3\0\3\25\1\64\1\113\22\25\3\0\2\25\15\0"+
    "\1\6\6\0\1\6\2\0\2\6\6\0\1\6\1\114"+
    "\1\6\1\115\1\6\1\116\1\117\1\120\1\121\2\6"+
    "\1\122\2\6\1\123\1\124\1\6\1\125\1\126\1\6"+
    "\1\127\2\6\2\0\2\6\1\114\1\6\1\115\1\6"+
    "\1\116\1\117\1\120\1\121\1\6\1\122\2\6\1\123"+
    "\1\124\1\6\1\125\1\126\5\6\4\0\1\6\1\130"+
    "\1\131\3\0\2\25\1\0\2\25\3\0\1\6\6\0"+
    "\1\6\1\25\1\0\2\26\1\25\4\0\1\25\3\26"+
    "\1\57\23\26\2\0\1\6\3\26\1\57\15\26\1\132"+
    "\5\26\3\0\1\25\1\26\5\0\2\25\1\0\2\25"+
    "\3\0\1\6\6\0\1\6\1\25\1\0\2\26\1\25"+
    "\4\0\1\25\3\26\1\57\23\26\2\0\1\6\2\26"+
    "\1\133\1\57\23\26\3\0\1\25\1\26\5\0\2\25"+
    "\1\0\2\25\3\0\1\6\6\0\1\6\1\25\1\0"+
    "\2\26\1\25\4\0\1\25\3\26\1\57\23\26\2\0"+
    "\1\6\1\134\2\26\1\57\23\26\3\0\1\25\1\26"+
    "\5\0\2\25\1\0\2\25\3\0\1\6\6\0\1\6"+
    "\1\25\1\0\2\26\1\25\4\0\1\25\3\26\1\57"+
    "\23\26\2\0\1\6\3\26\1\57\6\26\1\135\14\26"+
    "\3\0\1\25\1\26\5\0\2\25\1\0\2\25\3\0"+
    "\1\6\6\0\1\6\1\25\1\0\2\26\1\25\4\0"+
    "\1\25\3\26\1\57\23\26\2\0\1\6\3\26\1\57"+
    "\10\26\1\136\12\26\3\0\1\25\1\26\5\0\2\25"+
    "\1\0\2\25\3\0\1\6\6\0\1\6\1\25\1\0"+
    "\2\26\1\25\4\0\1\25\3\26\1\57\23\26\2\0"+
    "\1\6\3\26\1\57\4\26\1\137\16\26\3\0\1\25"+
    "\1\26\5\0\2\25\1\0\2\25\3\0\1\6\6\0"+
    "\1\6\1\25\1\0\2\26\1\25\4\0\1\25\3\26"+
    "\1\57\23\26\2\0\1\6\3\26\1\57\1\140\22\26"+
    "\3\0\1\25\1\26\5\0\2\25\1\0\2\25\3\0"+
    "\1\6\6\0\1\6\1\25\1\0\2\26\1\25\4\0"+
    "\1\25\3\26\1\57\23\26\2\0\1\6\3\26\1\57"+
    "\7\26\1\141\13\26\3\0\1\25\1\26\5\0\2\25"+
    "\1\0\2\25\3\0\1\6\6\0\1\6\1\25\1\0"+
    "\2\26\1\25\4\0\1\25\3\26\1\57\23\26\2\0"+
    "\1\6\2\26\1\142\1\57\23\26\3\0\1\25\1\26"+
    "\5\0\2\25\1\0\2\25\3\0\1\6\6\0\1\6"+
    "\1\25\1\0\2\26\1\25\4\0\1\25\3\26\1\57"+
    "\23\26\2\0\1\6\3\26\1\57\17\26\1\143\3\26"+
    "\3\0\1\25\1\26\5\0\2\25\1\0\2\25\3\0"+
    "\1\6\6\0\1\6\1\25\1\0\2\26\1\25\4\0"+
    "\1\25\3\26\1\57\23\26\2\0\1\6\2\26\1\144"+
    "\1\57\23\26\3\0\1\25\1\26\5\0\2\25\1\0"+
    "\2\25\3\0\1\6\6\0\1\6\1\25\1\0\2\26"+
    "\1\25\4\0\1\25\3\26\1\57\23\26\2\0\1\6"+
    "\3\26\1\57\20\26\1\145\2\26\3\0\1\25\1\26"+
    "\5\0\2\25\1\0\2\25\3\0\1\6\6\0\1\6"+
    "\1\25\1\0\2\26\1\25\4\0\1\25\3\26\1\57"+
    "\23\26\2\0\1\6\3\26\1\57\12\26\1\146\10\26"+
    "\3\0\1\25\1\26\5\0\2\25\1\0\2\25\3\0"+
    "\1\6\6\0\1\6\1\25\1\0\2\26\1\25\4\0"+
    "\1\25\3\26\1\57\23\26\2\0\1\6\3\26\1\147"+
    "\23\26\3\0\1\25\1\26\6\0\1\53\2\0\1\53"+
    "\1\0\1\106\2\53\1\0\2\53\3\0\1\53\2\0"+
    "\3\53\5\0\7\53\1\54\12\53\1\150\4\53\2\0"+
    "\10\53\1\54\11\53\1\150\5\53\4\0\1\53\5\0"+
    "\2\25\1\0\2\25\3\0\1\6\6\0\1\6\1\25"+
    "\1\0\2\26\1\25\4\0\1\25\2\26\1\151\1\57"+
    "\23\26\2\0\1\6\2\26\1\151\1\57\23\26\3\0"+
    "\1\25\1\26\24\0\1\152\105\0\2\25\1\0\2\25"+
    "\13\0\1\25\1\0\3\25\4\0\3\25\1\153\1\64"+
    "\23\25\3\0\2\25\1\153\1\64\23\25\3\0\2\25"+
    "\15\0\1\6\6\0\1\6\2\0\2\6\6\0\16\6"+
    "\1\154\1\6\1\155\2\6\1\156\3\6\2\0\16\6"+
    "\1\154\1\6\1\155\2\6\1\156\4\6\4\0\1\6"+
    "\15\0\1\6\6\0\1\6\2\0\2\6\6\0\10\6"+
    "\1\157\16\6\2\0\11\6\1\157\16\6\4\0\1\6"+
    "\1\160\14\0\1\6\6\0\1\6\2\0\2\6\6\0"+
    "\10\6\1\161\16\6\2\0\11\6\1\161\16\6\4\0"+
    "\1\6\1\162\14\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\2\6\1\163\24\6\2\0\3\6\1\163\24\6"+
    "\4\0\1\6\15\0\1\6\6\0\1\6\2\0\1\6"+
    "\1\164\6\0\4\6\1\165\22\6\2\0\5\6\1\165"+
    "\22\6\4\0\1\6\15\0\1\6\6\0\1\6\2\0"+
    "\2\6\6\0\14\6\1\166\1\167\11\6\2\0\14\6"+
    "\1\166\1\167\12\6\4\0\1\6\15\0\1\6\6\0"+
    "\1\6\2\0\2\6\6\0\10\6\1\170\16\6\2\0"+
    "\11\6\1\170\16\6\4\0\1\6\1\171\14\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\17\6\1\172\7\6"+
    "\2\0\17\6\1\172\10\6\4\0\1\6\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\2\6\1\173\1\6"+
    "\1\174\12\6\1\175\7\6\2\0\3\6\1\173\1\6"+
    "\1\174\11\6\1\175\10\6\4\0\1\6\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\4\6\1\176\3\6"+
    "\1\177\16\6\2\0\5\6\1\176\3\6\1\177\16\6"+
    "\4\0\1\6\1\200\14\0\1\6\6\0\1\6\2\0"+
    "\2\6\6\0\1\201\26\6\2\0\1\6\1\201\26\6"+
    "\4\0\1\6\53\0\1\202\1\203\27\0\1\202\1\203"+
    "\60\0\1\204\1\0\1\205\12\0\1\206\14\0\1\204"+
    "\1\0\1\205\11\0\1\206\22\0\2\25\1\0\2\25"+
    "\3\0\1\6\6\0\1\6\1\25\1\0\2\26\1\25"+
    "\4\0\1\25\3\26\1\57\23\26\2\0\1\6\3\26"+
    "\1\57\5\26\1\207\15\26\3\0\1\25\1\26\5\0"+
    "\2\25\1\0\2\25\3\0\1\6\6\0\1\6\1\25"+
    "\1\0\2\26\1\25\4\0\1\25\3\26\1\57\23\26"+
    "\2\0\1\6\3\26\1\57\14\26\1\210\6\26\3\0"+
    "\1\25\1\26\5\0\2\25\1\0\2\25\3\0\1\6"+
    "\6\0\1\6\1\25\1\0\2\26\1\25\4\0\1\25"+
    "\3\26\1\57\23\26\2\0\1\6\3\26\1\57\11\26"+
    "\1\211\2\26\1\212\6\26\3\0\1\25\1\26\5\0"+
    "\2\25\1\0\2\25\3\0\1\6\6\0\1\6\1\25"+
    "\1\0\2\26\1\25\4\0\1\25\3\26\1\57\23\26"+
    "\2\0\1\6\3\26\1\57\15\26\1\213\5\26\3\0"+
    "\1\25\1\26\5\0\2\25\1\0\2\25\3\0\1\6"+
    "\6\0\1\6\1\25\1\0\2\26\1\25\4\0\1\25"+
    "\3\26\1\57\23\26\2\0\1\6\3\26\1\57\2\26"+
    "\1\214\20\26\3\0\1\25\1\26\5\0\2\25\1\0"+
    "\2\25\3\0\1\6\6\0\1\6\1\25\1\0\2\26"+
    "\1\25\4\0\1\25\3\26\1\57\23\26\2\0\1\6"+
    "\3\26\1\57\1\26\1\215\21\26\3\0\1\25\1\26"+
    "\5\0\2\25\1\0\2\25\3\0\1\6\6\0\1\6"+
    "\1\25\1\0\2\26\1\25\4\0\1\25\3\26\1\57"+
    "\23\26\2\0\1\6\3\26\1\57\1\216\22\26\3\0"+
    "\1\25\1\26\5\0\2\25\1\0\2\25\3\0\1\6"+
    "\6\0\1\6\1\25\1\0\2\26\1\25\4\0\1\25"+
    "\3\26\1\57\23\26\2\0\1\6\3\26\1\57\6\26"+
    "\1\217\14\26\3\0\1\25\1\26\5\0\2\25\1\0"+
    "\2\25\3\0\1\6\6\0\1\6\1\25\1\0\2\26"+
    "\1\25\4\0\1\25\3\26\1\57\23\26\2\0\1\6"+
    "\3\26\1\57\14\26\1\220\6\26\3\0\1\25\1\26"+
    "\5\0\2\25\1\0\2\25\3\0\1\6\6\0\1\6"+
    "\1\25\1\0\2\26\1\25\4\0\1\25\3\26\1\57"+
    "\23\26\2\0\1\6\3\26\1\57\15\26\1\221\5\26"+
    "\3\0\1\25\1\26\5\0\2\25\1\0\2\25\3\0"+
    "\1\6\6\0\1\6\1\25\1\0\2\26\1\25\4\0"+
    "\1\25\3\26\1\57\23\26\2\0\1\6\3\26\1\57"+
    "\1\222\22\26\3\0\1\25\1\26\5\0\2\25\1\0"+
    "\2\25\3\0\1\6\6\0\1\6\1\25\1\0\2\26"+
    "\1\25\4\0\1\25\3\26\1\57\1\111\22\26\2\0"+
    "\1\6\3\26\1\57\1\111\14\26\1\223\5\26\3\0"+
    "\1\25\1\26\6\0\1\53\2\0\1\53\1\0\1\106"+
    "\2\53\1\0\2\53\3\0\1\53\2\0\3\53\5\0"+
    "\7\53\1\54\7\53\1\224\7\53\2\0\10\53\1\54"+
    "\6\53\1\224\10\53\4\0\1\53\5\0\2\25\1\0"+
    "\2\25\3\0\1\6\6\0\1\6\1\25\1\0\2\26"+
    "\1\25\4\0\1\25\3\26\1\57\23\26\2\0\1\6"+
    "\3\26\1\57\23\26\3\0\1\25\1\26\1\225\3\0"+
    "\20\152\1\226\103\152\2\0\2\25\1\0\2\25\13\0"+
    "\1\25\1\0\3\25\4\0\4\25\1\64\23\25\3\0"+
    "\3\25\1\64\23\25\3\0\2\25\1\225\14\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\3\6\1\227\23\6"+
    "\2\0\4\6\1\227\23\6\4\0\1\6\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\22\6\1\230\4\6"+
    "\2\0\22\6\1\230\5\6\4\0\1\6\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\24\6\1\231\2\6"+
    "\2\0\30\6\4\0\1\6\63\0\1\232\56\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\15\6\1\233\11\6"+
    "\2\0\15\6\1\233\12\6\4\0\1\6\54\0\1\234"+
    "\30\0\1\234\34\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\10\6\1\235\16\6\2\0\11\6\1\235\16\6"+
    "\4\0\1\6\1\236\14\0\1\6\6\0\1\6\2\0"+
    "\2\6\6\0\1\237\26\6\2\0\1\6\1\237\26\6"+
    "\4\0\1\6\15\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\6\6\1\240\20\6\2\0\7\6\1\240\20\6"+
    "\4\0\1\6\15\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\17\6\1\241\7\6\2\0\17\6\1\241\10\6"+
    "\4\0\1\6\15\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\15\6\1\242\11\6\2\0\15\6\1\242\12\6"+
    "\4\0\1\6\54\0\1\243\30\0\1\243\34\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\22\6\1\244\4\6"+
    "\2\0\22\6\1\244\5\6\4\0\1\6\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\20\6\1\245\6\6"+
    "\2\0\20\6\1\245\7\6\4\0\1\6\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\13\6\1\246\13\6"+
    "\2\0\13\6\1\246\14\6\4\0\1\6\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\1\247\26\6\2\0"+
    "\1\6\1\247\26\6\4\0\1\6\15\0\1\6\6\0"+
    "\1\6\2\0\2\6\6\0\25\6\1\250\1\6\2\0"+
    "\25\6\1\250\2\6\4\0\1\6\15\0\1\6\6\0"+
    "\1\6\2\0\2\6\6\0\22\6\1\251\4\6\2\0"+
    "\22\6\1\251\5\6\4\0\1\6\61\0\1\252\30\0"+
    "\1\252\27\0\1\6\6\0\1\6\2\0\2\6\6\0"+
    "\20\6\1\253\6\6\2\0\20\6\1\253\7\6\4\0"+
    "\1\6\45\0\1\254\31\0\1\254\103\0\1\255\30\0"+
    "\1\255\74\0\1\256\30\0\1\256\66\0\1\257\30\0"+
    "\1\257\60\0\1\260\31\0\1\260\40\0\2\25\1\0"+
    "\2\25\3\0\1\6\6\0\1\6\1\25\1\0\2\26"+
    "\1\25\4\0\1\25\3\26\1\57\23\26\2\0\1\6"+
    "\3\26\1\57\2\26\1\261\20\26\3\0\1\25\1\26"+
    "\5\0\2\25\1\0\2\25\3\0\1\6\6\0\1\6"+
    "\1\25\1\0\2\26\1\25\4\0\1\25\3\26\1\57"+
    "\23\26\2\0\1\6\3\26\1\57\14\26\1\262\6\26"+
    "\3\0\1\25\1\26\5\0\2\25\1\0\2\25\3\0"+
    "\1\6\6\0\1\6\1\25\1\0\2\26\1\25\4\0"+
    "\1\25\3\26\1\57\23\26\2\0\1\6\3\26\1\57"+
    "\13\26\1\263\7\26\3\0\1\25\1\26\5\0\2\25"+
    "\1\0\2\25\3\0\1\6\6\0\1\264\1\25\1\0"+
    "\2\26\1\25\4\0\1\25\3\26\1\57\23\26\2\0"+
    "\1\6\3\26\1\57\23\26\3\0\1\25\1\26\5\0"+
    "\2\25\1\0\2\25\3\0\1\6\6\0\1\6\1\25"+
    "\1\0\2\26\1\25\4\0\1\25\3\26\1\57\23\26"+
    "\2\0\1\6\3\26\1\57\3\26\1\265\17\26\3\0"+
    "\1\25\1\26\5\0\2\25\1\0\2\25\3\0\1\6"+
    "\6\0\1\6\1\25\1\0\2\26\1\25\4\0\1\25"+
    "\3\26\1\57\23\26\2\0\1\6\3\26\1\57\4\26"+
    "\1\266\16\26\3\0\1\25\1\26\5\0\2\25\1\0"+
    "\2\25\3\0\1\6\6\0\1\267\1\25\1\0\2\26"+
    "\1\25\4\0\1\25\3\26\1\57\23\26\2\0\1\6"+
    "\3\26\1\57\23\26\3\0\1\25\1\26\5\0\2\25"+
    "\1\0\2\25\3\0\1\6\6\0\1\6\1\25\1\0"+
    "\2\26\1\25\4\0\1\25\3\26\1\57\23\26\2\0"+
    "\1\6\3\26\1\57\3\26\1\270\17\26\3\0\1\25"+
    "\1\26\6\0\1\53\2\0\1\53\1\0\1\106\2\53"+
    "\1\0\2\53\3\0\1\53\2\0\2\53\1\271\5\0"+
    "\7\53\1\54\11\53\1\272\5\53\2\0\10\53\1\54"+
    "\10\53\1\272\6\53\4\0\1\53\1\0\1\273\51\0"+
    "\1\25\30\0\1\25\24\0\20\152\1\274\103\152\12\0"+
    "\1\6\6\0\1\6\2\0\2\6\6\0\26\6\1\275"+
    "\2\0\26\6\1\275\1\6\4\0\1\6\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\22\6\1\276\4\6"+
    "\2\0\22\6\1\276\5\6\4\0\1\6\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\24\6\1\277\2\6"+
    "\2\0\30\6\4\0\1\6\63\0\1\300\56\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\2\6\1\301\24\6"+
    "\2\0\3\6\1\301\24\6\4\0\1\6\41\0\1\302"+
    "\31\0\1\302\46\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\3\6\1\303\23\6\2\0\4\6\1\303\23\6"+
    "\4\0\1\6\15\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\23\6\1\304\3\6\2\0\23\6\1\304\4\6"+
    "\4\0\1\6\15\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\12\6\1\305\14\6\2\0\12\6\1\305\15\6"+
    "\4\0\1\6\2\0\1\306\46\0\1\306\30\0\1\306"+
    "\24\0\1\306\12\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\10\6\1\307\16\6\2\0\11\6\1\307\16\6"+
    "\4\0\1\6\1\310\14\0\1\6\6\0\1\6\2\0"+
    "\2\6\6\0\10\6\1\311\16\6\2\0\11\6\1\311"+
    "\16\6\4\0\1\6\1\312\14\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\4\6\1\313\22\6\2\0\5\6"+
    "\1\313\22\6\4\0\1\6\15\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\14\6\1\314\12\6\2\0\14\6"+
    "\1\314\13\6\4\0\1\6\15\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\22\6\1\315\4\6\2\0\22\6"+
    "\1\315\5\6\4\0\1\6\15\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\13\6\1\316\13\6\2\0\13\6"+
    "\1\316\14\6\4\0\1\6\52\0\1\317\30\0\1\317"+
    "\36\0\1\6\6\0\1\6\2\0\2\6\6\0\10\6"+
    "\1\320\16\6\2\0\11\6\1\320\16\6\4\0\1\6"+
    "\1\321\61\0\1\322\30\0\1\322\60\0\1\312\31\0"+
    "\1\312\23\0\1\312\42\0\1\323\31\0\1\323\102\0"+
    "\1\324\30\0\1\324\25\0\2\25\1\0\2\25\3\0"+
    "\1\6\6\0\1\6\1\25\1\0\2\26\1\25\4\0"+
    "\1\25\3\26\1\57\23\26\2\0\1\6\3\26\1\57"+
    "\13\26\1\325\7\26\3\0\1\25\1\26\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\27\6\2\0\6\6"+
    "\1\326\12\6\1\327\6\6\4\0\1\6\5\0\2\25"+
    "\1\0\2\25\3\0\1\6\6\0\1\6\1\25\1\0"+
    "\2\26\1\25\4\0\1\25\3\26\1\57\23\26\2\0"+
    "\1\6\3\26\1\57\15\26\1\330\5\26\3\0\1\25"+
    "\1\26\5\0\2\25\1\0\2\25\3\0\1\6\6\0"+
    "\1\6\1\25\1\0\2\26\1\25\4\0\1\25\3\26"+
    "\1\57\23\26\2\0\1\6\2\26\1\331\1\57\23\26"+
    "\3\0\1\25\1\26\15\0\1\6\6\0\1\6\2\0"+
    "\2\6\6\0\27\6\2\0\1\6\1\332\26\6\4\0"+
    "\1\6\6\0\1\53\2\0\1\53\1\0\1\106\2\53"+
    "\1\0\2\53\3\0\1\53\1\0\1\333\3\53\5\0"+
    "\7\53\1\54\17\53\2\0\10\53\1\54\17\53\4\0"+
    "\1\53\6\0\1\53\2\0\1\53\1\0\1\106\2\53"+
    "\1\0\2\53\3\0\1\53\2\0\2\53\1\271\5\0"+
    "\7\53\1\54\17\53\2\0\10\53\1\54\17\53\4\0"+
    "\1\53\31\0\1\334\77\0\20\152\1\274\10\152\1\335"+
    "\72\152\12\0\1\6\6\0\1\6\2\0\2\6\6\0"+
    "\16\6\1\336\10\6\2\0\16\6\1\336\11\6\4\0"+
    "\1\6\15\0\1\6\6\0\1\6\2\0\2\6\6\0"+
    "\1\337\26\6\2\0\1\6\1\337\26\6\4\0\1\6"+
    "\37\0\1\340\31\0\1\340\50\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\22\6\1\341\4\6\2\0\22\6"+
    "\1\341\5\6\4\0\1\6\15\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\16\6\1\342\10\6\2\0\16\6"+
    "\1\342\11\6\4\0\1\6\55\0\1\343\30\0\1\343"+
    "\33\0\1\6\6\0\1\6\2\0\2\6\6\0\17\6"+
    "\1\344\7\6\2\0\17\6\1\344\10\6\4\0\1\6"+
    "\56\0\1\345\30\0\1\345\32\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\2\6\1\346\24\6\2\0\3\6"+
    "\1\346\24\6\4\0\1\6\15\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\1\347\26\6\2\0\1\6\1\347"+
    "\26\6\4\0\1\6\15\0\1\6\6\0\1\6\2\0"+
    "\2\6\6\0\4\6\1\350\22\6\2\0\5\6\1\350"+
    "\22\6\4\0\1\6\43\0\1\351\31\0\1\351\44\0"+
    "\1\6\6\0\1\6\2\0\2\6\6\0\1\352\26\6"+
    "\2\0\1\6\1\352\26\6\4\0\1\6\37\0\1\353"+
    "\31\0\1\353\114\0\1\354\30\0\1\354\53\0\1\355"+
    "\31\0\1\355\36\0\2\25\1\0\2\25\3\0\1\6"+
    "\6\0\1\6\1\25\1\0\2\26\1\25\4\0\1\25"+
    "\3\26\1\57\23\26\2\0\1\6\3\26\1\57\11\26"+
    "\1\356\11\26\3\0\1\25\1\26\15\0\1\6\6\0"+
    "\1\6\2\0\2\6\6\0\27\6\2\0\1\6\1\357"+
    "\26\6\4\0\1\6\15\0\1\6\6\0\1\6\2\0"+
    "\2\6\6\0\27\6\2\0\11\6\1\360\16\6\4\0"+
    "\1\6\5\0\2\25\1\0\2\25\3\0\1\6\6\0"+
    "\1\6\1\25\1\0\2\26\1\25\4\0\1\25\3\26"+
    "\1\57\23\26\2\0\1\6\3\26\1\57\5\26\1\361"+
    "\15\26\3\0\1\25\1\26\15\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\27\6\2\0\13\6\1\362\14\6"+
    "\4\0\1\6\26\0\1\363\124\0\1\333\113\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\15\6\1\364\11\6"+
    "\2\0\15\6\1\364\12\6\4\0\1\6\15\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\20\6\1\365\6\6"+
    "\2\0\20\6\1\365\7\6\4\0\1\6\57\0\1\366"+
    "\30\0\1\366\31\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\15\6\1\367\11\6\2\0\15\6\1\367\12\6"+
    "\4\0\1\6\54\0\1\370\30\0\1\370\34\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\22\6\1\371\4\6"+
    "\2\0\22\6\1\371\5\6\4\0\1\6\61\0\1\372"+
    "\30\0\1\372\27\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\22\6\1\373\4\6\2\0\22\6\1\373\5\6"+
    "\4\0\1\6\15\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\20\6\1\374\6\6\2\0\20\6\1\374\7\6"+
    "\4\0\1\6\15\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\1\6\1\375\25\6\2\0\2\6\1\375\25\6"+
    "\4\0\1\6\40\0\1\376\31\0\1\376\113\0\1\377"+
    "\30\0\1\377\17\0\2\25\1\0\2\25\3\0\1\6"+
    "\6\0\1\6\1\25\1\0\2\26\1\25\4\0\1\25"+
    "\3\26\1\57\23\26\2\0\1\6\3\26\1\57\16\26"+
    "\1\u0100\4\26\3\0\1\25\1\26\15\0\1\6\6\0"+
    "\1\6\2\0\2\6\6\0\27\6\2\0\14\6\1\u0101"+
    "\13\6\4\0\1\6\15\0\1\6\6\0\1\6\2\0"+
    "\2\6\6\0\27\6\2\0\27\6\1\u0102\4\0\1\6"+
    "\15\0\1\6\6\0\1\6\2\0\2\6\6\0\27\6"+
    "\2\0\11\6\1\u0103\16\6\4\0\1\6\24\0\1\u0104"+
    "\2\0\2\u0104\6\0\27\u0104\3\0\27\u0104\22\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\10\6\1\u0105\16\6"+
    "\2\0\11\6\1\u0105\16\6\4\0\1\6\1\u0106\46\0"+
    "\1\u0106\31\0\1\u0106\23\0\1\u0106\14\0\1\6\6\0"+
    "\1\6\2\0\2\6\6\0\10\6\1\u0107\16\6\2\0"+
    "\11\6\1\u0107\16\6\4\0\1\6\1\u0108\46\0\1\u0108"+
    "\31\0\1\u0108\23\0\1\u0108\14\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\4\6\1\u0109\22\6\2\0\5\6"+
    "\1\u0109\22\6\4\0\1\6\15\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\13\6\1\u010a\13\6\2\0\13\6"+
    "\1\u010a\14\6\4\0\1\6\52\0\1\u010b\30\0\1\u010b"+
    "\26\0\2\25\1\0\2\25\3\0\1\6\6\0\1\6"+
    "\1\25\1\0\2\26\1\25\4\0\1\25\3\26\1\57"+
    "\23\26\2\0\1\6\3\26\1\57\10\26\1\u010c\12\26"+
    "\3\0\1\25\1\26\15\0\1\6\6\0\1\6\2\0"+
    "\2\6\6\0\27\6\2\0\11\6\1\u010d\16\6\4\0"+
    "\1\6\15\0\1\6\6\0\1\6\2\0\2\6\6\0"+
    "\27\6\2\0\5\6\1\u010e\22\6\4\0\1\6\15\0"+
    "\1\6\6\0\1\6\2\0\2\6\6\0\27\6\2\0"+
    "\7\6\1\u010f\20\6\4\0\1\6\4\0\2\u0110\3\0"+
    "\13\u0110\1\u0111\2\u0110\2\u0111\6\u0110\27\u0111\3\u0110\27\u0111"+
    "\10\u0110\12\0\1\6\6\0\1\6\2\0\2\6\6\0"+
    "\1\u0112\26\6\2\0\1\6\1\u0112\26\6\4\0\1\6"+
    "\37\0\1\u0113\31\0\1\u0113\50\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\15\6\1\u0114\11\6\2\0\15\6"+
    "\1\u0114\12\6\4\0\1\6\54\0\1\u0115\30\0\1\u0115"+
    "\34\0\1\6\6\0\1\6\2\0\2\6\6\0\1\u0116"+
    "\26\6\2\0\1\6\1\u0116\26\6\4\0\1\6\15\0"+
    "\1\6\6\0\1\6\2\0\2\6\6\0\4\6\1\u0117"+
    "\22\6\2\0\5\6\1\u0117\22\6\4\0\1\6\43\0"+
    "\1\u0118\31\0\1\u0118\34\0\2\25\1\0\2\25\3\0"+
    "\1\6\6\0\1\6\1\25\1\0\2\26\1\25\4\0"+
    "\1\25\3\26\1\57\23\26\2\0\1\6\3\26\1\u0119"+
    "\23\26\3\0\1\25\1\26\15\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\27\6\2\0\13\6\1\u011a\14\6"+
    "\4\0\1\6\15\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\27\6\2\0\15\6\1\u011b\12\6\4\0\1\6"+
    "\24\0\2\u011c\1\0\2\u011c\6\0\27\u011c\3\0\27\u011c"+
    "\11\0\2\u0110\3\0\13\u0110\2\u011c\1\u0110\2\u011c\6\u0110"+
    "\27\u011c\3\u0110\27\u011c\10\u0110\12\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\1\6\1\u011d\25\6\2\0\2\6"+
    "\1\u011d\25\6\4\0\1\6\40\0\1\u011e\31\0\1\u011e"+
    "\47\0\1\6\6\0\1\6\2\0\2\6\6\0\6\6"+
    "\1\u011f\20\6\2\0\7\6\1\u011f\20\6\4\0\1\6"+
    "\45\0\1\u0120\31\0\1\u0120\42\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\21\6\1\u0121\5\6\2\0\21\6"+
    "\1\u0121\6\6\4\0\1\6\1\0\1\u0122\56\0\1\u0122"+
    "\30\0\1\u0122\14\0\1\u0122\13\0\1\6\6\0\1\6"+
    "\2\0\2\6\6\0\27\6\2\0\26\6\1\u0123\1\6"+
    "\4\0\1\6\4\0\2\u0110\1\53\2\0\1\u0124\1\u0110"+
    "\1\u0125\2\u0124\1\u0110\2\u0124\3\u0110\2\u011c\1\u0124\2\u011c"+
    "\1\u0124\4\u0110\1\u0124\7\u011c\1\u0126\17\u011c\2\u0110\1\u0124"+
    "\7\u011c\1\u0126\17\u011c\4\u0110\1\u0124\3\u0110\12\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\13\6\1\u0127\13\6"+
    "\2\0\13\6\1\u0127\14\6\4\0\1\6\52\0\1\u0128"+
    "\30\0\1\u0128\36\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\2\6\1\u0129\24\6\2\0\3\6\1\u0129\24\6"+
    "\4\0\1\6\41\0\1\u012a\31\0\1\u012a\37\0\1\53"+
    "\2\0\1\53\1\0\1\106\2\53\1\0\2\53\3\0"+
    "\2\u011c\1\0\2\u011c\1\53\5\0\7\u011c\1\u0126\17\u011c"+
    "\2\0\1\53\7\u011c\1\u0126\17\u011c\4\0\1\53\4\0"+
    "\2\u0110\1\53\2\0\1\u0124\1\u0110\1\u0125\2\u0124\1\u0110"+
    "\2\u0124\3\u0110\2\u011c\1\u0124\2\u011c\1\u0124\4\u0110\1\u0124"+
    "\7\u011c\1\u0126\12\u011c\1\u012b\4\u011c\2\u0110\1\u0124\7\u011c"+
    "\1\u0126\11\u011c\1\u012b\5\u011c\4\u0110\1\u0124\3\u0110\12\0"+
    "\1\6\6\0\1\6\2\0\2\6\6\0\4\6\1\u012c"+
    "\22\6\2\0\5\6\1\u012c\22\6\4\0\1\6\43\0"+
    "\1\u012d\31\0\1\u012d\44\0\1\6\6\0\1\6\2\0"+
    "\2\6\6\0\20\6\1\u012e\6\6\2\0\20\6\1\u012e"+
    "\7\6\4\0\1\6\57\0\1\u012f\30\0\1\u012f\20\0"+
    "\2\u0110\1\53\2\0\1\u0124\1\u0110\1\u0125\2\u0124\1\u0110"+
    "\2\u0124\3\u0110\2\u011c\1\u0124\2\u011c\1\u0124\4\u0110\1\u0124"+
    "\7\u011c\1\u0126\12\u011c\1\u0130\4\u011c\2\u0110\1\u0124\7\u011c"+
    "\1\u0126\11\u011c\1\u0130\5\u011c\4\u0110\1\u0124\3\u0110\12\0"+
    "\1\6\6\0\1\6\2\0\2\6\6\0\21\6\1\u0131"+
    "\5\6\2\0\21\6\1\u0131\6\6\4\0\1\6\1\0"+
    "\1\u0132\56\0\1\u0132\30\0\1\u0132\14\0\1\u0132\13\0"+
    "\1\6\6\0\1\6\2\0\2\6\6\0\10\6\1\u0133"+
    "\16\6\2\0\11\6\1\u0133\16\6\4\0\1\6\1\u0134"+
    "\46\0\1\u0134\31\0\1\u0134\23\0\1\u0134\3\0\2\u0110"+
    "\1\53\2\0\1\u0124\1\u0110\1\u0125\2\u0124\1\u0110\2\u0124"+
    "\3\u0110\2\u011c\1\u0124\2\u011c\1\u0124\4\u0110\1\u0124\7\u011c"+
    "\1\u0126\7\u011c\1\u0135\7\u011c\2\u0110\1\u0124\7\u011c\1\u0126"+
    "\6\u011c\1\u0135\10\u011c\4\u0110\1\u0124\3\u0110\12\0\1\6"+
    "\6\0\1\6\2\0\2\6\6\0\2\6\1\u0136\24\6"+
    "\2\0\3\6\1\u0136\24\6\4\0\1\6\41\0\1\u0137"+
    "\31\0\1\u0137\46\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\17\6\1\u0138\7\6\2\0\17\6\1\u0138\10\6"+
    "\4\0\1\6\56\0\1\u0139\30\0\1\u0139\21\0\2\u0110"+
    "\1\53\2\0\1\u0124\1\u0110\1\u0125\2\u0124\1\u0110\2\u0124"+
    "\3\u0110\2\u011c\1\u0124\2\u011c\1\u013a\4\u0110\1\u0124\7\u011c"+
    "\1\u0126\11\u011c\1\u013b\5\u011c\2\u0110\1\u0124\7\u011c\1\u0126"+
    "\10\u011c\1\u013b\6\u011c\4\u0110\1\u0124\1\u0110\1\u013c\1\u0110"+
    "\12\0\1\6\6\0\1\6\2\0\2\6\6\0\20\6"+
    "\1\u013d\6\6\2\0\20\6\1\u013d\7\6\4\0\1\6"+
    "\57\0\1\u013e\30\0\1\u013e\31\0\1\6\6\0\1\6"+
    "\2\0\2\6\1\0\1\u013f\4\0\27\6\2\0\30\6"+
    "\4\0\1\6\32\0\1\u013f\100\0\1\53\2\0\1\53"+
    "\1\0\1\106\2\53\1\0\2\53\3\0\2\u011c\1\333"+
    "\2\u011c\1\53\5\0\7\u011c\1\u0126\17\u011c\2\0\1\53"+
    "\7\u011c\1\u0126\17\u011c\4\0\1\53\4\0\2\u0110\1\53"+
    "\2\0\1\u0124\1\u0110\1\u0125\2\u0124\1\u0110\2\u0124\3\u0110"+
    "\2\u011c\1\u0124\2\u011c\1\u013a\4\u0110\1\u0124\7\u011c\1\u0126"+
    "\17\u011c\2\u0110\1\u0124\7\u011c\1\u0126\17\u011c\4\u0110\1\u0124"+
    "\3\u0110\21\0\2\u011c\1\0\2\u011c\1\334\5\0\27\u011c"+
    "\3\0\27\u011c\22\0\1\6\6\0\1\6\2\0\2\6"+
    "\6\0\10\6\1\u0140\16\6\2\0\11\6\1\u0140\16\6"+
    "\4\0\1\6\1\u0141\46\0\1\u0141\31\0\1\u0141\23\0"+
    "\1\u0141\14\0\1\6\6\0\1\6\2\0\2\6\6\0"+
    "\17\6\1\u0142\7\6\2\0\17\6\1\u0142\10\6\4\0"+
    "\1\6\56\0\1\u0143\30\0\1\u0143\32\0\1\6\6\0"+
    "\1\6\2\0\2\6\1\0\1\u0144\4\0\27\6\2\0"+
    "\30\6\4\0\1\6\32\0\1\u0144\76\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21675];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\5\11\1\1\1\11\1\1\2\11"+
    "\6\1\2\11\14\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\0\1\11\2\1\1\0\3\11\21\1\2\11\1\0"+
    "\2\1\1\0\15\1\2\0\16\1\1\0\1\1\1\0"+
    "\5\1\1\0\1\1\1\0\6\1\1\0\6\1\1\0"+
    "\1\1\5\0\15\1\3\0\3\1\1\11\1\1\1\0"+
    "\1\1\1\0\4\1\1\0\6\1\1\0\1\1\1\11"+
    "\4\0\10\1\4\0\3\1\1\0\1\1\1\11\3\1"+
    "\1\11\1\1\1\0\1\1\1\0\4\1\1\0\1\1"+
    "\3\0\1\11\6\1\2\0\3\1\1\0\2\1\1\0"+
    "\1\1\1\0\3\1\1\11\1\1\1\0\1\11\1\0"+
    "\5\1\1\0\2\1\1\0\1\1\1\11\1\1\1\0"+
    "\3\1\1\0\1\11\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\4\1\2\0\1\1\1\0\1\1"+
    "\1\0\2\1\1\0\3\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\2\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\4\0\1\1"+
    "\1\0\1\11\1\1\1\0\1\1\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[324];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorCom> erroresCom;

    private void error(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","Simbolo no existe en el lenguaje",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme,""));
    }    

    private void errorPrueba(String lexeme, String tipo) {
        erroresCom.add(new ErrorCom("PRUEBA",tipo,String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme,""));
    }

    public List<ErrorCom> getErroresCom() {
        return erroresCom;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerInsert(java.io.Reader in) {
      erroresCom = new ArrayList<>();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(symTI.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error(yytext()); new Symbol(symTI.error,yyline,yycolumn, yytext());
            }
            // fall through
          case 66: break;
          case 2:
            { 
            }
            // fall through
          case 67: break;
          case 3:
            { return new Symbol(symTI.EXCL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 68: break;
          case 4:
            { return new Symbol(symTI.IDET,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 69: break;
          case 5:
            { return new Symbol(symTI.PARI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 70: break;
          case 6:
            { return new Symbol(symTI.PARD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 71: break;
          case 7:
            { return new Symbol(symTI.MULT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 72: break;
          case 8:
            { return new Symbol(symTI.SUMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 73: break;
          case 9:
            { return new Symbol(symTI.COMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 74: break;
          case 10:
            { return new Symbol(symTI.RESTA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 75: break;
          case 11:
            { return new Symbol(symTI.BARRA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 76: break;
          case 12:
            { return new Symbol(symTI.DOSPUNT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 77: break;
          case 13:
            { return new Symbol(symTI.PUNTCOMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 78: break;
          case 14:
            { return new Symbol(symTI.MEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 79: break;
          case 15:
            { return new Symbol(symTI.IGUAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 80: break;
          case 16:
            { return new Symbol(symTI.MAY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 81: break;
          case 17:
            { return new Symbol(symTI.PALABRAS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 82: break;
          case 18:
            { return new Symbol(symTI.CORCHCUADI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 83: break;
          case 19:
            { return new Symbol(symTI.CORCHCUADD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 84: break;
          case 20:
            { return new Symbol(symTI.CORCHI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 85: break;
          case 21:
            { return new Symbol(symTI.CORCHD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 86: break;
          case 22:
            { return new Symbol(symTI.DIFER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 87: break;
          case 23:
            { return new Symbol(symTI.AND,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 88: break;
          case 24:
            { return new Symbol(symTI.MENIG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 89: break;
          case 25:
            { return new Symbol(symTI.DOBIGUAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 90: break;
          case 26:
            { return new Symbol(symTI.MAYIG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 91: break;
          case 27:
            { return new Symbol(symTI.IDETIQUETA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 92: break;
          case 28:
            { return new Symbol(symTI.OR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 93: break;
          case 29:
            { return new Symbol(symTI.VALP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 94: break;
          case 30:
            { return new Symbol(symTI.DECIM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 95: break;
          case 31:
            { return new Symbol(symTI.PAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 96: break;
          case 32:
            { return new Symbol(symTI.ALT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 97: break;
          case 33:
            { return new Symbol(symTI.SRC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 34:
            { return new Symbol(symTI.BR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 35:
            { return new Symbol(symTI.H1,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 36:
            { return new Symbol(symTI.COLS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 37:
            { return new Symbol(symTI.HREF,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 38:
            { return new Symbol(symTI.NAME,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 39:
            { return new Symbol(symTI.ROWS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 40:
            { return new Symbol(symTI.TYPE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 41:
            { return new Symbol(symTI.DIV,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 42:
            { return new Symbol(symTI.IMG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 43:
            { return new Symbol(symTI.CLASS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 44:
            { return new Symbol(symTI.COLOR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 45:
            { return new Symbol(symTI.WIDTH,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 46:
            { return new Symbol(symTI.BODY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 47:
            { return new Symbol(symTI.GCIC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 48:
            { return new Symbol(symTI.HEAD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 49:
            { return new Symbol(symTI.LINK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 50:
            { return new Symbol(symTI.SPAM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 51:
            { return new Symbol(symTI.HEIGHT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 52:
            { return new Symbol(symTI.INPUT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 53:
            { return new Symbol(symTI.TITLE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 54:
            { return new Symbol(symTI.ONCLICK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 55:
            { return new Symbol(symTI.BUTTON,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 56:
            { return new Symbol(symTI.OPTION,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 57:
            { return new Symbol(symTI.SELECT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 58:
            { return new Symbol(symTI.FSIZE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 59:
            { return new Symbol(symTI.TEXTAREA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 60:
            { return new Symbol(symTI.BACK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 61:
            { return new Symbol(symTI.TEXTALIGN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 62:
            { return new Symbol(symTI.SCRIPTING,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 63:
            { return new Symbol(symTI.FFAMILY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 64:
            { return new Symbol(symTI.VARIABLESCRIP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 65:
            { return new Symbol(symTI.FINVARIABLESCRIP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerInsert [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerInsert scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerInsert(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
