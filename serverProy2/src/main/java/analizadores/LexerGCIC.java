// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: LexerGCIC.jflex

package analizadores;
import java_cup.runtime.*; 
import analizadores.symG.*;
import java.util.List;
import java.util.ArrayList;
import objetos.ErrorCom;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class LexerGCIC implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\2\1\1\2\1\3\2\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\0\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\0\1\22\1\23\1\24"+
    "\10\23\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\45\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\45\1\64\1\0\1\65\1\0\1\66\1\0"+
    "\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\45\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\45\1\106\1\107\1\110\1\111\1\60\1\112\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\7\0\1\3\72\0"+
    "\100\121\60\0\2\122\115\0\1\123\u01a8\0\2\3\u0100\0"+
    "\1\124\325\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\4\1\14"+
    "\1\15\1\16\1\17\1\20\1\1\22\4\1\21\1\22"+
    "\14\4\1\23\1\1\1\24\2\1\21\0\1\2\1\25"+
    "\2\0\1\26\2\0\1\27\3\4\1\0\1\30\1\31"+
    "\1\32\1\0\1\27\2\4\1\0\13\4\1\33\21\4"+
    "\1\34\7\4\1\35\1\33\24\0\1\36\1\0\1\37"+
    "\5\40\2\0\1\4\2\41\12\4\1\42\2\4\2\0"+
    "\2\4\1\0\1\4\1\0\1\43\1\4\1\0\3\4"+
    "\1\33\3\4\2\0\12\4\1\0\1\44\11\4\1\45"+
    "\3\4\7\0\1\43\15\0\1\4\1\41\2\4\1\46"+
    "\1\4\1\47\2\4\1\0\1\4\1\50\4\4\1\0"+
    "\6\4\6\0\1\4\1\0\2\51\2\52\1\43\2\53"+
    "\1\4\1\0\2\4\1\54\2\4\1\54\1\0\2\4"+
    "\1\0\6\4\1\0\1\55\1\56\1\4\1\0\3\4"+
    "\1\57\2\4\1\60\1\61\1\4\1\62\1\4\1\63"+
    "\1\4\4\0\1\46\7\0\1\55\1\56\3\0\3\4"+
    "\1\46\2\4\2\64\1\4\1\0\1\4\1\65\2\4"+
    "\1\0\6\4\1\0\1\65\4\0\1\4\1\0\1\51"+
    "\3\52\1\53\2\66\2\4\1\0\1\54\2\4\1\0"+
    "\2\4\1\0\6\4\1\0\2\55\1\4\1\56\2\67"+
    "\1\4\1\70\1\71\4\4\1\72\20\0\3\4\1\73"+
    "\1\4\2\74\1\75\1\4\2\76\1\4\1\0\1\4"+
    "\1\0\1\4\1\77\2\4\3\0\1\77\1\4\1\0"+
    "\1\52\1\27\1\0\1\66\1\4\2\100\1\101\1\4"+
    "\1\101\2\4\1\0\3\4\1\0\1\102\1\4\1\0"+
    "\2\103\1\4\1\67\3\4\1\104\2\4\10\0\1\102"+
    "\2\0\1\2\1\105\1\4\1\0\1\106\2\4\1\107"+
    "\1\4\1\0\1\4\1\0\2\4\2\110\1\107\1\0"+
    "\2\111\2\112\1\4\1\100\1\101\1\113\2\4\1\0"+
    "\1\4\1\114\1\4\1\0\1\102\2\115\1\103\1\4"+
    "\1\0\3\4\1\116\1\4\1\113\1\106\4\0\1\114"+
    "\1\0\1\4\1\0\1\106\1\4\1\117\2\120\1\4"+
    "\1\0\1\121\1\4\1\121\1\111\1\4\1\113\2\4"+
    "\1\0\2\4\1\0\1\115\1\4\1\0\4\4\5\0"+
    "\1\4\1\0\2\4\1\0\4\4\1\0\1\4\2\122"+
    "\2\123\2\4\1\124\1\4\6\0\2\125\2\4\1\0"+
    "\1\126\2\4\1\127\1\0\1\4\1\123\1\130\1\4"+
    "\1\131\2\0\1\127\2\0\1\4\2\132\2\4\1\0"+
    "\1\4\1\133\4\0\1\36\1\0\2\4\1\0\2\134"+
    "\1\4\3\0\1\4\2\135\2\136\2\0\1\4\1\135"+
    "\2\0\1\4\4\0\1\4\1\0\1\4\1\0\2\137";

  private static int [] zzUnpackAction() {
    int [] result = new int[661];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\125\0\252\0\377\0\u0154\0\u01a9\0\u01fe\0\u0253"+
    "\0\125\0\125\0\125\0\125\0\125\0\u01a9\0\125\0\u02a8"+
    "\0\125\0\125\0\u02fd\0\u0352\0\u03a7\0\u03fc\0\u0451\0\u04a6"+
    "\0\u04fb\0\u0550\0\u05a5\0\u05fa\0\u064f\0\u06a4\0\u06f9\0\u074e"+
    "\0\u07a3\0\u07f8\0\u084d\0\u08a2\0\u08f7\0\u094c\0\u09a1\0\u09f6"+
    "\0\125\0\125\0\u0a4b\0\u0aa0\0\u0af5\0\u0b4a\0\u0b9f\0\u0bf4"+
    "\0\u0c49\0\u0c9e\0\u0cf3\0\u0d48\0\u0d9d\0\u0df2\0\125\0\u0e47"+
    "\0\125\0\u0e9c\0\u0ef1\0\u03fc\0\u0f46\0\u0f9b\0\u0ff0\0\u1045"+
    "\0\u109a\0\u10ef\0\u1144\0\u1199\0\u0e9c\0\u11ee\0\u1243\0\u1298"+
    "\0\u12ed\0\u0ef1\0\u1342\0\u1397\0\u13ec\0\125\0\u1441\0\u1496"+
    "\0\125\0\u14eb\0\u1540\0\u1595\0\u15ea\0\u163f\0\u1694\0\u16e9"+
    "\0\125\0\125\0\125\0\u173e\0\u1793\0\u17e8\0\u183d\0\u1892"+
    "\0\u18e7\0\u193c\0\u1991\0\u19e6\0\u1a3b\0\u1a90\0\u1ae5\0\u1b3a"+
    "\0\u1b8f\0\u1be4\0\u1c39\0\u1c8e\0\u1ce3\0\u1d38\0\u1d8d\0\u1de2"+
    "\0\u1e37\0\u1e8c\0\u1ee1\0\u1f36\0\u1f8b\0\u1fe0\0\u2035\0\u208a"+
    "\0\u20df\0\u2134\0\u2189\0\u21de\0\u2233\0\u074e\0\u2288\0\u22dd"+
    "\0\u2332\0\u2387\0\u23dc\0\u2431\0\u2486\0\125\0\u24db\0\u2530"+
    "\0\u2585\0\u25da\0\u262f\0\u2684\0\u26d9\0\u272e\0\u2783\0\u27d8"+
    "\0\u282d\0\u2882\0\u28d7\0\u292c\0\u2981\0\u29d6\0\u2a2b\0\u2a80"+
    "\0\u2ad5\0\u2b2a\0\u2b7f\0\125\0\u2bd4\0\125\0\u1540\0\u1595"+
    "\0\u15ea\0\u163f\0\u1694\0\u2c29\0\u2c7e\0\u2cd3\0\u2d28\0\u2d7d"+
    "\0\u2dd2\0\u2e27\0\u2e7c\0\u2ed1\0\u2f26\0\u2f7b\0\u2fd0\0\u3025"+
    "\0\u307a\0\u30cf\0\u01a9\0\u3124\0\u3179\0\u31ce\0\u3223\0\u3278"+
    "\0\u32cd\0\u3322\0\u3377\0\u33cc\0\u3421\0\u3476\0\u34cb\0\u3520"+
    "\0\u3575\0\u35ca\0\u361f\0\u3674\0\u36c9\0\u371e\0\u3773\0\u37c8"+
    "\0\u381d\0\u3872\0\u38c7\0\u391c\0\u3971\0\u39c6\0\u3a1b\0\u3a70"+
    "\0\u3ac5\0\u3b1a\0\u3b6f\0\u074e\0\u3bc4\0\u3c19\0\u3c6e\0\u3cc3"+
    "\0\u3d18\0\u3d6d\0\u3dc2\0\u3e17\0\u3e6c\0\u074e\0\u3ec1\0\u3f16"+
    "\0\u3f6b\0\u3fc0\0\u4015\0\u406a\0\u40bf\0\u4114\0\u4169\0\u41be"+
    "\0\u4213\0\u4268\0\u42bd\0\u4312\0\u4367\0\u43bc\0\u4411\0\u4466"+
    "\0\u44bb\0\u4510\0\u4565\0\u45ba\0\u460f\0\u4664\0\u46b9\0\u470e"+
    "\0\u4763\0\u47b8\0\u480d\0\u4862\0\u01a9\0\u48b7\0\u490c\0\u4961"+
    "\0\u49b6\0\u01a9\0\u4a0b\0\u4a60\0\u4ab5\0\u4b0a\0\u4b5f\0\u4bb4"+
    "\0\u4c09\0\u4c5e\0\u4cb3\0\u4d08\0\u4d5d\0\u4db2\0\u4e07\0\u4e5c"+
    "\0\u4eb1\0\u4f06\0\u4f5b\0\u4fb0\0\u5005\0\u505a\0\u50af\0\u5104"+
    "\0\u5159\0\u51ae\0\u5203\0\u5258\0\u52ad\0\u5302\0\u5357\0\u53ac"+
    "\0\u5401\0\u5456\0\u54ab\0\u5500\0\u5555\0\u55aa\0\u55ff\0\u5654"+
    "\0\u56a9\0\u56fe\0\u5753\0\u57a8\0\u57fd\0\u5852\0\u58a7\0\u58fc"+
    "\0\u5951\0\u59a6\0\u59fb\0\u5a50\0\u5aa5\0\u5afa\0\u074e\0\u5b4f"+
    "\0\u5ba4\0\u074e\0\u074e\0\u5bf9\0\u074e\0\u5c4e\0\u074e\0\u5ca3"+
    "\0\u5cf8\0\u5d4d\0\u5da2\0\u5df7\0\u5e4c\0\u5ea1\0\u5ef6\0\u5f4b"+
    "\0\u5fa0\0\u5ff5\0\u604a\0\u609f\0\u60f4\0\u6149\0\u619e\0\u61f3"+
    "\0\u6248\0\u629d\0\u62f2\0\u6347\0\u639c\0\u63f1\0\u6446\0\u01a9"+
    "\0\125\0\u649b\0\u64f0\0\u6545\0\u01a9\0\u659a\0\u65ef\0\u6644"+
    "\0\u6699\0\u66ee\0\u6743\0\u6798\0\u67ed\0\u6842\0\u6897\0\125"+
    "\0\u68ec\0\u6941\0\u6996\0\u69eb\0\u6a40\0\u6a95\0\u6aea\0\u6b3f"+
    "\0\u6b94\0\u6be9\0\u6c3e\0\u6c93\0\u6ce8\0\u6d3d\0\u6d92\0\u6de7"+
    "\0\u6e3c\0\u6e91\0\u6ee6\0\u6f3b\0\u6f90\0\u6fe5\0\u703a\0\u708f"+
    "\0\u70e4\0\u7139\0\u718e\0\u71e3\0\u7238\0\u728d\0\u72e2\0\u7337"+
    "\0\u738c\0\u73e1\0\u7436\0\u748b\0\u74e0\0\u074e\0\u074e\0\u7535"+
    "\0\u758a\0\u75df\0\u7634\0\u074e\0\u7689\0\u76de\0\u7733\0\u7788"+
    "\0\u77dd\0\u7832\0\u7887\0\u78dc\0\u7931\0\u7986\0\u79db\0\u7a30"+
    "\0\u7a85\0\u7ada\0\u7b2f\0\u7b84\0\u7bd9\0\u7c2e\0\u7c83\0\u01a9"+
    "\0\u7cd8\0\u01a9\0\125\0\u01a9\0\u7d2d\0\u01a9\0\125\0\u7d82"+
    "\0\u7dd7\0\u7e2c\0\u7e81\0\u7ed6\0\u01a9\0\u7f2b\0\u7f80\0\u7fd5"+
    "\0\u802a\0\u807f\0\125\0\u80d4\0\u8129\0\u817e\0\u81d3\0\u8228"+
    "\0\u827d\0\u82d2\0\u8327\0\u837c\0\u83d1\0\u8426\0\u847b\0\u84d0"+
    "\0\u8525\0\u857a\0\u85cf\0\u8624\0\u8679\0\u86ce\0\u8723\0\u8778"+
    "\0\u87cd\0\u8822\0\u8877\0\u88cc\0\u8921\0\u8976\0\u89cb\0\u8a20"+
    "\0\u074e\0\u8a75\0\u8aca\0\u8b1f\0\u8b74\0\u8bc9\0\u8c1e\0\u8c73"+
    "\0\u8cc8\0\u8d1d\0\u8d72\0\u8dc7\0\u8e1c\0\u8e71\0\125\0\u8ec6"+
    "\0\u8f1b\0\u8f70\0\u8fc5\0\u901a\0\u906f\0\u01a9\0\u90c4\0\u9119"+
    "\0\u916e\0\u91c3\0\u9218\0\u926d\0\u01a9\0\125\0\125\0\u92c2"+
    "\0\u9317\0\u936c\0\u93c1\0\u9416\0\u946b\0\u94c0\0\u9515\0\u956a"+
    "\0\u95bf\0\u9614\0\u9669\0\u96be\0\u9713\0\u9768\0\u97bd\0\u9812"+
    "\0\u9867\0\u98bc\0\u9911\0\u9966\0\u99bb\0\u9a10\0\u9a65\0\u9aba"+
    "\0\u074e\0\u9b0f\0\u9b64\0\u9bb9\0\u9c0e\0\u9c63\0\u9cb8\0\u9d0d"+
    "\0\u9d62\0\u9db7\0\u9e0c\0\u9e61\0\u9eb6\0\u9f0b\0\u01a9\0\u01a9"+
    "\0\125\0\u9f60\0\u9fb5\0\u01a9\0\ua00a\0\125\0\ua05f\0\ua0b4"+
    "\0\ua109\0\ua15e\0\ua1b3\0\ua208\0\ua25d\0\ua2b2\0\ua307\0\ua35c"+
    "\0\ua3b1\0\ua406\0\ua45b\0\ua4b0\0\ua505\0\ua55a\0\ua5af\0\ua604"+
    "\0\ua659\0\ua6ae\0\ua703\0\ua758\0\ua7ad\0\ua802\0\ua857\0\ua8ac"+
    "\0\ua901\0\ua956\0\ua9ab\0\uaa00\0\uaa55\0\uaaaa\0\ua2b2\0\ua307"+
    "\0\uaaff\0\uab54\0\uaba9\0\uabfe\0\u01a9\0\uac53\0\uaca8\0\uacfd"+
    "\0\uad52\0\uada7\0\uadfc\0\uae51\0\uaea6\0\uaefb\0\uaf50\0\uafa5"+
    "\0\uaffa\0\u01a9\0\ub04f\0\ub0a4\0\ub0f9\0\ub14e\0\ub1a3\0\ub1f8"+
    "\0\u074e\0\ub24d\0\u01a9\0\ub2a2\0\ub2f7\0\ub34c\0\ub3a1\0\ub3f6"+
    "\0\ub44b\0\u01a9\0\125\0\ub4a0\0\ub4f5\0\ub54a\0\ub59f\0\u01a9"+
    "\0\ub5f4\0\ub649\0\ub69e\0\ub6f3\0\uadfc\0\ub748\0\ub79d\0\ub7f2"+
    "\0\ub847\0\ub89c\0\ub8f1\0\ub946\0\ub99b\0\ub9f0\0\uba45\0\uba9a"+
    "\0\ubaef\0\ubb44\0\ubb99\0\ubbee\0\ubc43\0\ubc98\0\ubced\0\ubd42"+
    "\0\ubd97\0\ubdec\0\ube41\0\ube96\0\ubeeb\0\ubf40\0\ubf95\0\ubfea"+
    "\0\uc03f\0\uc094\0\uc0e9\0\uc13e\0\uc193";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[661];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\2\3\1\4\1\5\1\2\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\2\20\1\21\1\22\1\23\1\24\1\25\1\2"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\2\40\1\41\1\40\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\2\40\1\50\2\40\1\51\1\52"+
    "\1\6\1\53\1\54\1\55\1\32\1\33\1\56\1\35"+
    "\1\57\1\60\1\40\1\41\1\40\1\61\1\62\1\44"+
    "\1\63\1\64\1\65\1\40\1\66\3\40\1\67\1\70"+
    "\1\71\1\40\1\72\1\73\1\2\126\0\2\3\1\0"+
    "\2\3\25\0\1\74\1\75\1\76\1\77\1\100\1\101"+
    "\1\102\1\103\1\104\1\105\2\0\1\106\1\0\1\107"+
    "\1\110\1\0\1\111\1\112\1\113\2\0\1\114\5\0"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\0\1\106\1\0\1\107\1\110\1\0\1\111"+
    "\1\112\1\113\1\0\1\114\7\0\1\105\1\112\7\0"+
    "\1\115\21\0\1\116\76\0\1\117\2\0\1\117\2\0"+
    "\2\117\2\0\2\117\3\0\1\117\1\0\2\117\7\0"+
    "\7\117\1\120\20\117\2\0\10\117\1\120\17\117\3\0"+
    "\1\117\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\30\6\2\0\30\6\3\0\1\6\15\0\1\121\117\0"+
    "\1\122\3\0\1\122\7\0\4\122\2\0\3\122\2\0"+
    "\62\122\3\0\1\122\3\0\2\123\3\0\1\124\3\123"+
    "\1\125\7\123\1\125\1\123\2\126\7\123\30\127\2\123"+
    "\1\125\27\127\3\123\1\127\3\123\6\0\1\130\21\0"+
    "\1\131\124\0\1\132\124\0\1\133\136\0\1\134\32\0"+
    "\1\134\34\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\13\40\1\136\5\40\1\137\6\40\2\0"+
    "\1\6\12\40\1\136\5\40\1\137\6\40\3\0\1\40"+
    "\1\0\1\140\6\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\16\40\1\141\11\40\2\0\1\6"+
    "\15\40\1\141\11\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\1\142\6\40"+
    "\1\143\20\40\2\0\1\144\1\142\6\40\1\143\17\40"+
    "\3\0\1\40\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\4\40\1\145\23\40\2\0\1\6"+
    "\4\40\1\145\22\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\13\40\1\146"+
    "\1\40\1\147\10\40\1\150\1\40\2\0\1\6\12\40"+
    "\1\146\1\40\1\147\7\40\1\150\2\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\1\151\27\40\2\0\1\6\1\151\26\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\4\40\1\152\23\40\2\0\1\6\4\40"+
    "\1\152\22\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\23\40\1\153\4\40"+
    "\2\0\1\6\22\40\1\153\4\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\5\40\1\154\7\40\1\155\12\40\2\0\1\6\5\40"+
    "\1\154\6\40\1\155\12\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\27\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\4\40\1\156"+
    "\23\40\2\0\1\6\4\40\1\156\22\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\23\40\1\157\4\40\2\0\1\6\22\40\1\157"+
    "\4\40\3\0\1\40\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\15\40\1\160\12\40\2\0"+
    "\1\6\14\40\1\160\12\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\20\40"+
    "\1\161\7\40\2\0\1\6\17\40\1\161\7\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\4\40\1\162\23\40\2\0\1\6\4\40"+
    "\1\162\22\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\22\40\1\163\5\40"+
    "\2\0\1\6\21\40\1\163\5\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\7\40\1\164\10\40\1\165\7\40\2\0\1\6\7\40"+
    "\1\164\7\40\1\165\7\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\7\40"+
    "\1\166\20\40\2\0\1\6\7\40\1\166\17\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\13\40\1\136\5\40\1\137\6\40\2\0"+
    "\1\6\12\40\1\167\5\40\1\137\6\40\3\0\1\40"+
    "\1\0\1\140\6\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\16\40\1\141\11\40\2\0\1\6"+
    "\1\170\14\40\1\141\11\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\1\142"+
    "\6\40\1\143\20\40\2\0\1\144\1\142\6\40\1\143"+
    "\2\40\1\171\2\40\1\172\11\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\1\151\27\40\2\0\1\6\1\151\14\40\1\173\11\40"+
    "\3\0\1\40\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\23\40\1\153\4\40\2\0\1\6"+
    "\4\40\1\174\12\40\1\175\2\40\1\153\4\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\5\40\1\154\7\40\1\155\12\40\2\0"+
    "\1\6\3\40\1\176\1\40\1\154\6\40\1\155\12\40"+
    "\3\0\1\40\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\23\40\1\157\4\40\2\0\1\6"+
    "\1\177\21\40\1\157\4\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\15\40"+
    "\1\160\12\40\2\0\1\6\14\40\1\200\12\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\4\40\1\162\23\40\2\0\1\6\4\40"+
    "\1\162\10\40\1\201\11\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\22\40"+
    "\1\163\5\40\2\0\1\6\17\40\1\202\1\40\1\163"+
    "\5\40\3\0\1\40\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\7\40\1\164\10\40\1\165"+
    "\7\40\2\0\1\6\4\40\1\203\2\40\1\164\7\40"+
    "\1\165\5\40\1\204\1\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\7\40"+
    "\1\166\20\40\2\0\1\6\7\40\1\166\1\205\16\40"+
    "\3\0\1\40\122\0\1\206\46\0\1\207\7\0\1\210"+
    "\22\0\1\207\6\0\1\210\77\0\1\211\31\0\1\211"+
    "\63\0\1\212\5\0\1\140\23\0\1\212\5\0\1\140"+
    "\13\0\1\140\53\0\1\213\31\0\1\213\54\0\1\214"+
    "\6\0\1\215\23\0\1\214\6\0\1\215\66\0\1\216"+
    "\32\0\1\216\100\0\1\217\1\0\1\220\10\0\1\221"+
    "\16\0\1\217\1\0\1\220\7\0\1\221\45\0\1\222"+
    "\32\0\1\222\75\0\1\223\32\0\1\223\110\0\1\224"+
    "\31\0\1\224\53\0\1\225\32\0\1\225\110\0\1\226"+
    "\31\0\1\226\64\0\1\227\31\0\1\227\61\0\1\230"+
    "\32\0\1\230\74\0\1\231\10\0\1\232\21\0\1\231"+
    "\7\0\1\232\61\0\1\233\32\0\1\233\33\0\1\115"+
    "\15\0\2\115\7\0\30\115\3\0\27\115\11\0\1\117"+
    "\2\0\1\117\1\0\1\234\2\117\2\0\2\117\3\0"+
    "\1\117\1\0\2\117\7\0\7\117\1\120\20\117\2\0"+
    "\10\117\1\120\17\117\3\0\1\117\5\0\1\117\2\0"+
    "\1\117\1\0\1\234\2\117\2\0\2\117\3\0\1\117"+
    "\1\0\2\117\7\0\7\117\1\120\12\117\1\235\5\117"+
    "\2\0\10\117\1\120\11\117\1\235\5\117\3\0\1\117"+
    "\10\0\1\122\3\0\1\122\1\0\1\236\5\0\4\122"+
    "\2\0\3\122\2\0\62\122\3\0\1\122\26\0\2\237"+
    "\105\0\1\135\15\0\2\240\7\0\30\135\3\0\27\135"+
    "\3\0\1\135\14\0\1\6\7\0\1\6\1\0\2\241"+
    "\7\0\30\6\2\0\30\6\3\0\1\6\3\0\2\123"+
    "\3\0\1\124\3\123\1\125\7\123\1\125\1\123\2\242"+
    "\7\123\30\127\2\123\1\125\27\127\3\123\1\127\3\123"+
    "\5\0\1\135\3\0\1\6\7\0\1\6\1\0\2\243"+
    "\7\0\30\40\2\0\1\6\27\40\3\0\1\40\24\0"+
    "\1\244\152\0\1\245\31\0\1\245\30\0\1\135\15\0"+
    "\2\135\7\0\30\135\3\0\27\135\3\0\1\135\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\4\40\1\246\23\40\2\0\1\6\4\40\1\246\22\40"+
    "\3\0\1\40\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\2\40\1\247\25\40\2\0\1\6"+
    "\2\40\1\247\24\40\3\0\1\40\41\0\1\250\32\0"+
    "\1\250\40\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\16\40\1\251\11\40\2\0\1\6\15\40"+
    "\1\251\11\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\20\40\1\252\7\40"+
    "\2\0\1\6\17\40\1\252\7\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\1\253\27\40\2\0\1\6\1\253\26\40\3\0\1\40"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\1\6"+
    "\1\254\1\6\1\255\2\6\1\256\1\257\1\260\2\6"+
    "\1\261\2\6\1\262\1\263\1\6\1\264\1\265\5\6"+
    "\2\0\2\6\1\254\1\6\1\255\2\6\1\256\1\257"+
    "\1\260\1\6\1\261\2\6\1\262\1\263\1\6\1\264"+
    "\1\265\5\6\3\0\1\6\1\266\1\267\6\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\2\40"+
    "\1\270\16\40\1\271\6\40\2\0\1\6\2\40\1\270"+
    "\15\40\1\271\6\40\3\0\1\40\1\0\1\272\6\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\21\40\1\273\6\40\2\0\1\6\20\40\1\273\6\40"+
    "\3\0\1\40\1\0\1\274\6\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\3\40\1\275\24\40"+
    "\2\0\1\6\3\40\1\275\23\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\10\40\1\276\17\40\2\0\1\6\10\40\1\276\16\40"+
    "\3\0\1\40\1\277\7\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\13\40\1\300\14\40\2\0"+
    "\1\6\12\40\1\300\14\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\22\40"+
    "\1\301\5\40\2\0\1\6\21\40\1\301\5\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\15\40\1\302\12\40\2\0\1\6\14\40"+
    "\1\302\12\40\3\0\1\40\4\0\2\207\1\0\1\207"+
    "\1\303\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\27\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\10\40"+
    "\1\304\10\40\1\305\1\306\5\40\2\0\1\6\10\40"+
    "\1\304\7\40\1\305\1\306\5\40\3\0\1\40\1\307"+
    "\1\310\6\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\22\40\1\311\5\40\2\0\1\6\21\40"+
    "\1\311\5\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\14\40\1\312\13\40"+
    "\2\0\1\6\13\40\1\312\13\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\313\27\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\16\40"+
    "\1\314\11\40\2\0\1\6\15\40\1\314\11\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\17\40\1\315\4\40\1\316\3\40\2\0"+
    "\1\6\16\40\1\315\10\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\20\40"+
    "\1\317\7\40\2\0\1\6\17\40\1\317\7\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\4\40\1\320\23\40\2\0\1\6\4\40"+
    "\1\320\22\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\23\40\1\321\4\40"+
    "\2\0\1\6\22\40\1\321\4\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\10\40\1\322\17\40\2\0\1\6\10\40\1\322\16\40"+
    "\3\0\1\40\1\323\7\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\4\40\1\246\23\40\2\0"+
    "\1\6\4\40\1\246\14\40\1\324\5\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\2\40\1\325\24\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\1\326\26\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\12\40\1\327\14\40"+
    "\3\0\1\40\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\14\40\1\330"+
    "\12\40\3\0\1\40\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\10\40"+
    "\1\331\16\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\4\40\1\332\22\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\13\40\1\333\13\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\313\2\40\1\334\24\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\23\40\1\335\3\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\2\40\1\336\24\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\24\40\1\337\2\40"+
    "\3\0\1\40\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\16\40\1\340"+
    "\10\40\3\0\1\40\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\3\40"+
    "\1\341\23\40\3\0\1\40\4\0\2\207\1\0\2\207"+
    "\163\0\1\307\10\0\1\310\1\342\20\0\1\307\7\0"+
    "\1\310\1\342\11\0\1\307\1\310\55\0\1\343\31\0"+
    "\1\343\56\0\1\344\32\0\1\344\103\0\1\345\31\0"+
    "\1\345\74\0\1\346\31\0\1\346\52\0\1\347\32\0"+
    "\1\347\73\0\1\350\16\0\1\272\13\0\1\350\15\0"+
    "\1\272\13\0\1\272\56\0\1\274\31\0\1\274\13\0"+
    "\1\274\40\0\1\351\32\0\1\351\76\0\1\277\32\0"+
    "\1\277\22\0\1\277\51\0\1\352\31\0\1\352\101\0"+
    "\1\353\31\0\1\353\65\0\1\354\31\0\1\354\77\0"+
    "\1\355\31\0\1\355\64\0\1\356\31\0\1\356\110\0"+
    "\1\357\111\0\1\360\4\0\1\361\24\0\1\360\57\0"+
    "\1\362\32\0\1\362\110\0\1\363\31\0\1\363\57\0"+
    "\1\323\32\0\1\323\22\0\1\323\4\0\1\117\2\0"+
    "\1\117\1\0\1\234\2\117\2\0\2\117\3\0\1\117"+
    "\1\0\2\117\7\0\7\117\1\120\12\117\1\364\5\117"+
    "\2\0\10\117\1\120\11\117\1\364\5\117\3\0\1\117"+
    "\24\0\1\365\155\0\1\366\31\0\1\366\25\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\20\40"+
    "\1\367\7\40\2\0\1\6\17\40\1\367\7\40\3\0"+
    "\1\40\4\0\2\250\1\0\1\250\1\370\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\27\40\3\0\1\40\4\0\2\250\1\0\2\250\124\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\13\40\1\371\14\40\2\0\1\6\12\40\1\371\14\40"+
    "\3\0\1\40\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\1\372\27\40\2\0\1\6\1\372"+
    "\26\40\3\0\1\40\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\20\40\1\373\7\40\2\0"+
    "\1\6\17\40\1\373\7\40\3\0\1\40\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\16\6\1\374\1\6"+
    "\1\375\2\6\1\376\4\6\2\0\16\6\1\374\1\6"+
    "\1\375\2\6\1\376\4\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\10\6\1\377\17\6"+
    "\2\0\11\6\1\377\16\6\3\0\1\6\1\u0100\13\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\2\6\1\u0101"+
    "\25\6\2\0\3\6\1\u0101\24\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\1\6\1\u0102\7\0\4\6"+
    "\1\u0103\23\6\2\0\5\6\1\u0103\22\6\3\0\1\6"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\14\6"+
    "\1\u0104\1\u0105\12\6\2\0\14\6\1\u0104\1\u0105\12\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\10\6\1\u0106\17\6\2\0\11\6\1\u0106\16\6"+
    "\3\0\1\6\1\u0107\13\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\17\6\1\u0108\10\6\2\0\17\6\1\u0108"+
    "\10\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\2\6\1\u0109\1\6\1\u010a\12\6\1\u010b"+
    "\10\6\2\0\3\6\1\u0109\1\6\1\u010a\11\6\1\u010b"+
    "\10\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\4\6\1\u010c\3\6\1\u010d\17\6\2\0"+
    "\5\6\1\u010c\3\6\1\u010d\16\6\3\0\1\6\1\u010e"+
    "\52\0\1\u010f\1\u0110\30\0\1\u010f\1\u0110\57\0\1\u0111"+
    "\1\0\1\u0112\12\0\1\u0113\15\0\1\u0111\1\0\1\u0112"+
    "\11\0\1\u0113\24\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\10\40\1\u0114\17\40\2\0\1\6"+
    "\10\40\1\u0114\16\40\3\0\1\40\1\u0115\7\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\2\40"+
    "\1\u0116\25\40\2\0\1\6\2\40\1\u0116\24\40\3\0"+
    "\1\40\41\0\1\u0117\32\0\1\u0117\40\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\4\40\1\u0118"+
    "\23\40\2\0\1\6\4\40\1\u0118\22\40\3\0\1\40"+
    "\43\0\1\u0119\32\0\1\u0119\32\0\2\351\1\0\1\351"+
    "\1\u011a\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\27\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\22\40"+
    "\1\u011b\5\40\2\0\1\6\21\40\1\u011b\5\40\3\0"+
    "\1\40\61\0\1\u011c\31\0\1\u011c\21\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\21\40\1\u011d"+
    "\6\40\2\0\1\6\20\40\1\u011d\6\40\3\0\1\40"+
    "\1\0\1\u011e\6\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\4\40\1\u011f\23\40\2\0\1\6"+
    "\4\40\1\u011f\22\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\22\40\1\u0120"+
    "\5\40\2\0\1\6\21\40\1\u0120\5\40\3\0\1\40"+
    "\4\0\2\207\1\0\1\207\1\303\15\0\2\135\7\0"+
    "\30\135\3\0\27\135\3\0\1\135\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\22\40\1\u0121"+
    "\5\40\2\0\1\6\21\40\1\u0121\5\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\4\40\1\u0122\23\40\2\0\1\6\4\40\1\u0122"+
    "\22\40\3\0\1\40\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\4\40\1\u0123\23\40\2\0"+
    "\1\6\4\40\1\u0123\22\40\3\0\1\40\61\0\1\u0124"+
    "\31\0\1\u0124\54\0\1\u0125\32\0\1\u0125\36\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\10\40"+
    "\1\u0126\6\40\1\u0127\10\40\2\0\1\6\10\40\1\u0126"+
    "\5\40\1\u0127\10\40\3\0\1\40\1\u0128\7\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\u0129\27\40\3\0\1\40\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\13\6\1\u012a\14\6\2\0"+
    "\13\6\1\u012a\14\6\3\0\1\6\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\2\40\1\u012b"+
    "\25\40\2\0\1\6\2\40\1\u012b\24\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\4\40\1\u012c\23\40\2\0\1\6\4\40\1\u012c"+
    "\22\40\3\0\1\40\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\4\40\1\u012d\23\40\2\0"+
    "\1\6\4\40\1\u012d\22\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\10\40"+
    "\1\u012e\17\40\2\0\1\6\10\40\1\u012e\16\40\3\0"+
    "\1\40\1\u012f\7\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\15\40\1\u0130\12\40\2\0\1\6"+
    "\14\40\1\u0130\12\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\4\40\1\u0131"+
    "\23\40\2\0\1\6\4\40\1\u0131\22\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\13\40\1\u0132\14\40\2\0\1\6\12\40\1\u0132"+
    "\14\40\3\0\1\40\52\0\1\u0133\31\0\1\u0133\30\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\11\40\1\u0134\15\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\20\40\1\u0135\6\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\15\40\1\u0136\2\40"+
    "\1\u0137\6\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\21\40\1\u0138\5\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\6\40\1\u0139\20\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\5\40\1\u013a\21\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\4\40\1\u013b\22\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\12\40\1\u013c\14\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\20\40\1\u013d\6\40"+
    "\3\0\1\40\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\21\40\1\u013e"+
    "\5\40\3\0\1\40\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\4\40"+
    "\1\u013f\22\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\21\40\1\u0140\5\40\3\0\1\40\43\0\1\u0141\32\0"+
    "\1\u0141\75\0\1\u012f\32\0\1\u012f\22\0\1\u012f\56\0"+
    "\1\u0142\31\0\1\u0142\65\0\1\u0143\31\0\1\u0143\57\0"+
    "\1\u0144\32\0\1\u0144\111\0\1\u0145\31\0\1\u0145\62\0"+
    "\1\u0115\32\0\1\u0115\22\0\1\u0115\3\0\2\351\1\0"+
    "\2\351\174\0\1\u011e\31\0\1\u011e\13\0\1\u011e\41\0"+
    "\1\u0146\32\0\1\u0146\107\0\1\u0147\31\0\1\u0147\60\0"+
    "\1\u0128\6\0\1\u0148\23\0\1\u0128\5\0\1\u0148\14\0"+
    "\1\u0128\70\0\1\u0149\105\0\1\u014a\31\0\1\u014a\63\0"+
    "\1\u014b\32\0\1\u014b\71\0\1\u014c\32\0\1\u014c\102\0"+
    "\1\u014d\31\0\1\u014d\61\0\1\u014e\32\0\1\u014e\33\0"+
    "\1\117\2\0\1\117\1\0\1\234\2\117\2\0\2\117"+
    "\3\0\1\117\1\0\2\117\7\0\7\117\1\120\7\117"+
    "\1\u014f\10\117\2\0\10\117\1\120\6\117\1\u014f\10\117"+
    "\3\0\1\117\4\0\2\365\1\0\2\365\13\0\1\u0150"+
    "\1\0\2\365\7\0\30\365\3\0\27\365\44\0\1\u0151"+
    "\32\0\1\u0151\41\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\22\40\1\u0152\5\40\2\0\1\6"+
    "\21\40\1\u0152\5\40\3\0\1\40\4\0\2\250\1\0"+
    "\1\250\1\370\15\0\2\135\7\0\30\135\3\0\27\135"+
    "\3\0\1\135\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\4\40\1\u0153\23\40\2\0\1\6"+
    "\4\40\1\u0153\22\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\2\40\1\u0154"+
    "\25\40\2\0\1\6\2\40\1\u0154\24\40\3\0\1\40"+
    "\4\0\2\u0145\1\0\1\u0145\1\u0155\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\27\40"+
    "\3\0\1\40\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\3\6\1\u0156\24\6\2\0\4\6\1\u0156\23\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\22\6\1\u0157\5\6\2\0\22\6\1\u0157\5\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\24\6\1\u0158\3\6\2\0\30\6\3\0\1\6"+
    "\63\0\1\u0159\55\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\10\6\1\u015a\17\6\2\0\11\6\1\u015a\16\6"+
    "\3\0\1\6\1\u015b\13\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\1\u015c\27\6\2\0\1\6\1\u015c\26\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\6\6\1\u015d\21\6\2\0\7\6\1\u015d\20\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\17\6\1\u015e\10\6\2\0\17\6\1\u015e\10\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\15\6\1\u015f\12\6\2\0\15\6\1\u015f\12\6"+
    "\3\0\1\6\54\0\1\u0160\31\0\1\u0160\32\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\22\6\1\u0161\5\6"+
    "\2\0\22\6\1\u0161\5\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\20\6\1\u0162\7\6"+
    "\2\0\20\6\1\u0162\7\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\13\6\1\u0163\14\6"+
    "\2\0\13\6\1\u0163\14\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\1\u0164\27\6\2\0"+
    "\1\6\1\u0164\26\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\26\6\1\u0165\1\6\2\0"+
    "\25\6\1\u0165\2\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\22\6\1\u0166\5\6\2\0"+
    "\22\6\1\u0166\5\6\3\0\1\6\61\0\1\u0167\31\0"+
    "\1\u0167\56\0\1\u0168\32\0\1\u0168\102\0\1\u0169\31\0"+
    "\1\u0169\73\0\1\u016a\31\0\1\u016a\65\0\1\u016b\31\0"+
    "\1\u016b\57\0\1\u016c\32\0\1\u016c\42\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\14\40\1\u016d"+
    "\13\40\2\0\1\6\13\40\1\u016d\13\40\3\0\1\40"+
    "\53\0\1\u016e\31\0\1\u016e\23\0\2\u0117\1\0\1\u0117"+
    "\1\u016f\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\27\40\3\0\1\40\4\0\2\u0117"+
    "\1\0\2\u0117\120\0\2\u0170\1\0\1\u0170\1\u0171\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\27\40\3\0\1\40\4\0\2\u0170\1\0\1\u0170"+
    "\1\u0172\120\0\2\351\1\0\1\351\1\u011a\15\0\2\135"+
    "\7\0\30\135\3\0\27\135\3\0\1\135\4\0\2\u011c"+
    "\1\0\1\u011c\1\u0173\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\27\40\3\0\1\40"+
    "\4\0\2\u011c\1\0\2\u011c\124\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\4\40\1\u0174\23\40"+
    "\2\0\1\6\4\40\1\u0174\22\40\3\0\1\40\43\0"+
    "\1\u0175\32\0\1\u0175\36\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\13\40\1\u0176\14\40\2\0"+
    "\1\6\12\40\1\u0176\14\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\10\40"+
    "\1\u0177\17\40\2\0\1\6\10\40\1\u0177\16\40\3\0"+
    "\1\40\1\u0178\3\0\2\u0124\1\0\1\u0124\1\u0179\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\6\27\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\20\40\1\u017a\7\40"+
    "\2\0\1\6\17\40\1\u017a\7\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\6\40\1\u017b\21\40\2\0\1\6\6\40\1\u017b\20\40"+
    "\3\0\1\40\4\0\2\u0124\1\0\2\u0124\173\0\1\u017c"+
    "\31\0\1\u017c\23\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\14\40\1\u017d\13\40\2\0\1\6"+
    "\13\40\1\u017d\13\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\1\u017e\27\40"+
    "\2\0\1\6\1\u017e\26\40\3\0\1\40\53\0\1\u017f"+
    "\31\0\1\u017f\33\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\1\u0180\27\6\2\0\1\6\1\u0180\26\6\3\0"+
    "\1\6\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\16\6\1\u0181\11\6\2\0\16\6\1\u0181\11\6\3\0"+
    "\1\6\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\4\40\1\u0182\23\40\2\0\1\6\4\40"+
    "\1\u0182\22\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\1\u0183\27\40\2\0"+
    "\1\6\1\u0183\26\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\20\40\1\u0184"+
    "\7\40\2\0\1\6\17\40\1\u0184\7\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\15\40\1\u0185\12\40\2\0\1\6\14\40\1\u0185"+
    "\12\40\3\0\1\40\54\0\1\u0186\31\0\1\u0186\22\0"+
    "\2\u0187\1\0\1\u0187\1\u0188\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\25\40\1\u0189\2\40\2\0\1\6"+
    "\23\40\1\u0189\3\40\3\0\1\40\4\0\2\u014e\1\0"+
    "\1\u014e\1\u018a\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\27\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\4\40\1\u018b\23\40\2\0\1\6\4\40\1\u018b\22\40"+
    "\3\0\1\40\43\0\1\u018c\32\0\1\u018c\36\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\6\40\1\u018d\20\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\20\40\1\u018e\6\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\17\40\1\u018f\7\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\u0190\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\27\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\6\7\40\1\u0191\17\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\10\40\1\u0192\16\40"+
    "\3\0\1\40\10\0\1\135\3\0\1\6\7\0\1\u0193"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\27\40\3\0"+
    "\1\40\10\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\7\40\1\u0194\17\40"+
    "\3\0\1\40\45\0\1\u0195\32\0\1\u0195\105\0\1\u0196"+
    "\31\0\1\u0196\54\0\1\u0197\32\0\1\u0197\67\0\1\u0198"+
    "\32\0\1\u0198\34\0\2\u0145\1\0\2\u0145\166\0\1\u0199"+
    "\31\0\1\u0199\67\0\1\u0178\32\0\1\u0178\22\0\1\u0178"+
    "\36\0\1\u019a\32\0\1\u019a\71\0\1\u019b\32\0\1\u019b"+
    "\107\0\1\u019c\31\0\1\u019c\54\0\1\u019d\32\0\1\u019d"+
    "\111\0\1\u019e\31\0\1\u019e\17\0\2\u0187\1\0\2\u0187"+
    "\53\0\1\u019f\30\0\1\u019f\13\0\2\u014e\1\0\2\u014e"+
    "\121\0\1\117\2\0\1\117\1\0\1\234\2\117\2\0"+
    "\2\117\3\0\1\117\1\0\2\117\1\u01a0\6\0\7\117"+
    "\1\120\11\117\1\u01a1\6\117\2\0\10\117\1\120\10\117"+
    "\1\u01a1\6\117\3\0\1\117\1\0\1\u01a2\22\0\1\u01a3"+
    "\137\0\1\u01a4\32\0\1\u01a4\42\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\u01a5"+
    "\27\40\3\0\1\40\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\1\u01a6\27\40\2\0\1\6"+
    "\1\u01a6\26\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\22\40\1\u01a7\5\40"+
    "\2\0\1\6\21\40\1\u01a7\5\40\3\0\1\40\4\0"+
    "\2\u0145\1\0\1\u0145\1\u0155\15\0\2\135\7\0\30\135"+
    "\3\0\27\135\3\0\1\135\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\27\6\1\u01a8\2\0\26\6\1\u01a8"+
    "\1\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\22\6\1\u01a9\5\6\2\0\22\6\1\u01a9"+
    "\5\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\2\6\1\u01aa\25\6\2\0\3\6\1\u01aa"+
    "\24\6\3\0\1\6\41\0\1\u01ab\32\0\1\u01ab\44\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\3\6\1\u01ac"+
    "\24\6\2\0\4\6\1\u01ac\23\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\23\6\1\u01ad"+
    "\4\6\2\0\23\6\1\u01ad\4\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\12\6\1\u01ae"+
    "\15\6\2\0\12\6\1\u01ae\15\6\3\0\1\6\2\0"+
    "\1\u01af\46\0\1\u01af\31\0\1\u01af\23\0\1\u01af\11\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\10\6\1\u01b0"+
    "\17\6\2\0\11\6\1\u01b0\16\6\3\0\1\6\1\u01b1"+
    "\13\0\1\6\7\0\1\6\1\0\2\6\7\0\10\6"+
    "\1\u01b2\17\6\2\0\11\6\1\u01b2\16\6\3\0\1\6"+
    "\1\u01b3\13\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\4\6\1\u01b4\23\6\2\0\5\6\1\u01b4\22\6\3\0"+
    "\1\6\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\14\6\1\u01b5\13\6\2\0\14\6\1\u01b5\13\6\3\0"+
    "\1\6\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\22\6\1\u01b6\5\6\2\0\22\6\1\u01b6\5\6\3\0"+
    "\1\6\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\13\6\1\u01b7\14\6\2\0\13\6\1\u01b7\14\6\3\0"+
    "\1\6\52\0\1\u01b8\31\0\1\u01b8\102\0\1\u01b9\31\0"+
    "\1\u01b9\57\0\1\u01b3\32\0\1\u01b3\22\0\1\u01b3\42\0"+
    "\1\u01ba\32\0\1\u01ba\101\0\1\u01bb\31\0\1\u01bb\27\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\1\u01bc\27\40\2\0\1\6\1\u01bc\26\40\3\0\1\40"+
    "\37\0\1\u01bd\32\0\1\u01bd\36\0\2\u0117\1\0\1\u0117"+
    "\1\u016f\15\0\2\135\7\0\30\135\3\0\27\135\3\0"+
    "\1\135\4\0\2\u0170\1\0\2\u0170\120\0\2\u0170\1\0"+
    "\1\u0170\1\u01be\15\0\2\135\7\0\10\135\1\u01bf\17\135"+
    "\3\0\10\135\1\u01bf\16\135\3\0\1\135\1\u01c0\3\0"+
    "\2\u0170\1\0\2\u0170\36\0\1\u01c0\32\0\1\u01c0\22\0"+
    "\1\u01c0\3\0\2\u011c\1\0\1\u011c\1\u0173\15\0\2\135"+
    "\7\0\30\135\3\0\27\135\3\0\1\135\4\0\2\u0175"+
    "\1\0\1\u0175\1\u01c1\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\27\40\3\0\1\40"+
    "\4\0\2\u0175\1\0\2\u0175\124\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\4\40\1\u01c2\23\40"+
    "\2\0\1\6\4\40\1\u01c2\22\40\3\0\1\40\10\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\13\40\1\u01c3\14\40\2\0\1\6\12\40\1\u01c3\14\40"+
    "\3\0\1\40\52\0\1\u01c4\31\0\1\u01c4\24\0\2\u0124"+
    "\1\0\1\u0124\1\u0179\15\0\2\135\7\0\30\135\3\0"+
    "\27\135\3\0\1\135\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\22\40\1\u01c5\5\40\2\0"+
    "\1\6\21\40\1\u01c5\5\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\4\40"+
    "\1\u01c6\23\40\2\0\1\6\4\40\1\u01c6\22\40\3\0"+
    "\1\40\61\0\1\u01c7\31\0\1\u01c7\21\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\17\40\1\u01c8"+
    "\10\40\2\0\1\6\16\40\1\u01c8\10\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\20\40\1\u01c9\7\40\2\0\1\6\17\40\1\u01c9"+
    "\7\40\3\0\1\40\56\0\1\u01ca\31\0\1\u01ca\30\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\13\6\1\u01cb"+
    "\14\6\2\0\13\6\1\u01cb\14\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\1\u01cc\27\6"+
    "\2\0\1\6\1\u01cc\26\6\3\0\1\6\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\21\40"+
    "\1\u01cd\6\40\2\0\1\6\20\40\1\u01cd\6\40\3\0"+
    "\1\40\1\0\1\u01ce\6\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\22\40\1\u01cf\5\40\2\0"+
    "\1\6\21\40\1\u01cf\5\40\3\0\1\40\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\21\40"+
    "\1\u01d0\6\40\2\0\1\6\20\40\1\u01d0\6\40\3\0"+
    "\1\40\1\0\1\u01d1\6\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\6\40\1\u01d2\21\40\2\0"+
    "\1\6\6\40\1\u01d2\20\40\3\0\1\40\45\0\1\u01d3"+
    "\32\0\1\u01d3\30\0\2\u0187\1\0\2\u0187\120\0\2\u0187"+
    "\1\0\1\u0187\1\u0188\15\0\2\135\7\0\30\135\3\0"+
    "\27\135\3\0\1\135\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\7\40\1\u01d4\20\40\2\0"+
    "\1\6\7\40\1\u01d4\17\40\3\0\1\40\4\0\2\u014e"+
    "\1\0\1\u014e\1\u018a\15\0\2\135\7\0\30\135\3\0"+
    "\27\135\3\0\1\135\4\0\2\u018c\1\0\1\u018c\1\u01d5"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\27\40\3\0\1\40\4\0\2\u018c\1\0"+
    "\2\u018c\124\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\17\40\1\u01d6\7\40"+
    "\3\0\1\40\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\30\6\2\0\6\6\1\u01d7\12\6\1\u01d8\6\6"+
    "\3\0\1\6\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\21\40\1\u01d9"+
    "\5\40\3\0\1\40\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\2\40"+
    "\1\u01da\24\40\3\0\1\40\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\30\6\2\0\1\6\1\u01db\26\6"+
    "\3\0\1\6\43\0\1\u01dc\32\0\1\u01dc\117\0\1\u01dd"+
    "\72\0\1\u01de\32\0\1\u01de\113\0\1\u01df\31\0\1\u01df"+
    "\54\0\1\u01e0\32\0\1\u01e0\105\0\1\u01e1\31\0\1\u01e1"+
    "\65\0\1\u01e2\31\0\1\u01e2\57\0\1\u01e3\32\0\1\u01e3"+
    "\113\0\1\u01e4\31\0\1\u01e4\71\0\1\u01d1\31\0\1\u01d1"+
    "\13\0\1\u01d1\44\0\1\u01e5\32\0\1\u01e5\50\0\1\u01e6"+
    "\104\0\1\117\2\0\1\117\1\0\1\234\2\117\2\0"+
    "\2\117\3\0\1\117\1\0\2\117\1\u01a0\6\0\7\117"+
    "\1\120\20\117\2\0\10\117\1\120\17\117\3\0\1\117"+
    "\30\0\1\u01a0\130\0\1\u01e7\142\0\1\u01e8\31\0\1\u01e8"+
    "\34\0\1\6\7\0\1\6\1\0\2\6\7\0\10\6"+
    "\1\u01e9\17\6\2\0\11\6\1\u01e9\16\6\3\0\1\6"+
    "\1\u01ea\7\0\1\135\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\15\40\1\u01eb\12\40\2\0\1\6\14\40"+
    "\1\u01eb\12\40\3\0\1\40\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\4\40\1\u01ec\23\40"+
    "\2\0\1\6\4\40\1\u01ec\22\40\3\0\1\40\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\16\6\1\u01ed"+
    "\11\6\2\0\16\6\1\u01ed\11\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\22\6\1\u01ee"+
    "\5\6\2\0\22\6\1\u01ee\5\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\16\6\1\u01ef"+
    "\11\6\2\0\16\6\1\u01ef\11\6\3\0\1\6\55\0"+
    "\1\u01f0\31\0\1\u01f0\31\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\17\6\1\u01f1\10\6\2\0\17\6\1\u01f1"+
    "\10\6\3\0\1\6\56\0\1\u01f2\31\0\1\u01f2\30\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\2\6\1\u01f3"+
    "\25\6\2\0\3\6\1\u01f3\24\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\1\u01f4\27\6"+
    "\2\0\1\6\1\u01f4\26\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\4\6\1\u01f5\23\6"+
    "\2\0\5\6\1\u01f5\22\6\3\0\1\6\43\0\1\u01f6"+
    "\32\0\1\u01f6\107\0\1\u01f7\31\0\1\u01f7\52\0\1\u01f8"+
    "\32\0\1\u01f8\40\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\13\40\1\u01f9\14\40\2\0\1\6"+
    "\12\40\1\u01f9\14\40\3\0\1\40\52\0\1\u01fa\31\0"+
    "\1\u01fa\24\0\2\u0170\1\0\1\u0170\1\u01be\15\0\2\135"+
    "\7\0\30\135\3\0\27\135\3\0\1\135\10\0\1\135"+
    "\15\0\2\135\7\0\5\135\1\u01fb\22\135\3\0\5\135"+
    "\1\u01fb\21\135\3\0\1\135\44\0\1\u01fc\32\0\1\u01fc"+
    "\31\0\2\u0175\1\0\1\u0175\1\u01c1\15\0\2\135\7\0"+
    "\30\135\3\0\27\135\3\0\1\135\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\14\40\1\u01fd"+
    "\13\40\2\0\1\6\13\40\1\u01fd\13\40\3\0\1\40"+
    "\4\0\2\u01c4\1\0\1\u01c4\1\u01fe\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\27\40"+
    "\3\0\1\40\4\0\2\u01c4\1\0\2\u01c4\120\0\2\u01c7"+
    "\1\0\1\u01c7\1\u01ff\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\27\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\20\40\1\u0200\7\40\2\0\1\6\17\40\1\u0200"+
    "\7\40\3\0\1\40\4\0\2\u01c7\1\0\2\u01c7\124\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\1\u0201\27\40\2\0\1\6\1\u0201\26\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\30\40\2\0\1\u0202\27\40\3\0\1\40\37\0"+
    "\1\u0203\32\0\1\u0203\46\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\4\6\1\u0204\23\6\2\0\5\6\1\u0204"+
    "\22\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\3\6\1\u0205\24\6\2\0\4\6\1\u0205"+
    "\23\6\3\0\1\6\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\21\40\1\u0206\6\40\2\0"+
    "\1\6\20\40\1\u0206\6\40\3\0\1\40\1\0\1\u0207"+
    "\56\0\1\u0207\31\0\1\u0207\13\0\1\u0207\2\0\2\u01e4"+
    "\1\0\1\u01e4\1\u0208\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\27\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\4\40\1\u0209\23\40\2\0\1\6\4\40\1\u0209"+
    "\22\40\3\0\1\40\43\0\1\u020a\32\0\1\u020a\32\0"+
    "\2\u01d3\1\0\1\u01d3\1\u020b\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\27\40\3\0"+
    "\1\40\4\0\2\u01d3\1\0\2\u01d3\124\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\10\40\1\u020c"+
    "\17\40\2\0\1\6\10\40\1\u020c\16\40\3\0\1\40"+
    "\1\u020d\3\0\2\u018c\1\0\1\u018c\1\u01d5\15\0\2\135"+
    "\7\0\30\135\3\0\27\135\3\0\1\135\10\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\15\40\1\u020e\11\40\3\0\1\40\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\30\6\2\0"+
    "\1\6\1\u020f\26\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\30\6\2\0\11\6\1\u0210"+
    "\16\6\3\0\1\6\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\11\40"+
    "\1\u0211\15\40\3\0\1\40\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\30\6\2\0\13\6\1\u0212\14\6"+
    "\3\0\1\6\57\0\1\u0213\31\0\1\u0213\62\0\1\u01ea"+
    "\32\0\1\u01ea\22\0\1\u01ea\53\0\1\u0214\31\0\1\u0214"+
    "\61\0\1\u0215\32\0\1\u0215\101\0\1\u0216\31\0\1\u0216"+
    "\110\0\1\u0217\76\0\1\u0218\32\0\1\u0218\70\0\1\u0219"+
    "\32\0\1\u0219\33\0\2\u01e4\1\0\2\u01e4\163\0\1\u020d"+
    "\32\0\1\u020d\22\0\1\u020d\24\0\1\u021a\103\0\2\u01e8"+
    "\1\0\2\u01e8\130\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\15\6\1\u021b\12\6\2\0\15\6\1\u021b\12\6"+
    "\3\0\1\6\54\0\1\u021c\31\0\1\u021c\22\0\2\u0214"+
    "\1\0\1\u0214\1\u021d\3\0\1\6\7\0\1\6\1\0"+
    "\2\40\7\0\30\40\2\0\1\6\27\40\3\0\1\40"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\20\40\1\u021e\7\40\2\0\1\6\17\40\1\u021e"+
    "\7\40\3\0\1\40\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\15\6\1\u021f\12\6\2\0\15\6\1\u021f"+
    "\12\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\15\6\1\u0220\12\6\2\0\15\6\1\u0220"+
    "\12\6\3\0\1\6\54\0\1\u0221\31\0\1\u0221\32\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\22\6\1\u0222"+
    "\5\6\2\0\22\6\1\u0222\5\6\3\0\1\6\61\0"+
    "\1\u0223\31\0\1\u0223\25\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\22\6\1\u0224\5\6\2\0\22\6\1\u0224"+
    "\5\6\3\0\1\6\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\20\6\1\u0225\7\6\2\0\20\6\1\u0225"+
    "\7\6\3\0\1\6\61\0\1\u0226\31\0\1\u0226\15\0"+
    "\2\u01fa\1\0\1\u01fa\1\u0227\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\6\27\40\3\0"+
    "\1\40\4\0\2\u01fa\1\0\2\u01fa\120\0\2\u01fc\1\0"+
    "\1\u01fc\1\u01fb\15\0\2\135\7\0\30\135\3\0\27\135"+
    "\3\0\1\135\4\0\2\u01fc\1\0\2\u01fc\124\0\1\135"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\4\40"+
    "\1\u0228\23\40\2\0\1\6\4\40\1\u0228\22\40\3\0"+
    "\1\40\4\0\2\u01c4\1\0\1\u01c4\1\u01fe\15\0\2\135"+
    "\7\0\30\135\3\0\27\135\3\0\1\135\4\0\2\u01c7"+
    "\1\0\1\u01c7\1\u01ff\15\0\2\135\7\0\30\135\3\0"+
    "\27\135\3\0\1\135\4\0\2\u0213\1\0\1\u0213\1\u0229"+
    "\3\0\1\6\7\0\1\6\1\0\2\40\7\0\30\40"+
    "\2\0\1\6\27\40\3\0\1\40\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\20\40\1\u022a"+
    "\7\40\2\0\1\6\17\40\1\u022a\7\40\3\0\1\40"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\15\6"+
    "\1\u022b\12\6\2\0\15\6\1\u022b\12\6\3\0\1\6"+
    "\57\0\1\u022c\31\0\1\u022c\27\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\1\u022d\27\6\2\0\1\6\1\u022d"+
    "\26\6\3\0\1\6\4\0\2\u0219\1\0\2\u0219\3\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\30\6\2\0"+
    "\30\6\3\0\1\6\10\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\u022e\27\40"+
    "\3\0\1\40\71\0\1\u022f\37\0\2\u01e4\1\0\1\u01e4"+
    "\1\u0208\15\0\2\135\7\0\30\135\3\0\27\135\3\0"+
    "\1\135\4\0\2\u020a\1\0\1\u020a\1\u0230\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\27\40\3\0\1\40\4\0\2\u020a\1\0\2\u020a\120\0"+
    "\2\u01d3\1\0\1\u01d3\1\u020b\15\0\2\135\7\0\30\135"+
    "\3\0\27\135\3\0\1\135\10\0\1\135\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\13\40\1\u0231\14\40"+
    "\2\0\1\6\12\40\1\u0231\14\40\3\0\1\40\52\0"+
    "\1\u0232\31\0\1\u0232\30\0\1\135\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\22\40"+
    "\1\u0233\4\40\3\0\1\40\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\30\6\2\0\14\6\1\u0234\13\6"+
    "\3\0\1\6\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\30\6\2\0\27\6\1\u0235\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\30\6\2\0"+
    "\11\6\1\u0236\16\6\3\0\1\6\4\0\2\u0213\1\0"+
    "\2\u0213\120\0\2\u0214\1\0\2\u0214\173\0\1\u0237\31\0"+
    "\1\u0237\56\0\1\u0238\32\0\1\u0238\102\0\1\u0239\31\0"+
    "\1\u0239\55\0\1\u023a\32\0\1\u023a\36\0\2\u0219\1\0"+
    "\2\u0219\140\0\1\u023b\1\0\2\u023b\7\0\30\u023b\3\0"+
    "\27\u023b\20\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\5\6\1\u023c\22\6\2\0\6\6\1\u023c\21\6\3\0"+
    "\1\6\44\0\1\u023d\32\0\1\u023d\31\0\2\u0214\1\0"+
    "\1\u0214\1\u021d\15\0\2\135\7\0\30\135\3\0\27\135"+
    "\3\0\1\135\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\30\40\2\0\1\u023e\27\40\3\0"+
    "\1\40\14\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\10\6\1\u023f\17\6\2\0\11\6\1\u023f\16\6\3\0"+
    "\1\6\1\u0240\46\0\1\u0240\32\0\1\u0240\22\0\1\u0240"+
    "\13\0\1\6\7\0\1\6\1\0\2\6\7\0\4\6"+
    "\1\u0241\23\6\2\0\5\6\1\u0241\22\6\3\0\1\6"+
    "\4\0\2\u01fa\1\0\1\u01fa\1\u0227\15\0\2\135\7\0"+
    "\30\135\3\0\27\135\3\0\1\135\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\15\40\1\u0242"+
    "\12\40\2\0\1\6\14\40\1\u0242\12\40\3\0\1\40"+
    "\4\0\2\u0213\1\0\1\u0213\1\u0229\15\0\2\135\7\0"+
    "\30\135\3\0\27\135\3\0\1\135\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\30\40\2\0"+
    "\1\u0243\27\40\3\0\1\40\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\23\6\1\u0244\4\6\2\0\23\6"+
    "\1\u0244\4\6\3\0\1\6\71\0\1\u0245\47\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\22\6\1\u0246\5\6"+
    "\2\0\22\6\1\u0246\5\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\u0247\7\0\30\u0247\2\0\1\6"+
    "\27\u0247\3\0\1\u0247\26\0\2\u0248\7\0\30\u0248\3\0"+
    "\27\u0248\3\0\1\u0248\4\0\2\u020a\1\0\1\u020a\1\u0230"+
    "\15\0\2\135\7\0\30\135\3\0\27\135\3\0\1\135"+
    "\10\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\4\40\1\u0249\23\40\2\0\1\6\4\40\1\u0249"+
    "\22\40\3\0\1\40\43\0\1\u024a\32\0\1\u024a\36\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\14\40\1\u024b\12\40\3\0\1\40"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\30\6"+
    "\2\0\11\6\1\u024c\16\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\30\6\2\0\5\6"+
    "\1\u024d\22\6\3\0\1\6\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\30\6\2\0\7\6\1\u024e\20\6"+
    "\3\0\1\6\71\0\1\u024f\107\0\1\u0250\31\0\1\u0250"+
    "\100\0\1\u0251\31\0\1\u0251\71\0\1\u0252\31\0\1\u0252"+
    "\14\0\2\u0253\3\0\14\u0253\1\u0254\1\u0253\2\u0254\7\u0253"+
    "\30\u0254\3\u0253\27\u0254\7\u0253\11\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\16\6\1\u0255\11\6\2\0\16\6"+
    "\1\u0255\11\6\3\0\1\6\55\0\1\u0256\31\0\1\u0256"+
    "\31\0\1\6\7\0\1\6\1\0\2\6\7\0\1\u0257"+
    "\27\6\2\0\1\6\1\u0257\26\6\3\0\1\6\14\0"+
    "\1\6\7\0\1\6\1\0\2\6\7\0\15\6\1\u0258"+
    "\12\6\2\0\15\6\1\u0258\12\6\3\0\1\6\54\0"+
    "\1\u0259\31\0\1\u0259\32\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\1\u025a\27\6\2\0\1\6\1\u025a\26\6"+
    "\3\0\1\6\10\0\1\135\3\0\1\6\7\0\1\6"+
    "\1\0\2\40\7\0\1\40\1\u025b\26\40\2\0\1\6"+
    "\1\40\1\u025b\25\40\3\0\1\40\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\15\6\1\u025c\12\6\2\0"+
    "\15\6\1\u025c\12\6\3\0\1\6\14\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\14\6\1\u025d\13\6\2\0"+
    "\14\6\1\u025d\13\6\3\0\1\6\54\0\1\u025e\31\0"+
    "\1\u025e\32\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\16\6\1\u025f\11\6\2\0\16\6\1\u025f\11\6\3\0"+
    "\1\6\4\0\2\u024a\1\0\1\u024a\1\u0260\3\0\1\6"+
    "\7\0\1\6\1\0\2\40\7\0\30\40\2\0\1\6"+
    "\27\40\3\0\1\40\4\0\2\u024a\1\0\2\u024a\124\0"+
    "\1\135\3\0\1\6\7\0\1\6\1\0\2\40\7\0"+
    "\30\40\2\0\1\6\3\40\1\u0261\23\40\3\0\1\40"+
    "\14\0\1\6\7\0\1\6\1\0\2\6\7\0\30\6"+
    "\2\0\13\6\1\u0262\14\6\3\0\1\6\14\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\30\6\2\0\15\6"+
    "\1\u0263\12\6\3\0\1\6\37\0\1\u0264\32\0\1\u0264"+
    "\72\0\1\u0265\32\0\1\u0265\104\0\1\u0266\31\0\1\u0266"+
    "\74\0\1\u0267\31\0\1\u0267\41\0\1\u0268\1\0\2\u0268"+
    "\7\0\30\u0268\3\0\27\u0268\7\0\2\u0253\3\0\14\u0253"+
    "\1\u0268\1\u0253\2\u0268\7\u0253\30\u0268\3\u0253\27\u0268\7\u0253"+
    "\1\0\2\u0256\1\0\2\u0256\3\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\30\6\2\0\30\6\3\0\1\6"+
    "\4\0\2\u0256\1\0\2\u0256\130\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\13\6\1\u0269\14\6\2\0\13\6"+
    "\1\u0269\14\6\3\0\1\6\14\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\6\6\1\u026a\21\6\2\0\7\6"+
    "\1\u026a\20\6\3\0\1\6\45\0\1\u026b\32\0\1\u026b"+
    "\34\0\1\135\3\0\1\6\7\0\1\6\1\0\2\40"+
    "\7\0\27\40\1\u026c\2\0\1\6\25\40\1\u026c\1\40"+
    "\3\0\1\40\14\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\23\6\1\u026d\4\6\2\0\23\6\1\u026d\4\6"+
    "\3\0\1\6\4\0\2\u0266\1\0\2\u0266\3\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\30\6\2\0\30\6"+
    "\3\0\1\6\62\0\1\u026e\31\0\1\u026e\24\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\20\6\1\u026f\7\6"+
    "\2\0\20\6\1\u026f\7\6\3\0\1\6\4\0\2\u024a"+
    "\1\0\1\u024a\1\u0260\15\0\2\135\7\0\30\135\3\0"+
    "\27\135\3\0\1\135\14\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\30\6\2\0\26\6\1\u0270\1\6\3\0"+
    "\1\6\52\0\1\u0271\31\0\1\u0271\106\0\1\u0272\30\0"+
    "\1\u0272\11\0\2\u0266\1\0\2\u0266\173\0\1\u0273\31\0"+
    "\1\u0273\16\0\2\u0253\1\117\2\0\1\u0274\1\u0253\1\u0275"+
    "\2\u0274\2\u0253\2\u0274\3\u0253\1\u0268\1\u0274\2\u0268\5\u0253"+
    "\1\u0274\1\u0253\7\u0268\1\u0276\20\u0268\2\u0253\1\u0274\7\u0268"+
    "\1\u0276\17\u0268\3\u0253\1\u0274\3\u0253\11\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\4\6\1\u0277\23\6\2\0"+
    "\5\6\1\u0277\22\6\3\0\1\6\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\10\40\1\u0278"+
    "\17\40\2\0\1\6\10\40\1\u0278\16\40\3\0\1\40"+
    "\1\u0279\13\0\1\6\7\0\1\6\1\0\2\6\7\0"+
    "\14\6\1\u027a\13\6\2\0\14\6\1\u027a\13\6\3\0"+
    "\1\6\53\0\1\u027b\31\0\1\u027b\33\0\1\6\7\0"+
    "\1\6\1\0\2\6\7\0\10\6\1\u027c\17\6\2\0"+
    "\11\6\1\u027c\16\6\3\0\1\6\1\u027d\42\0\1\u027e"+
    "\32\0\1\u027e\75\0\1\u0279\32\0\1\u0279\22\0\1\u0279"+
    "\46\0\1\u027d\32\0\1\u027d\22\0\1\u027d\4\0\1\117"+
    "\2\0\1\117\1\0\1\234\2\117\2\0\2\117\3\0"+
    "\1\u0268\1\0\2\u0268\7\0\7\u0268\1\u0276\20\u0268\2\0"+
    "\1\117\7\u0268\1\u0276\17\u0268\3\0\1\117\3\0\2\u0253"+
    "\1\117\2\0\1\u0274\1\u0253\1\u0275\2\u0274\2\u0253\2\u0274"+
    "\3\u0253\1\u0268\1\u0274\2\u0268\5\u0253\1\u0274\1\u0253\7\u0268"+
    "\1\u0276\12\u0268\1\u027f\5\u0268\2\u0253\1\u0274\7\u0268\1\u0276"+
    "\11\u0268\1\u027f\5\u0268\3\u0253\1\u0274\3\u0253\11\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\1\u0280\27\6\2\0"+
    "\1\6\1\u0280\26\6\3\0\1\6\10\0\1\135\3\0"+
    "\1\6\7\0\1\6\1\0\2\40\7\0\3\40\1\u0281"+
    "\24\40\2\0\1\6\3\40\1\u0281\23\40\3\0\1\40"+
    "\42\0\1\u0282\32\0\1\u0282\33\0\2\u027b\1\0\2\u027b"+
    "\3\0\1\6\7\0\1\6\1\0\2\6\7\0\30\6"+
    "\2\0\30\6\3\0\1\6\4\0\2\u027b\1\0\2\u027b"+
    "\130\0\1\6\7\0\1\6\1\0\2\6\7\0\16\6"+
    "\1\u0283\11\6\2\0\16\6\1\u0283\11\6\3\0\1\6"+
    "\55\0\1\u0284\31\0\1\u0284\54\0\1\u0285\32\0\1\u0285"+
    "\35\0\2\u0253\1\117\2\0\1\u0274\1\u0253\1\u0275\2\u0274"+
    "\2\u0253\2\u0274\3\u0253\1\u0268\1\u0274\2\u0268\5\u0253\1\u0274"+
    "\1\u0253\7\u0268\1\u0276\12\u0268\1\u0286\5\u0268\2\u0253\1\u0274"+
    "\7\u0268\1\u0276\11\u0268\1\u0286\5\u0268\3\u0253\1\u0274\3\u0253"+
    "\11\0\1\6\7\0\1\6\1\0\2\6\7\0\22\6"+
    "\1\u0287\5\6\2\0\22\6\1\u0287\5\6\3\0\1\6"+
    "\4\0\2\u0282\1\0\1\u0282\1\u0288\3\0\1\6\7\0"+
    "\1\6\1\0\2\40\7\0\30\40\2\0\1\6\27\40"+
    "\3\0\1\40\4\0\2\u0282\1\0\2\u0282\120\0\2\u0284"+
    "\1\0\2\u0284\3\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\30\6\2\0\30\6\3\0\1\6\4\0\2\u0284"+
    "\1\0\2\u0284\175\0\1\u0289\31\0\1\u0289\14\0\2\u0253"+
    "\1\117\2\0\1\u0274\1\u0253\1\u0275\2\u0274\2\u0253\2\u0274"+
    "\3\u0253\1\u0268\1\u0274\2\u0268\5\u0253\1\u0274\1\u0253\7\u0268"+
    "\1\u0276\7\u0268\1\u028a\10\u0268\2\u0253\1\u0274\7\u0268\1\u0276"+
    "\6\u0268\1\u028a\10\u0268\3\u0253\1\u0274\3\u0253\11\0\1\6"+
    "\7\0\1\6\1\0\2\6\7\0\16\6\1\u028b\11\6"+
    "\2\0\16\6\1\u028b\11\6\3\0\1\6\4\0\2\u0282"+
    "\1\0\1\u0282\1\u0288\15\0\2\135\7\0\30\135\3\0"+
    "\27\135\3\0\1\135\55\0\1\u028c\31\0\1\u028c\20\0"+
    "\2\u0253\1\117\2\0\1\u0274\1\u0253\1\u0275\2\u0274\2\u0253"+
    "\2\u0274\3\u0253\1\u0268\1\u0274\2\u0268\1\u028d\4\u0253\1\u0274"+
    "\1\u0253\7\u0268\1\u0276\11\u0268\1\u028e\6\u0268\2\u0253\1\u0274"+
    "\7\u0268\1\u0276\10\u0268\1\u028e\6\u0268\3\u0253\1\u0274\1\u0253"+
    "\1\u028f\1\u0253\11\0\1\6\7\0\1\6\1\0\2\6"+
    "\7\0\20\6\1\u0290\7\6\2\0\20\6\1\u0290\7\6"+
    "\3\0\1\6\57\0\1\u0291\31\0\1\u0291\37\0\1\u0268"+
    "\1\u01e6\2\u0268\7\0\30\u0268\3\0\27\u0268\7\0\2\u0253"+
    "\1\117\2\0\1\u0274\1\u0253\1\u0275\2\u0274\2\u0253\2\u0274"+
    "\3\u0253\1\u0268\1\u0274\2\u0268\1\u028d\4\u0253\1\u0274\1\u0253"+
    "\7\u0268\1\u0276\20\u0268\2\u0253\1\u0274\7\u0268\1\u0276\17\u0268"+
    "\3\u0253\1\u0274\3\u0253\21\0\1\u0268\1\0\2\u0268\1\u01a0"+
    "\6\0\30\u0268\3\0\27\u0268\20\0\1\6\7\0\1\6"+
    "\1\0\2\6\7\0\10\6\1\u0292\17\6\2\0\11\6"+
    "\1\u0292\16\6\3\0\1\6\1\u0293\46\0\1\u0293\32\0"+
    "\1\u0293\22\0\1\u0293\13\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\16\6\1\u0294\11\6\2\0\16\6\1\u0294"+
    "\11\6\3\0\1\6\55\0\1\u0295\31\0\1\u0295\21\0"+
    "\2\u0295\1\0\2\u0295\3\0\1\6\7\0\1\6\1\0"+
    "\2\6\7\0\30\6\2\0\30\6\3\0\1\6\4\0"+
    "\2\u0295\1\0\2\u0295\117\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[49640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\6\1\5\11\1\1\1\11\1\1\2\11"+
    "\26\1\2\11\14\1\1\11\1\1\1\11\2\1\21\0"+
    "\1\1\1\11\2\0\1\11\2\0\4\1\1\0\3\11"+
    "\1\0\3\1\1\0\45\1\1\11\1\1\24\0\1\11"+
    "\1\0\1\11\5\1\2\0\20\1\2\0\2\1\1\0"+
    "\1\1\1\0\2\1\1\0\7\1\2\0\12\1\1\0"+
    "\16\1\7\0\1\1\15\0\11\1\1\0\6\1\1\0"+
    "\6\1\6\0\1\1\1\0\10\1\1\0\6\1\1\0"+
    "\2\1\1\0\6\1\1\0\3\1\1\0\15\1\4\0"+
    "\1\1\7\0\2\1\3\0\7\1\1\11\1\1\1\0"+
    "\4\1\1\0\6\1\1\0\1\11\4\0\1\1\1\0"+
    "\11\1\1\0\3\1\1\0\2\1\1\0\6\1\1\0"+
    "\16\1\20\0\6\1\1\11\3\1\1\11\1\1\1\0"+
    "\1\1\1\0\4\1\3\0\1\11\1\1\1\0\2\1"+
    "\1\0\11\1\1\0\3\1\1\0\2\1\1\0\12\1"+
    "\10\0\1\1\2\0\1\11\2\1\1\0\5\1\1\0"+
    "\1\1\1\0\3\1\2\11\1\0\12\1\1\0\3\1"+
    "\1\0\5\1\1\0\7\1\4\0\1\1\1\0\1\1"+
    "\1\0\4\1\1\11\1\1\1\0\2\1\1\11\5\1"+
    "\1\0\2\1\1\0\2\1\1\0\4\1\5\0\1\1"+
    "\1\0\2\1\1\0\4\1\1\0\11\1\6\0\4\1"+
    "\1\0\4\1\1\0\5\1\2\0\1\1\2\0\2\1"+
    "\1\11\2\1\1\0\2\1\4\0\1\1\1\0\2\1"+
    "\1\0\3\1\3\0\5\1\2\0\2\1\2\0\1\1"+
    "\4\0\1\1\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[661];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorCom> erroresCom;

    private void error(String lexeme) {
        erroresCom.add(new ErrorCom("Lexico","Simbolo no existe en el lenguaje",String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme,""));
    }    

    private void errorPrueba(String lexeme, String tipo) {
        erroresCom.add(new ErrorCom("PRUEBA",tipo,String.valueOf(yyline+1),String.valueOf(yycolumn+1),lexeme,""));
    }

    public List<ErrorCom> getErroresCom() {
        return erroresCom;
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LexerGCIC(java.io.Reader in) {
      erroresCom = new ArrayList<>();
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(symG.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { error(yytext()); new Symbol(symG.error,yyline,yycolumn, yytext());
            }
            // fall through
          case 96: break;
          case 2:
            { 
            }
            // fall through
          case 97: break;
          case 3:
            { return new Symbol(symG.EXCL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 98: break;
          case 4:
            { return new Symbol(symG.IDET,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 99: break;
          case 5:
            { return new Symbol(symG.PARI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 100: break;
          case 6:
            { return new Symbol(symG.PARD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 101: break;
          case 7:
            { return new Symbol(symG.MULT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 102: break;
          case 8:
            { return new Symbol(symG.SUMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 103: break;
          case 9:
            { return new Symbol(symG.COMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 104: break;
          case 10:
            { return new Symbol(symG.RESTA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 105: break;
          case 11:
            { return new Symbol(symG.BARRA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 106: break;
          case 12:
            { return new Symbol(symG.DOSPUNT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 107: break;
          case 13:
            { return new Symbol(symG.PUNTCOMA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 108: break;
          case 14:
            { return new Symbol(symG.MEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 109: break;
          case 15:
            { return new Symbol(symG.IGUAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 110: break;
          case 16:
            { return new Symbol(symG.MAY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 111: break;
          case 17:
            { return new Symbol(symG.CORCHCUADI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 112: break;
          case 18:
            { return new Symbol(symG.CORCHCUADD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 113: break;
          case 19:
            { return new Symbol(symG.CORCHI,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 114: break;
          case 20:
            { return new Symbol(symG.CORCHD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 115: break;
          case 21:
            { return new Symbol(symG.DIFER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 116: break;
          case 22:
            { return new Symbol(symG.AND,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 117: break;
          case 23:
            { return new Symbol(symG.PALABRAS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 118: break;
          case 24:
            { return new Symbol(symG.MENIG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 119: break;
          case 25:
            { return new Symbol(symG.DOBIGUAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 120: break;
          case 26:
            { return new Symbol(symG.MAYIG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 121: break;
          case 27:
            { return new Symbol(symG.IF,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 122: break;
          case 28:
            { return new Symbol(symG.IDETIQUETA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 123: break;
          case 29:
            { return new Symbol(symG.OR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 124: break;
          case 30:
            { return new Symbol(symG.VALP,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 125: break;
          case 31:
            { return new Symbol(symG.CARACTER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 126: break;
          case 32:
            { return new Symbol(symG.DECIM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 127: break;
          case 33:
            { return new Symbol(symG.ASC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 128: break;
          case 34:
            { return new Symbol(symG.PAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 129: break;
          case 35:
            { return new Symbol(symG.END,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 130: break;
          case 36:
            { return new Symbol(symG.ALT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 131: break;
          case 37:
            { return new Symbol(symG.SRC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 132: break;
          case 38:
            { return new Symbol(symG.CHAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 133: break;
          case 39:
            { return new Symbol(symG.BR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 134: break;
          case 40:
            { return new Symbol(symG.H1,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 135: break;
          case 41:
            { return new Symbol(symG.DESC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 136: break;
          case 42:
            { return new Symbol(symG.ELSE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 137: break;
          case 43:
            { return new Symbol(symG.EXIT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 138: break;
          case 44:
            { return new Symbol(symG.INITC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 139: break;
          case 45:
            { return new Symbol(symG.THEN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 140: break;
          case 46:
            { return new Symbol(symG.TRUE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 141: break;
          case 47:
            { return new Symbol(symG.COLS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 142: break;
          case 48:
            { return new Symbol(symG.HREF,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 143: break;
          case 49:
            { return new Symbol(symG.NAME,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 144: break;
          case 50:
            { return new Symbol(symG.ROWS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 145: break;
          case 51:
            { return new Symbol(symG.TYPE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 146: break;
          case 52:
            { return new Symbol(symG.DIV,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 147: break;
          case 53:
            { return new Symbol(symG.IMG,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 148: break;
          case 54:
            { return new Symbol(symG.FALSE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 149: break;
          case 55:
            { return new Symbol(symG.WHILE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 150: break;
          case 56:
            { return new Symbol(symG.CLASS,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 151: break;
          case 57:
            { return new Symbol(symG.COLOR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 152: break;
          case 58:
            { return new Symbol(symG.WIDTH,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 153: break;
          case 59:
            { return new Symbol(symG.BODY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 154: break;
          case 60:
            { return new Symbol(symG.GCIC,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 155: break;
          case 61:
            { return new Symbol(symG.HEAD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 156: break;
          case 62:
            { return new Symbol(symG.LINK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 157: break;
          case 63:
            { return new Symbol(symG.SPAM,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 158: break;
          case 64:
            { return new Symbol(symG.HUNTIL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 159: break;
          case 65:
            { return new Symbol(symG.INSERT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 160: break;
          case 66:
            { return new Symbol(symG.REPEAT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 161: break;
          case 67:
            { return new Symbol(symG.STRING,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 162: break;
          case 68:
            { return new Symbol(symG.HEIGHT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 163: break;
          case 69:
            { return new Symbol(symG.GLOBAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 164: break;
          case 70:
            { return new Symbol(symG.BOOLEAN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 165: break;
          case 71:
            { return new Symbol(symG.INPUT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 166: break;
          case 72:
            { return new Symbol(symG.TITLE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 167: break;
          case 73:
            { return new Symbol(symG.DECIMAL,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 168: break;
          case 74:
            { return new Symbol(symG.ELSEIF,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 169: break;
          case 75:
            { return new Symbol(symG.INTEGER,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 170: break;
          case 76:
            { return new Symbol(symG.ONLOAD,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 171: break;
          case 77:
            { return new Symbol(symG.REVERSE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 172: break;
          case 78:
            { return new Symbol(symG.ONCLICK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 173: break;
          case 79:
            { return new Symbol(symG.BUTTON,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 174: break;
          case 80:
            { return new Symbol(symG.OPTION,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 175: break;
          case 81:
            { return new Symbol(symG.SELECT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 176: break;
          case 82:
            { return new Symbol(symG.PROCESO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 177: break;
          case 83:
            { return new Symbol(symG.THENWHILE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 178: break;
          case 84:
            { return new Symbol(symG.FSIZE,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 179: break;
          case 85:
            { return new Symbol(symG.ALERTINFO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 180: break;
          case 86:
            { return new Symbol(symG.TEXTAREA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 181: break;
          case 87:
            { return new Symbol(symG.LETPAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 182: break;
          case 88:
            { return new Symbol(symG.BACK,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 183: break;
          case 89:
            { return new Symbol(symG.TEXTALIGN,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 184: break;
          case 90:
            { return new Symbol(symG.SCRIPTING,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 185: break;
          case 91:
            { return new Symbol(symG.FFAMILY,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 186: break;
          case 92:
            { return new Symbol(symG.LETIMPAR,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 187: break;
          case 93:
            { return new Symbol(symG.GETELEMENT,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 188: break;
          case 94:
            { return new Symbol(symG.NUMALEA,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 189: break;
          case 95:
            { return new Symbol(symG.CARALEATORIO,yyline+1,yycolumn+1, yytext());
            }
            // fall through
          case 190: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String[] argv) {
    if (argv.length == 0) {
      System.out.println("Usage : java LexerGCIC [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          // Side-effect: is encodingName valid?
          java.nio.charset.Charset.forName(encodingName);
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        LexerGCIC scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new LexerGCIC(reader);
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
